[
  {
    "name": "action-sheet",
    "description": "底部弹起的模态面板，包含与当前情境相关的多个选项。",
    "usage": [
      "import { ActionSheet, Cell } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicActionSheet() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell clickable title=\"基础用法\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)} />\n      <ActionSheet open={open} onSelect={() => setOpen(false)} onClose={setOpen}>\n        <ActionSheet.Action value=\"1\" name=\"选项一\" />\n        <ActionSheet.Action value=\"2\" name=\"选项二\" />\n        <ActionSheet.Action value=\"3\" name=\"选项三\" />\n      </ActionSheet>\n    </>\n  )\n}\n\nfunction ActionSheetWithCancel() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"展示取消按钮\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ActionSheet\n        open={open}\n        onSelect={() => setOpen(false)}\n        onCancel={() => setOpen(false)}\n        onClose={setOpen}\n      >\n        <ActionSheet.Action value=\"1\" name=\"选项一\" />\n        <ActionSheet.Action value=\"2\" name=\"选项二\" />\n        <ActionSheet.Action value=\"3\" name=\"选项三\" />\n        <ActionSheet.Button type=\"cancel\">取消</ActionSheet.Button>\n      </ActionSheet>\n    </>\n  )\n}\n\nfunction ActionSheetWithDescription() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"展示描述信息\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ActionSheet\n        open={open}\n        onSelect={() => setOpen(false)}\n        onCancel={() => setOpen(false)}\n        onClose={setOpen}\n      >\n        <ActionSheet.Header>这是一段描述信息</ActionSheet.Header>\n        <ActionSheet.Action value=\"1\" name=\"选项一\" />\n        <ActionSheet.Action value=\"2\" name=\"选项二\" />\n        <ActionSheet.Action value=\"3\" name=\"选项三\" />\n        <ActionSheet.Button type=\"cancel\">取消</ActionSheet.Button>\n      </ActionSheet>\n    </>\n  )\n}\n\nfunction ActionSheetWithStatuses() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell clickable title=\"选项状态\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)} />\n      <ActionSheet\n        open={open}\n        onSelect={() => setOpen(false)}\n        onCancel={() => setOpen(false)}\n        onClose={setOpen}\n      >\n        <ActionSheet.Action value=\"1\" style={{ color: \"#ee0a24\" }} name=\"着色选项\" />\n        <ActionSheet.Action value=\"2\" disabled name=\"禁止选项\" />\n        <ActionSheet.Action value=\"3\" loading name=\"选项三\" />\n        <ActionSheet.Button type=\"cancel\">取消</ActionSheet.Button>\n      </ActionSheet>\n    </>\n  )\n}\n\nexport default function ActionSheetDemo() {\n  return (\n    <Page title=\"ActionSheet 动作面板\" className=\"action-sheet-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicActionSheet />\n        <ActionSheetWithCancel />\n        <ActionSheetWithDescription />\n      </Block>\n      <Block variant=\"card\" title=\"选项状态\">\n        <ActionSheetWithStatuses />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "action-sheet",
        "code": "import { ActionSheet, Cell } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicActionSheet() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell clickable title=\"基础用法\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)} />\n      <ActionSheet open={open} onSelect={() => setOpen(false)} onClose={setOpen}>\n        <ActionSheet.Action value=\"1\" name=\"选项一\" />\n        <ActionSheet.Action value=\"2\" name=\"选项二\" />\n        <ActionSheet.Action value=\"3\" name=\"选项三\" />\n      </ActionSheet>\n    </>\n  )\n}\n\nfunction ActionSheetWithCancel() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"展示取消按钮\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ActionSheet\n        open={open}\n        onSelect={() => setOpen(false)}\n        onCancel={() => setOpen(false)}\n        onClose={setOpen}\n      >\n        <ActionSheet.Action value=\"1\" name=\"选项一\" />\n        <ActionSheet.Action value=\"2\" name=\"选项二\" />\n        <ActionSheet.Action value=\"3\" name=\"选项三\" />\n        <ActionSheet.Button type=\"cancel\">取消</ActionSheet.Button>\n      </ActionSheet>\n    </>\n  )\n}\n\nfunction ActionSheetWithDescription() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"展示描述信息\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ActionSheet\n        open={open}\n        onSelect={() => setOpen(false)}\n        onCancel={() => setOpen(false)}\n        onClose={setOpen}\n      >\n        <ActionSheet.Header>这是一段描述信息</ActionSheet.Header>\n        <ActionSheet.Action value=\"1\" name=\"选项一\" />\n        <ActionSheet.Action value=\"2\" name=\"选项二\" />\n        <ActionSheet.Action value=\"3\" name=\"选项三\" />\n        <ActionSheet.Button type=\"cancel\">取消</ActionSheet.Button>\n      </ActionSheet>\n    </>\n  )\n}\n\nfunction ActionSheetWithStatuses() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell clickable title=\"选项状态\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)} />\n      <ActionSheet\n        open={open}\n        onSelect={() => setOpen(false)}\n        onCancel={() => setOpen(false)}\n        onClose={setOpen}\n      >\n        <ActionSheet.Action value=\"1\" style={{ color: \"#ee0a24\" }} name=\"着色选项\" />\n        <ActionSheet.Action value=\"2\" disabled name=\"禁止选项\" />\n        <ActionSheet.Action value=\"3\" loading name=\"选项三\" />\n        <ActionSheet.Button type=\"cancel\">取消</ActionSheet.Button>\n      </ActionSheet>\n    </>\n  )\n}\n\nexport default function ActionSheetDemo() {\n  return (\n    <Page title=\"ActionSheet 动作面板\" className=\"action-sheet-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicActionSheet />\n        <ActionSheetWithCancel />\n        <ActionSheetWithDescription />\n      </Block>\n      <Block variant=\"card\" title=\"选项状态\">\n        <ActionSheetWithStatuses />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "area-picker",
    "description": "省市区三级联动选择，通常与[弹出层](/components/popup)组件配合使用。",
    "usage": [
      "import { AreaPicker, Toast } from \"@taroify/core\"\nimport { PickerOptionObject } from \"@taroify/core/picker\"\nimport { areaList } from \"@vant/area-data\"\nimport * as _ from \"lodash\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction toastOptions(options?: PickerOptionObject[]) {\n  const labels = _.map(options, ({ label }) => label)\n  Toast.open(JSON.stringify(labels))\n}\n\nfunction BasicAreaPicker() {\n  return <AreaPicker onConfirm={(_values_, options) => toastOptions(options)} areaList={areaList} />\n}\n\nfunction AreaPickerWithValue() {\n  return <AreaPicker defaultValue={[\"330000\", \"330300\", \"330305\"]} onConfirm={(_values_, options) => toastOptions(options)} areaList={areaList} />\n}\n\nfunction AreaPickerWithColumns() {\n  return (\n    <AreaPicker depth={2} onConfirm={(_values_, options) => toastOptions(options)} areaList={areaList} />\n  )\n}\n\nfunction ManualAreaPicker() {\n  return (\n    <AreaPicker onConfirm={(_values_, options) => toastOptions(options)}>\n      <AreaPicker.Toolbar>\n        <AreaPicker.Button>取消</AreaPicker.Button>\n        <AreaPicker.Title>标题</AreaPicker.Title>\n        <AreaPicker.Button>确认</AreaPicker.Button>\n      </AreaPicker.Toolbar>\n      <AreaPicker.Columns children={areaList} />\n    </AreaPicker>\n  )\n}\n\n\nexport default function AreaPickerDemo() {\n  return (\n    <Page title=\"AreaPicker 省市区选择器\" className=\"area-picker-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicAreaPicker />\n      </Block>\n      <Block variant=\"card\" title=\"选中省市区\">\n        <AreaPickerWithValue />\n      </Block>\n      <Block variant=\"card\" title=\"配置显示列\">\n        <AreaPickerWithColumns />\n      </Block>\n      <Block variant=\"card\" title=\"手动控制DOM\">\n        <ManualAreaPicker />\n      </Block>\n      <Toast id=\"toast\" />\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "area-picker",
        "code": "import { AreaPicker, Toast } from \"@taroify/core\"\nimport { PickerOptionObject } from \"@taroify/core/picker\"\nimport { areaList } from \"@vant/area-data\"\nimport * as _ from \"lodash\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction toastOptions(options?: PickerOptionObject[]) {\n  const labels = _.map(options, ({ label }) => label)\n  Toast.open(JSON.stringify(labels))\n}\n\nfunction BasicAreaPicker() {\n  return <AreaPicker onConfirm={(_values_, options) => toastOptions(options)} areaList={areaList} />\n}\n\nfunction AreaPickerWithValue() {\n  return <AreaPicker defaultValue={[\"330000\", \"330300\", \"330305\"]} onConfirm={(_values_, options) => toastOptions(options)} areaList={areaList} />\n}\n\nfunction AreaPickerWithColumns() {\n  return (\n    <AreaPicker depth={2} onConfirm={(_values_, options) => toastOptions(options)} areaList={areaList} />\n  )\n}\n\nfunction ManualAreaPicker() {\n  return (\n    <AreaPicker onConfirm={(_values_, options) => toastOptions(options)}>\n      <AreaPicker.Toolbar>\n        <AreaPicker.Button>取消</AreaPicker.Button>\n        <AreaPicker.Title>标题</AreaPicker.Title>\n        <AreaPicker.Button>确认</AreaPicker.Button>\n      </AreaPicker.Toolbar>\n      <AreaPicker.Columns children={areaList} />\n    </AreaPicker>\n  )\n}\n\n\nexport default function AreaPickerDemo() {\n  return (\n    <Page title=\"AreaPicker 省市区选择器\" className=\"area-picker-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicAreaPicker />\n      </Block>\n      <Block variant=\"card\" title=\"选中省市区\">\n        <AreaPickerWithValue />\n      </Block>\n      <Block variant=\"card\" title=\"配置显示列\">\n        <AreaPickerWithColumns />\n      </Block>\n      <Block variant=\"card\" title=\"手动控制DOM\">\n        <ManualAreaPicker />\n      </Block>\n      <Toast id=\"toast\" />\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "avatar",
    "description": "显示用户头像、首字母或备用图标。",
    "usage": [
      "import { Avatar, Badge } from \"@taroify/core\"\nimport { Cross, LocationOutlined, SettingOutlined } from \"@taroify/icons\"\nimport * as _ from \"lodash\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction randomAvatar() {\n  return `https://joesch.moe/api/v1/random?t=${_.random(Number.MAX_VALUE)}`\n}\n\nexport default function AvatarDemo() {\n  return (\n    <Page title=\"Avatar 头像\" className=\"avatar-demo\">\n      <Block title=\"基础用法\" className=\"avatar-block\">\n        <Avatar>P</Avatar>\n        <Avatar style={{ background: \"green\" }}>N</Avatar>\n        <Avatar style={{ background: \"pink\" }}>HP</Avatar>\n      </Block>\n      <Block title=\"尺寸\" className=\"avatar-block\">\n        <Avatar src={randomAvatar()} size=\"mini\" />\n        <Avatar src={randomAvatar()} size=\"small\" />\n        <Avatar src={randomAvatar()} size=\"medium\" />\n        <Avatar src={randomAvatar()} size=\"large\" />\n      </Block>\n      <Block title=\"形状\" className=\"avatar-block\">\n        <Avatar src={randomAvatar()} />\n        <Avatar src={randomAvatar()} shape=\"square\" />\n        <Avatar src={randomAvatar()} shape=\"rounded\" />\n      </Block>\n      <Block title=\"群组\" className=\"avatar-block\">\n        <Avatar.Group limit={5}>\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n        </Avatar.Group>\n      </Block>\n      <Block title=\"最大\" className=\"avatar-block\">\n        <Avatar.Group limit={3}>\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n        </Avatar.Group>\n      </Block>\n      <Block title=\"图标\" className=\"avatar-block\">\n        <Avatar style={{ background: \"red\" }}>\n          <Cross />\n        </Avatar>\n        <Avatar style={{ background: \"pink\" }}>\n          <LocationOutlined />\n        </Avatar>\n        <Avatar style={{ background: \"green\" }}>\n          <SettingOutlined />\n        </Avatar>\n      </Block>\n      <Block title=\"徽章用法\" className=\"avatar-block\">\n        <Badge className=\"avatar-dot\" dot position=\"bottom-right\">\n          <Avatar src={randomAvatar()} />\n        </Badge>\n        <Badge\n          className=\"avatar-avatar\"\n          content={<Avatar src={randomAvatar()} />}\n          position=\"bottom-right\"\n        >\n          <Avatar src={randomAvatar()} />\n        </Badge>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "avatar",
        "code": "import { Avatar, Badge } from \"@taroify/core\"\nimport { Cross, LocationOutlined, SettingOutlined } from \"@taroify/icons\"\nimport * as _ from \"lodash\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction randomAvatar() {\n  return `https://joesch.moe/api/v1/random?t=${_.random(Number.MAX_VALUE)}`\n}\n\nexport default function AvatarDemo() {\n  return (\n    <Page title=\"Avatar 头像\" className=\"avatar-demo\">\n      <Block title=\"基础用法\" className=\"avatar-block\">\n        <Avatar>P</Avatar>\n        <Avatar style={{ background: \"green\" }}>N</Avatar>\n        <Avatar style={{ background: \"pink\" }}>HP</Avatar>\n      </Block>\n      <Block title=\"尺寸\" className=\"avatar-block\">\n        <Avatar src={randomAvatar()} size=\"mini\" />\n        <Avatar src={randomAvatar()} size=\"small\" />\n        <Avatar src={randomAvatar()} size=\"medium\" />\n        <Avatar src={randomAvatar()} size=\"large\" />\n      </Block>\n      <Block title=\"形状\" className=\"avatar-block\">\n        <Avatar src={randomAvatar()} />\n        <Avatar src={randomAvatar()} shape=\"square\" />\n        <Avatar src={randomAvatar()} shape=\"rounded\" />\n      </Block>\n      <Block title=\"群组\" className=\"avatar-block\">\n        <Avatar.Group limit={5}>\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n        </Avatar.Group>\n      </Block>\n      <Block title=\"最大\" className=\"avatar-block\">\n        <Avatar.Group limit={3}>\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n          <Avatar src={randomAvatar()} />\n        </Avatar.Group>\n      </Block>\n      <Block title=\"图标\" className=\"avatar-block\">\n        <Avatar style={{ background: \"red\" }}>\n          <Cross />\n        </Avatar>\n        <Avatar style={{ background: \"pink\" }}>\n          <LocationOutlined />\n        </Avatar>\n        <Avatar style={{ background: \"green\" }}>\n          <SettingOutlined />\n        </Avatar>\n      </Block>\n      <Block title=\"徽章用法\" className=\"avatar-block\">\n        <Badge className=\"avatar-dot\" dot position=\"bottom-right\">\n          <Avatar src={randomAvatar()} />\n        </Badge>\n        <Badge\n          className=\"avatar-avatar\"\n          content={<Avatar src={randomAvatar()} />}\n          position=\"bottom-right\"\n        >\n          <Avatar src={randomAvatar()} />\n        </Badge>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "back-top",
    "description": "返回页面顶部的操作按钮。",
    "usage": [
      "import { BackTop, Cell, Tabs } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport { View } from \"@tarojs/components\";\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicBackTop() {\n  const list = [...Array(50).keys()];\n\n  return (\n    <View>\n      <Cell.Group>\n        {list.map(v => {\n          return (\n            <Cell key={v}>{v}</Cell>\n          )\n        })}\n      </Cell.Group>\n      <BackTop />\n    </View>\n  )\n}\n\nfunction CustomLocation() {\n  const list = [...Array(50).keys()];\n\n  return (\n    <View>\n      <Cell.Group>\n        {list.map((v) => {\n          return (\n            <Cell key={v}>{v}</Cell>\n          )\n        })}\n      </Cell.Group>\n      <BackTop right={100} bottom={200} />\n    </View>\n  )\n}\n\nfunction CustomContent() {\n  const list = [...Array(50).keys()];\n\n  return (\n    <View>\n      <Cell.Group>\n        {list.map((v) => {\n          return (\n            <Cell key={v}>{v}</Cell>\n          )\n        })}\n      </Cell.Group>\n      <BackTop className=\"custom-back-top\">返回顶部</BackTop>\n    </View>\n  )\n}\n\nfunction SetImmediate() {\n  const list = [...Array(50).keys()];\n\n  return (\n    <View>\n      <Cell.Group>\n        {list.map((v) => {\n          return (\n            <Cell key={v}>{v}</Cell>\n          )\n        })}\n      </Cell.Group>\n      <BackTop immediate />\n    </View>\n  )\n}\n\nexport default function BackTopDemo() {\n  const [value, setValue] = useState(0)\n  \n  return (\n    <Page title=\"BackTop 回到顶部\" className=\"back-top-demo\">\n      <Tabs value={value} onChange={setValue}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicBackTop />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义位置\">\n          <CustomLocation />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义内容\">\n          <CustomContent />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"瞬间滚动\">\n          <SetImmediate />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "back-top",
        "code": "import { BackTop, Cell, Tabs } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport { View } from \"@tarojs/components\";\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicBackTop() {\n  const list = [...Array(50).keys()];\n\n  return (\n    <View>\n      <Cell.Group>\n        {list.map(v => {\n          return (\n            <Cell key={v}>{v}</Cell>\n          )\n        })}\n      </Cell.Group>\n      <BackTop />\n    </View>\n  )\n}\n\nfunction CustomLocation() {\n  const list = [...Array(50).keys()];\n\n  return (\n    <View>\n      <Cell.Group>\n        {list.map((v) => {\n          return (\n            <Cell key={v}>{v}</Cell>\n          )\n        })}\n      </Cell.Group>\n      <BackTop right={100} bottom={200} />\n    </View>\n  )\n}\n\nfunction CustomContent() {\n  const list = [...Array(50).keys()];\n\n  return (\n    <View>\n      <Cell.Group>\n        {list.map((v) => {\n          return (\n            <Cell key={v}>{v}</Cell>\n          )\n        })}\n      </Cell.Group>\n      <BackTop className=\"custom-back-top\">返回顶部</BackTop>\n    </View>\n  )\n}\n\nfunction SetImmediate() {\n  const list = [...Array(50).keys()];\n\n  return (\n    <View>\n      <Cell.Group>\n        {list.map((v) => {\n          return (\n            <Cell key={v}>{v}</Cell>\n          )\n        })}\n      </Cell.Group>\n      <BackTop immediate />\n    </View>\n  )\n}\n\nexport default function BackTopDemo() {\n  const [value, setValue] = useState(0)\n  \n  return (\n    <Page title=\"BackTop 回到顶部\" className=\"back-top-demo\">\n      <Tabs value={value} onChange={setValue}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicBackTop />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义位置\">\n          <CustomLocation />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义内容\">\n          <CustomContent />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"瞬间滚动\">\n          <SetImmediate />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "backdrop",
    "description": "创建一个背景幕，用于强调特定的页面元素，并阻止用户进行其他操作。",
    "usage": [
      "import { Backdrop, Button } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nexport default function BackdropDemo() {\n  const [open, setOpen] = useState(false)\n  const [opened2, setOpened2] = useState(false)\n\n  return (\n    <Page title=\"Backdrop\" className=\"backdrop-demo\">\n      <Block title=\"基础用法\">\n        <Button variant=\"contained\" color=\"primary\" onClick={() => setOpen(true)}>\n          显示背景板\n        </Button>\n        <Backdrop open={open} closeable onClose={() => setOpen(false)} />\n      </Block>\n      <Block title=\"嵌入内容\">\n        <Button variant=\"contained\" color=\"primary\" onClick={() => setOpened2(true)}>\n          嵌入内容\n        </Button>\n        <Backdrop open={opened2} closeable onClose={() => setOpened2(false)}>\n          <View className=\"content-wrapper\">\n            <View className=\"content-block\" />\n          </View>\n        </Backdrop>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "backdrop",
        "code": "import { Backdrop, Button } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nexport default function BackdropDemo() {\n  const [open, setOpen] = useState(false)\n  const [opened2, setOpened2] = useState(false)\n\n  return (\n    <Page title=\"Backdrop\" className=\"backdrop-demo\">\n      <Block title=\"基础用法\">\n        <Button variant=\"contained\" color=\"primary\" onClick={() => setOpen(true)}>\n          显示背景板\n        </Button>\n        <Backdrop open={open} closeable onClose={() => setOpen(false)} />\n      </Block>\n      <Block title=\"嵌入内容\">\n        <Button variant=\"contained\" color=\"primary\" onClick={() => setOpened2(true)}>\n          嵌入内容\n        </Button>\n        <Backdrop open={opened2} closeable onClose={() => setOpened2(false)}>\n          <View className=\"content-wrapper\">\n            <View className=\"content-block\" />\n          </View>\n        </Backdrop>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "badge",
    "description": "在右上角展示徽标数字或小红点。",
    "usage": [
      "import { Badge } from \"@taroify/core\"\nimport { Cross, Down, Success } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function BadgeDemo() {\n  return (\n    <Page title=\"Badge 徽标\" className=\"badge-demo\">\n      <Block title=\"基础用法\">\n        <Badge content={5}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content=\"10\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content=\"Hot\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge dot>\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"最大值\">\n        <Badge content={10} max={9}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={21} max={20}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={100} max={99}>\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Badge className=\"custom-color\" content={5}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge className=\"custom-color\" content={10}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge className=\"custom-color\" content=\"Hot\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge className=\"custom-color\" dot>\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"自定义徽标内容\">\n        <Badge content={<Success className=\"badge-icon\" />}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={<Cross className=\"badge-icon\" />}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={<Down className=\"badge-icon\" />}>\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"自定义徽标位置\">\n        <Badge content={10} position=\"top-left\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={10} position=\"top-right\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={10} position=\"bottom-left\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={10} position=\"bottom-right\">\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"独立展示\" className=\"independent-badges\">\n        <Badge content=\"20\" />\n        <Badge content={100} max={99} />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "badge",
        "code": "import { Badge } from \"@taroify/core\"\nimport { Cross, Down, Success } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function BadgeDemo() {\n  return (\n    <Page title=\"Badge 徽标\" className=\"badge-demo\">\n      <Block title=\"基础用法\">\n        <Badge content={5}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content=\"10\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content=\"Hot\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge dot>\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"最大值\">\n        <Badge content={10} max={9}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={21} max={20}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={100} max={99}>\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Badge className=\"custom-color\" content={5}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge className=\"custom-color\" content={10}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge className=\"custom-color\" content=\"Hot\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge className=\"custom-color\" dot>\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"自定义徽标内容\">\n        <Badge content={<Success className=\"badge-icon\" />}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={<Cross className=\"badge-icon\" />}>\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={<Down className=\"badge-icon\" />}>\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"自定义徽标位置\">\n        <Badge content={10} position=\"top-left\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={10} position=\"top-right\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={10} position=\"bottom-left\">\n          <View className=\"badge-block\" />\n        </Badge>\n        <Badge content={10} position=\"bottom-right\">\n          <View className=\"badge-block\" />\n        </Badge>\n      </Block>\n      <Block title=\"独立展示\" className=\"independent-badges\">\n        <Badge content=\"20\" />\n        <Badge content={100} max={99} />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "button",
    "description": "按钮用于触发一个操作，如提交表单。",
    "usage": [
      "import { Button, Space, WhiteSpace } from \"@taroify/core\"\nimport { Arrow, ArrowLeft, Replay, ShopOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function ButtonDemo() {\n  return (\n    <Page title=\"Button 按钮\" className=\"button-demo\">\n      <Block title=\"按钮颜色\">\n        <Space>\n          <Button variant=\"contained\" color=\"primary\">\n            主要按钮\n          </Button>\n          <Button variant=\"contained\" color=\"info\">\n            信息按钮\n          </Button>\n          <Button variant=\"contained\" color=\"success\">\n            成功按钮\n          </Button>\n          <Button variant=\"contained\" color=\"warning\">\n            警告按钮\n          </Button>\n          <Button variant=\"contained\" color=\"danger\">\n            危险按钮\n          </Button>\n          <Button variant=\"contained\" color=\"default\">\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"文本按钮\">\n        <Space>\n          <Button variant=\"text\" color=\"primary\">\n            主要按钮\n          </Button>\n          <Button variant=\"text\" color=\"info\">\n            信息按钮\n          </Button>\n          <Button variant=\"text\" color=\"success\">\n            成功按钮\n          </Button>\n          <Button variant=\"text\" color=\"warning\">\n            警告按钮\n          </Button>\n          <Button variant=\"text\" color=\"danger\">\n            危险按钮\n          </Button>\n          <Button variant=\"text\" color=\"default\">\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"轮廓按钮\">\n        <Space>\n          <Button variant=\"outlined\" color=\"primary\">\n            主要按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"info\">\n            信息按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"success\">\n            成功按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"warning\">\n            警告按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"danger\">\n            危险按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"default\">\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"细边框按钮\">\n        <Space>\n          <Button variant=\"outlined\" color=\"primary\" hairline>\n            主要按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"info\" hairline>\n            信息按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"success\" hairline>\n            成功按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"warning\" hairline>\n            警告按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"danger\" hairline>\n            危险按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"default\" hairline>\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"禁止状态\">\n        <Space>\n          <Button variant=\"contained\" color=\"primary\" disabled>\n            主要按钮\n          </Button>\n          <Button variant=\"contained\" color=\"info\" disabled>\n            信息按钮\n          </Button>\n          <Button variant=\"contained\" color=\"success\" disabled>\n            成功按钮\n          </Button>\n          <Button variant=\"contained\" color=\"warning\" disabled>\n            警告按钮\n          </Button>\n          <Button variant=\"contained\" color=\"danger\" disabled>\n            危险按钮\n          </Button>\n          <Button variant=\"contained\" color=\"default\" disabled>\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"加载状态\">\n        <Space>\n          <Button color=\"success\" loading />\n          <Button color=\"success\" loading={{ type: \"spinner\" }} />\n          <Button color=\"primary\" loading>\n            加载中...\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"按钮形状\">\n        <Space>\n          <Button variant=\"contained\" color=\"primary\" shape=\"square\">\n            方形按钮\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" shape=\"round\">\n            圆形按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"图标按钮\">\n        <Space>\n          <Button variant=\"contained\" color=\"primary\" icon={<ShopOutlined />} />\n          <Button variant=\"contained\" color=\"primary\" icon={<ShopOutlined />}>\n            主要按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"primary\" icon={<ShopOutlined />} iconPosition=\"right\">\n            轮廓按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"按钮尺寸\">\n        <Button variant=\"contained\" color=\"primary\" size=\"large\">\n          大号按钮\n        </Button>\n        <WhiteSpace />\n        <Space>\n          <Button variant=\"contained\" color=\"primary\" size=\"medium\">\n            普通按钮\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" size=\"small\">\n            小型按钮\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" size=\"mini\">\n            迷你按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"块级按钮\">\n        <Button color=\"primary\" block>\n          块级按钮\n        </Button>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Space>\n          <Button style={{ backgroundColor: \"#7232dd\", color: \"#fff\", borderColor: \"#7232dd\" }}>\n            单色按钮\n          </Button>\n          <Button style={{ borderColor: \"#7232dd\", color: \"#7232dd\" }}>单色按钮</Button>\n          <Button\n            style={{\n              background: \"linear-gradient(to right, #ff6034, #ee0a24)\",\n              color: \"#fff\",\n              border: 0,\n            }}\n          >\n            渐变色按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"按钮组\">\n        <Space direction=\"vertical\">\n          <Button.Group variant=\"contained\" shape=\"round\" color=\"primary\">\n            <Button>\n              <ArrowLeft />\n              上一步\n            </Button>\n            <Button>\n              <Replay />\n              刷新\n            </Button>\n            <Button>\n              下一步\n              <Arrow />\n            </Button>\n          </Button.Group>\n          <Button.Group variant=\"outlined\" shape=\"round\">\n            <Button>\n              <ArrowLeft /> 上一步\n            </Button>\n            <Button>\n              <Replay />\n              刷新\n            </Button>\n            <Button>\n              下一步\n              <Arrow />\n            </Button>\n          </Button.Group>\n          <Button.Group variant=\"text\" shape=\"round\">\n            <Button>\n              <ArrowLeft /> 上一步\n            </Button>\n            <Button>\n              <Replay />\n              刷新\n            </Button>\n            <Button>\n              下一步\n              <Arrow />\n            </Button>\n          </Button.Group>\n        </Space>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "button",
        "code": "import { Button, Space, WhiteSpace } from \"@taroify/core\"\nimport { Arrow, ArrowLeft, Replay, ShopOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function ButtonDemo() {\n  return (\n    <Page title=\"Button 按钮\" className=\"button-demo\">\n      <Block title=\"按钮颜色\">\n        <Space>\n          <Button variant=\"contained\" color=\"primary\">\n            主要按钮\n          </Button>\n          <Button variant=\"contained\" color=\"info\">\n            信息按钮\n          </Button>\n          <Button variant=\"contained\" color=\"success\">\n            成功按钮\n          </Button>\n          <Button variant=\"contained\" color=\"warning\">\n            警告按钮\n          </Button>\n          <Button variant=\"contained\" color=\"danger\">\n            危险按钮\n          </Button>\n          <Button variant=\"contained\" color=\"default\">\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"文本按钮\">\n        <Space>\n          <Button variant=\"text\" color=\"primary\">\n            主要按钮\n          </Button>\n          <Button variant=\"text\" color=\"info\">\n            信息按钮\n          </Button>\n          <Button variant=\"text\" color=\"success\">\n            成功按钮\n          </Button>\n          <Button variant=\"text\" color=\"warning\">\n            警告按钮\n          </Button>\n          <Button variant=\"text\" color=\"danger\">\n            危险按钮\n          </Button>\n          <Button variant=\"text\" color=\"default\">\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"轮廓按钮\">\n        <Space>\n          <Button variant=\"outlined\" color=\"primary\">\n            主要按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"info\">\n            信息按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"success\">\n            成功按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"warning\">\n            警告按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"danger\">\n            危险按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"default\">\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"细边框按钮\">\n        <Space>\n          <Button variant=\"outlined\" color=\"primary\" hairline>\n            主要按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"info\" hairline>\n            信息按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"success\" hairline>\n            成功按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"warning\" hairline>\n            警告按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"danger\" hairline>\n            危险按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"default\" hairline>\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"禁止状态\">\n        <Space>\n          <Button variant=\"contained\" color=\"primary\" disabled>\n            主要按钮\n          </Button>\n          <Button variant=\"contained\" color=\"info\" disabled>\n            信息按钮\n          </Button>\n          <Button variant=\"contained\" color=\"success\" disabled>\n            成功按钮\n          </Button>\n          <Button variant=\"contained\" color=\"warning\" disabled>\n            警告按钮\n          </Button>\n          <Button variant=\"contained\" color=\"danger\" disabled>\n            危险按钮\n          </Button>\n          <Button variant=\"contained\" color=\"default\" disabled>\n            默认按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"加载状态\">\n        <Space>\n          <Button color=\"success\" loading />\n          <Button color=\"success\" loading={{ type: \"spinner\" }} />\n          <Button color=\"primary\" loading>\n            加载中...\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"按钮形状\">\n        <Space>\n          <Button variant=\"contained\" color=\"primary\" shape=\"square\">\n            方形按钮\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" shape=\"round\">\n            圆形按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"图标按钮\">\n        <Space>\n          <Button variant=\"contained\" color=\"primary\" icon={<ShopOutlined />} />\n          <Button variant=\"contained\" color=\"primary\" icon={<ShopOutlined />}>\n            主要按钮\n          </Button>\n          <Button variant=\"outlined\" color=\"primary\" icon={<ShopOutlined />} iconPosition=\"right\">\n            轮廓按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"按钮尺寸\">\n        <Button variant=\"contained\" color=\"primary\" size=\"large\">\n          大号按钮\n        </Button>\n        <WhiteSpace />\n        <Space>\n          <Button variant=\"contained\" color=\"primary\" size=\"medium\">\n            普通按钮\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" size=\"small\">\n            小型按钮\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" size=\"mini\">\n            迷你按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"块级按钮\">\n        <Button color=\"primary\" block>\n          块级按钮\n        </Button>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Space>\n          <Button style={{ backgroundColor: \"#7232dd\", color: \"#fff\", borderColor: \"#7232dd\" }}>\n            单色按钮\n          </Button>\n          <Button style={{ borderColor: \"#7232dd\", color: \"#7232dd\" }}>单色按钮</Button>\n          <Button\n            style={{\n              background: \"linear-gradient(to right, #ff6034, #ee0a24)\",\n              color: \"#fff\",\n              border: 0,\n            }}\n          >\n            渐变色按钮\n          </Button>\n        </Space>\n      </Block>\n      <Block title=\"按钮组\">\n        <Space direction=\"vertical\">\n          <Button.Group variant=\"contained\" shape=\"round\" color=\"primary\">\n            <Button>\n              <ArrowLeft />\n              上一步\n            </Button>\n            <Button>\n              <Replay />\n              刷新\n            </Button>\n            <Button>\n              下一步\n              <Arrow />\n            </Button>\n          </Button.Group>\n          <Button.Group variant=\"outlined\" shape=\"round\">\n            <Button>\n              <ArrowLeft /> 上一步\n            </Button>\n            <Button>\n              <Replay />\n              刷新\n            </Button>\n            <Button>\n              下一步\n              <Arrow />\n            </Button>\n          </Button.Group>\n          <Button.Group variant=\"text\" shape=\"round\">\n            <Button>\n              <ArrowLeft /> 上一步\n            </Button>\n            <Button>\n              <Replay />\n              刷新\n            </Button>\n            <Button>\n              下一步\n              <Arrow />\n            </Button>\n          </Button.Group>\n        </Space>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "calendar",
    "description": "日历组件用于选择日期或日期区间。",
    "usage": [
      "import { Calendar, Cell } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nconst formatDate = (date: Date) => {\n  if (date) {\n    return `${date.getMonth() + 1}/${date.getDate()}`\n  }\n}\n\nconst formatFullDate = (date: Date) => {\n  if (date) {\n    return `${date.getFullYear()}/${formatDate(date)}`\n  }\n}\n\nconst formatMultiple = (dates: Date[]) => {\n  if (dates.length) {\n    return `选择了 ${dates.length} 个日期`\n  }\n}\n\nconst formatRange = (dateRange: Date[]) => {\n  if (dateRange.length) {\n    const [start, end] = dateRange\n    return `${formatDate(start)} - ${formatDate(end)}`\n  }\n}\n\nconst dayFormatter = (day: Calendar.DayObject) => {\n  if (!day.value) {\n    return day\n  }\n\n  const month = day.value.getMonth() + 1\n  const date = day.value.getDate()\n\n  if (month === 5) {\n    if (date === 1) {\n      day.top = \"劳动节\"\n    } else if (date === 4) {\n      day.top = \"青年节\"\n    } else if (date === 11) {\n      day.children = \"今天\"\n    }\n  }\n\n  if (day.type === \"start\") {\n    day.bottom = \"入店\"\n  } else if (day.type === \"end\") {\n    day.bottom = \"离店\"\n  } else if (day.type === \"active\") {\n    day.bottom = \"入店/离店\"\n  }\n\n  return day\n}\n\nfunction SingleCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择单个日期\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"single\"\n        value={value}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onChange={setValue}\n        onConfirm={(newValue) => {\n          setOpen(false)\n          setFormatValue(formatFullDate(newValue))\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction MultipleCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择多个日期\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"multiple\"\n        value={value}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onChange={setValue}\n        onConfirm={(newValue) => {\n          setFormatValue(formatMultiple(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction RangeCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择日期区间\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction SingleQuicklyCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择单个日期\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"single\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        showConfirm={false}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatFullDate(newValue))\n          setOpen(false)\n        }}\n      />\n    </>\n  )\n}\n\nfunction RangeQuicklyCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择日期区间\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        showConfirm={false}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      />\n    </>\n  )\n}\n\nfunction CustomColorCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义颜色\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        style={{\n          // @ts-ignore\n          \"--calendar-active-color\": \"red\",\n        }}\n        type=\"single\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatFullDate(newValue))\n          setOpen(false)\n        }}\n      />\n    </>\n  )\n}\n\nfunction CustomRangeCalendar() {\n  const [minDate] = useState(new Date(2010, 0, 1))\n  const [maxDate] = useState(new Date(2010, 0, 31))\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义日期范围\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        min={minDate}\n        max={maxDate}\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction CustomConfirmCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义按钮\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        value={value}\n        onChange={(newValue) => {\n          setValue(newValue)\n        }}\n        poppable\n        showPopup={open}\n        confirmDisabledText=\"请选择结束时间\"\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction CustomDayCalendar() {\n  const [open, setOpen] = useState(false)\n  const [minDate] = useState(new Date(2010, 4, 1))\n  const [maxDate] = useState(new Date(2010, 4, 31))\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义日期文案\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        min={minDate}\n        max={maxDate}\n        formatter={dayFormatter}\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction CustomPositionCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义弹出位置\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        popupPlacement=\"right\"\n        type=\"single\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatFullDate(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction CustomFirstDayOfWeekCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义周起始日\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        popupCloseIcon={false}\n        popupRounded={false}\n        type=\"single\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        firstDayOfWeek={1}\n        onConfirm={(newValue) => {\n          setFormatValue(formatFullDate(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction TiledCalendar() {\n  const [minDate] = useState(new Date(2012, 1, 10))\n  const [maxDate] = useState(new Date(2012, 10, 20))\n  const [value, setValue] = useState<Date>()\n  return (\n    <Calendar\n      style={{ height: \"500px\" }}\n      title=\"日历\"\n      min={minDate}\n      max={maxDate}\n      value={value}\n      onChange={setValue}\n    />\n  )\n}\n\nexport default function CalendarDemo() {\n  return (\n    <Page title=\"Calendar 日历\" className=\"calendar-demo\">\n      <Block title=\"基础用法\">\n        <Cell.Group clickable inset>\n          <CustomWrapper>\n            <SingleCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <MultipleCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <RangeCalendar />\n          </CustomWrapper>\n        </Cell.Group>\n      </Block>\n      <Block title=\"快捷选择\">\n        <Cell.Group clickable inset>\n          <CustomWrapper>\n            <SingleQuicklyCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <RangeQuicklyCalendar />\n          </CustomWrapper>\n        </Cell.Group>\n      </Block>\n      <Block title=\"自定义日历\">\n        <Cell.Group clickable inset>\n          <CustomWrapper>\n            <CustomColorCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomRangeCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomConfirmCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomDayCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomPositionCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomFirstDayOfWeekCalendar />\n          </CustomWrapper>\n        </Cell.Group>\n      </Block>\n      <Block variant=\"card\" title=\"平铺展示\">\n        <TiledCalendar />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "calendar",
        "code": "import { Calendar, Cell } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nconst formatDate = (date: Date) => {\n  if (date) {\n    return `${date.getMonth() + 1}/${date.getDate()}`\n  }\n}\n\nconst formatFullDate = (date: Date) => {\n  if (date) {\n    return `${date.getFullYear()}/${formatDate(date)}`\n  }\n}\n\nconst formatMultiple = (dates: Date[]) => {\n  if (dates.length) {\n    return `选择了 ${dates.length} 个日期`\n  }\n}\n\nconst formatRange = (dateRange: Date[]) => {\n  if (dateRange.length) {\n    const [start, end] = dateRange\n    return `${formatDate(start)} - ${formatDate(end)}`\n  }\n}\n\nconst dayFormatter = (day: Calendar.DayObject) => {\n  if (!day.value) {\n    return day\n  }\n\n  const month = day.value.getMonth() + 1\n  const date = day.value.getDate()\n\n  if (month === 5) {\n    if (date === 1) {\n      day.top = \"劳动节\"\n    } else if (date === 4) {\n      day.top = \"青年节\"\n    } else if (date === 11) {\n      day.children = \"今天\"\n    }\n  }\n\n  if (day.type === \"start\") {\n    day.bottom = \"入店\"\n  } else if (day.type === \"end\") {\n    day.bottom = \"离店\"\n  } else if (day.type === \"active\") {\n    day.bottom = \"入店/离店\"\n  }\n\n  return day\n}\n\nfunction SingleCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择单个日期\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"single\"\n        value={value}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onChange={setValue}\n        onConfirm={(newValue) => {\n          setOpen(false)\n          setFormatValue(formatFullDate(newValue))\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction MultipleCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择多个日期\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"multiple\"\n        value={value}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onChange={setValue}\n        onConfirm={(newValue) => {\n          setFormatValue(formatMultiple(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction RangeCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择日期区间\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction SingleQuicklyCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择单个日期\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"single\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        showConfirm={false}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatFullDate(newValue))\n          setOpen(false)\n        }}\n      />\n    </>\n  )\n}\n\nfunction RangeQuicklyCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"选择日期区间\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        showConfirm={false}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      />\n    </>\n  )\n}\n\nfunction CustomColorCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义颜色\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        style={{\n          // @ts-ignore\n          \"--calendar-active-color\": \"red\",\n        }}\n        type=\"single\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatFullDate(newValue))\n          setOpen(false)\n        }}\n      />\n    </>\n  )\n}\n\nfunction CustomRangeCalendar() {\n  const [minDate] = useState(new Date(2010, 0, 1))\n  const [maxDate] = useState(new Date(2010, 0, 31))\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义日期范围\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        min={minDate}\n        max={maxDate}\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction CustomConfirmCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义按钮\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        value={value}\n        onChange={(newValue) => {\n          setValue(newValue)\n        }}\n        poppable\n        showPopup={open}\n        confirmDisabledText=\"请选择结束时间\"\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction CustomDayCalendar() {\n  const [open, setOpen] = useState(false)\n  const [minDate] = useState(new Date(2010, 4, 1))\n  const [maxDate] = useState(new Date(2010, 4, 31))\n  const [value, setValue] = useState<Date[]>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义日期文案\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        type=\"range\"\n        min={minDate}\n        max={maxDate}\n        formatter={dayFormatter}\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatRange(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction CustomPositionCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义弹出位置\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        popupPlacement=\"right\"\n        type=\"single\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        onConfirm={(newValue) => {\n          setFormatValue(formatFullDate(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction CustomFirstDayOfWeekCalendar() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<Date>()\n  const [formatValue, setFormatValue] = useState<string>()\n\n  return (\n    <>\n      <Cell\n        title=\"自定义周起始日\"\n        isLink\n        children={formatValue}\n        onClick={() => setOpen(true)}\n      />\n      <Calendar\n        popupCloseIcon={false}\n        popupRounded={false}\n        type=\"single\"\n        value={value}\n        onChange={setValue}\n        poppable\n        showPopup={open}\n        onClose={setOpen}\n        firstDayOfWeek={1}\n        onConfirm={(newValue) => {\n          setFormatValue(formatFullDate(newValue))\n          setOpen(false)\n        }}\n      >\n      </Calendar>\n    </>\n  )\n}\n\nfunction TiledCalendar() {\n  const [minDate] = useState(new Date(2012, 1, 10))\n  const [maxDate] = useState(new Date(2012, 10, 20))\n  const [value, setValue] = useState<Date>()\n  return (\n    <Calendar\n      style={{ height: \"500px\" }}\n      title=\"日历\"\n      min={minDate}\n      max={maxDate}\n      value={value}\n      onChange={setValue}\n    />\n  )\n}\n\nexport default function CalendarDemo() {\n  return (\n    <Page title=\"Calendar 日历\" className=\"calendar-demo\">\n      <Block title=\"基础用法\">\n        <Cell.Group clickable inset>\n          <CustomWrapper>\n            <SingleCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <MultipleCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <RangeCalendar />\n          </CustomWrapper>\n        </Cell.Group>\n      </Block>\n      <Block title=\"快捷选择\">\n        <Cell.Group clickable inset>\n          <CustomWrapper>\n            <SingleQuicklyCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <RangeQuicklyCalendar />\n          </CustomWrapper>\n        </Cell.Group>\n      </Block>\n      <Block title=\"自定义日历\">\n        <Cell.Group clickable inset>\n          <CustomWrapper>\n            <CustomColorCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomRangeCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomConfirmCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomDayCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomPositionCalendar />\n          </CustomWrapper>\n          <CustomWrapper>\n            <CustomFirstDayOfWeekCalendar />\n          </CustomWrapper>\n        </Cell.Group>\n      </Block>\n      <Block variant=\"card\" title=\"平铺展示\">\n        <TiledCalendar />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "cascader",
    "description": "级联选择框，用于多层级数据的选择，典型场景为省市区选择。",
    "usage": [
      "import { Cascader, Field, Input, Popup } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport { area, dept, customArea, dynamic } from \"./area\"\nimport \"./index.scss\"\n\nfunction BasicCascader() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<string[]>([])\n  const [fieldValue, setFieldValue] = useState(\"\")\n  return (\n    <>\n      <Field label=\"选项值\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)}>\n        <Input readonly placeholder=\"请选择部门\" value={fieldValue} />\n      </Field>\n      <Popup open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Popup.Close />\n        <Cascader\n          options={dept}\n          value={value}\n          title=\"请选择部门\"\n          placeholder=\"请选择\"\n          onSelect={setValue}\n          onChange={(_values_, options) => {\n            setOpen(false)\n            setFieldValue(\n              options.map(item => item.children).join(\"/\")\n            )\n          }}\n        />\n      </Popup>\n    </>\n  )\n}\n\nfunction CustomColorCascader() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<string[]>([])\n  const [fieldValue, setFieldValue] = useState(\"\")\n  return (\n    <>\n      <Field label=\"选项值\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)}>\n        <Input readonly placeholder=\"请选择地区\" value={fieldValue} />\n      </Field>\n      <Popup open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Popup.Close />\n        <Cascader\n          className=\"custom-color\"\n          swipeable\n          title=\"请选择地区\"\n          options={area}\n          value={value}\n          onSelect={setValue}\n          onChange={(_values_, options) => {\n            setOpen(false)\n            setFieldValue(\n              options.map(item => item.children).join(\"/\")\n            )\n          }}\n        >\n        </Cascader>\n      </Popup>\n    </>\n  )\n}\n\nfunction DynamicCascader() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<string[]>([])\n  const [fieldValue, setFieldValue] = useState(\"\")\n  return (\n    <>\n      <Field label=\"选项值\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)}>\n        <Input readonly placeholder=\"请选择\" value={fieldValue} />\n      </Field>\n      <Popup open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Popup.Close />\n        <Cascader\n          options={dynamic}\n          loadData={(_values_) => {\n            const len = _values_.length\n            return new Promise((resolve) => {\n              resolve(len > 3 ? [] : [\n                { label: `动态${len}-1`, value: Math.random() },\n                { label: `动态${len}-2`, value: Math.random() }\n              ])\n            })\n          }}\n          title=\"请选择\"\n          swipeable\n          value={value}\n          onSelect={setValue}\n          onChange={(_values_, options) => {\n            setOpen(false)\n            setFieldValue(\n              options.map(item => item.children).join(\"/\")\n            )\n          }}\n        />\n      </Popup>\n    </>\n  )\n}\n\nconst fieldNames = {\n  label: \"name\",\n  value: \"code\",\n  children: \"data\"\n}\nfunction CustomFieldCascader() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<string[]>([])\n  const [fieldValue, setFieldValue] = useState(\"\")\n  return (\n    <>\n      <Field label=\"选项值\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)}>\n        <Input readonly placeholder=\"请选择地区\" value={fieldValue} />\n      </Field>\n      <Popup open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Popup.Close />\n        <Cascader\n          options={customArea}\n          fieldNames={fieldNames}\n          value={value}\n          title=\"请选择地区\"\n          placeholder=\"请选择\"\n          onSelect={setValue}\n          onChange={(_values_, options) => {\n            setOpen(false)\n            setFieldValue(\n              options.map(item => item.children).join(\"/\")\n            )\n          }}\n        />\n      </Popup>\n    </>\n  )\n}\n\nexport default function CascaderDemo() {\n  return (\n    <Page title=\"Cascader 级联选择\" className=\"cascader-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicCascader />\n      </Block>\n      <Block variant=\"card\" title=\"自定义颜色\">\n        <CustomColorCascader />\n      </Block>\n      <Block variant=\"card\" title=\"异步加载选项\">\n        <DynamicCascader />\n      </Block>\n      <Block variant=\"card\" title=\"自定义字段名\">\n        <CustomFieldCascader />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "cascader",
        "code": "import { Cascader, Field, Input, Popup } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport { area, dept, customArea, dynamic } from \"./area\"\nimport \"./index.scss\"\n\nfunction BasicCascader() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<string[]>([])\n  const [fieldValue, setFieldValue] = useState(\"\")\n  return (\n    <>\n      <Field label=\"选项值\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)}>\n        <Input readonly placeholder=\"请选择部门\" value={fieldValue} />\n      </Field>\n      <Popup open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Popup.Close />\n        <Cascader\n          options={dept}\n          value={value}\n          title=\"请选择部门\"\n          placeholder=\"请选择\"\n          onSelect={setValue}\n          onChange={(_values_, options) => {\n            setOpen(false)\n            setFieldValue(\n              options.map(item => item.children).join(\"/\")\n            )\n          }}\n        />\n      </Popup>\n    </>\n  )\n}\n\nfunction CustomColorCascader() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<string[]>([])\n  const [fieldValue, setFieldValue] = useState(\"\")\n  return (\n    <>\n      <Field label=\"选项值\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)}>\n        <Input readonly placeholder=\"请选择地区\" value={fieldValue} />\n      </Field>\n      <Popup open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Popup.Close />\n        <Cascader\n          className=\"custom-color\"\n          swipeable\n          title=\"请选择地区\"\n          options={area}\n          value={value}\n          onSelect={setValue}\n          onChange={(_values_, options) => {\n            setOpen(false)\n            setFieldValue(\n              options.map(item => item.children).join(\"/\")\n            )\n          }}\n        >\n        </Cascader>\n      </Popup>\n    </>\n  )\n}\n\nfunction DynamicCascader() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<string[]>([])\n  const [fieldValue, setFieldValue] = useState(\"\")\n  return (\n    <>\n      <Field label=\"选项值\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)}>\n        <Input readonly placeholder=\"请选择\" value={fieldValue} />\n      </Field>\n      <Popup open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Popup.Close />\n        <Cascader\n          options={dynamic}\n          loadData={(_values_) => {\n            const len = _values_.length\n            return new Promise((resolve) => {\n              resolve(len > 3 ? [] : [\n                { label: `动态${len}-1`, value: Math.random() },\n                { label: `动态${len}-2`, value: Math.random() }\n              ])\n            })\n          }}\n          title=\"请选择\"\n          swipeable\n          value={value}\n          onSelect={setValue}\n          onChange={(_values_, options) => {\n            setOpen(false)\n            setFieldValue(\n              options.map(item => item.children).join(\"/\")\n            )\n          }}\n        />\n      </Popup>\n    </>\n  )\n}\n\nconst fieldNames = {\n  label: \"name\",\n  value: \"code\",\n  children: \"data\"\n}\nfunction CustomFieldCascader() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<string[]>([])\n  const [fieldValue, setFieldValue] = useState(\"\")\n  return (\n    <>\n      <Field label=\"选项值\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)}>\n        <Input readonly placeholder=\"请选择地区\" value={fieldValue} />\n      </Field>\n      <Popup open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Popup.Close />\n        <Cascader\n          options={customArea}\n          fieldNames={fieldNames}\n          value={value}\n          title=\"请选择地区\"\n          placeholder=\"请选择\"\n          onSelect={setValue}\n          onChange={(_values_, options) => {\n            setOpen(false)\n            setFieldValue(\n              options.map(item => item.children).join(\"/\")\n            )\n          }}\n        />\n      </Popup>\n    </>\n  )\n}\n\nexport default function CascaderDemo() {\n  return (\n    <Page title=\"Cascader 级联选择\" className=\"cascader-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicCascader />\n      </Block>\n      <Block variant=\"card\" title=\"自定义颜色\">\n        <CustomColorCascader />\n      </Block>\n      <Block variant=\"card\" title=\"异步加载选项\">\n        <DynamicCascader />\n      </Block>\n      <Block variant=\"card\" title=\"自定义字段名\">\n        <CustomFieldCascader />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "cell",
    "description": "单元格为列表中的单个展示项。",
    "usage": [
      "import { Cell } from \"@taroify/core\"\nimport { ArrowDown, ArrowRight, LocationOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function CellDemo() {\n  return (\n    <Page title=\"Cell 单元格\" className=\"cell-demo\">\n      <Block title=\"基础用法\">\n        <Cell title=\"单元格\">内容</Cell>\n        <Cell title=\"单元格\" brief=\"描述信息\" children=\"内容\" />\n      </Block>\n      <Block title=\"单元格大小\">\n        <Cell title=\"单元格\">内容</Cell>\n        <Cell title=\"单元格\" brief=\"描述信息\" size=\"large\" children=\"内容\" />\n      </Block>\n      <Block title=\"展示图标\">\n        <Cell icon={<LocationOutlined />} title=\"单元格\" children=\"内容\" />\n      </Block>\n      <Block title=\"只设置 value\">\n        <Cell>内容</Cell>\n      </Block>\n      <Block title=\"展示箭头\">\n        <Cell title=\"单元格\" isLink  />\n        <Cell title=\"单元格\" isLink children=\"内容\" />\n        <Cell title=\"单元格\" isLink arrowDirection=\"down\" children=\"内容\" />\n      </Block>\n      <Block title=\"分组标题\">\n        <Cell.Group title=\"分组 1\">\n          <Cell title=\"单元格\">内容</Cell>\n        </Cell.Group>\n        <Cell.Group title=\"分组 2\">\n          <Cell title=\"单元格\">内容</Cell>\n        </Cell.Group>\n      </Block>\n      <Block title=\"对齐方式\">\n        <Cell title=\"单元格\" brief=\"align start\" size=\"large\" align=\"start\" children=\"内容\" />\n        <Cell title=\"单元格\" brief=\"align center\" size=\"large\" align=\"center\" children=\"内容\" />\n        <Cell title=\"单元格\" brief=\"align end\" size=\"large\" align=\"end\" children=\"内容\" />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "cell",
        "code": "import { Cell } from \"@taroify/core\"\nimport { ArrowDown, ArrowRight, LocationOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function CellDemo() {\n  return (\n    <Page title=\"Cell 单元格\" className=\"cell-demo\">\n      <Block title=\"基础用法\">\n        <Cell title=\"单元格\">内容</Cell>\n        <Cell title=\"单元格\" brief=\"描述信息\" children=\"内容\" />\n      </Block>\n      <Block title=\"单元格大小\">\n        <Cell title=\"单元格\">内容</Cell>\n        <Cell title=\"单元格\" brief=\"描述信息\" size=\"large\" children=\"内容\" />\n      </Block>\n      <Block title=\"展示图标\">\n        <Cell icon={<LocationOutlined />} title=\"单元格\" children=\"内容\" />\n      </Block>\n      <Block title=\"只设置 value\">\n        <Cell>内容</Cell>\n      </Block>\n      <Block title=\"展示箭头\">\n        <Cell title=\"单元格\" isLink  />\n        <Cell title=\"单元格\" isLink children=\"内容\" />\n        <Cell title=\"单元格\" isLink arrowDirection=\"down\" children=\"内容\" />\n      </Block>\n      <Block title=\"分组标题\">\n        <Cell.Group title=\"分组 1\">\n          <Cell title=\"单元格\">内容</Cell>\n        </Cell.Group>\n        <Cell.Group title=\"分组 2\">\n          <Cell title=\"单元格\">内容</Cell>\n        </Cell.Group>\n      </Block>\n      <Block title=\"对齐方式\">\n        <Cell title=\"单元格\" brief=\"align start\" size=\"large\" align=\"start\" children=\"内容\" />\n        <Cell title=\"单元格\" brief=\"align center\" size=\"large\" align=\"center\" children=\"内容\" />\n        <Cell title=\"单元格\" brief=\"align end\" size=\"large\" align=\"end\" children=\"内容\" />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "checkbox",
    "description": "在一组备选项中进行多选。",
    "usage": [
      "import { Cell, Checkbox, Image, Space } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction CheckboxWithCustomIcon() {\n  const [value, setValue] = useState(false)\n\n  return (\n    <Checkbox\n      icon={\n        <Image\n          src={`https://img.yzcdn.cn/vant/user-${value ? \"active\" : \"inactive\"}.png`}\n          style={{\n            width: \"25px\",\n            height: \"20px\",\n          }}\n        />\n      }\n      checked={value}\n      onChange={setValue}\n    >\n      自定义图标\n    </Checkbox>\n  )\n}\n\nexport default function CheckboxDemo() {\n  return (\n    <Page title=\"Checkbox 复选框\" className=\"checkbox-demo\">\n      <Block title=\"基础用法\">\n        <Checkbox defaultChecked>复选框</Checkbox>\n      </Block>\n      <Block title=\"禁用状态\">\n        <Space direction=\"vertical\">\n          <Checkbox disabled checked={false}>\n            复选框\n          </Checkbox>\n          <Checkbox disabled checked>\n            复选框\n          </Checkbox>\n        </Space>\n      </Block>\n      <Block title=\"自定义形状\">\n        <Checkbox shape=\"square\">自定义形状</Checkbox>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Checkbox className=\"custom-color\">自定义颜色</Checkbox>\n      </Block>\n      <Block title=\"自定义大小\">\n        <Checkbox size={24}>自定义大小</Checkbox>\n      </Block>\n      <Block title=\"自定义图标\">\n        <CheckboxWithCustomIcon />\n      </Block>\n      <Block title=\"复选框组\">\n        <Checkbox.Group>\n          <Checkbox name=\"a\">复选框 a</Checkbox>\n          <Checkbox name=\"b\">复选框 b</Checkbox>\n        </Checkbox.Group>\n      </Block>\n      <Block title=\"水平排列\">\n        <Checkbox.Group direction=\"horizontal\">\n          <Checkbox name=\"a\">复选框 a</Checkbox>\n          <Checkbox name=\"b\">复选框 b</Checkbox>\n        </Checkbox.Group>\n      </Block>\n      <Block title=\"限制最大可选数\">\n        <Checkbox.Group max={4}>\n          <Checkbox name=\"a\">复选框 a</Checkbox>\n          <Checkbox name=\"b\">复选框 b</Checkbox>\n          <Checkbox name=\"c\">复选框 c</Checkbox>\n          <Checkbox name=\"d\">复选框 d</Checkbox>\n          <Checkbox name=\"e\">复选框 e</Checkbox>\n          <Checkbox name=\"f\">复选框 f</Checkbox>\n          <Checkbox name=\"g\">复选框 g</Checkbox>\n        </Checkbox.Group>\n      </Block>\n      <Block title=\"搭配单元格组件使用\" className=\"checkbox-cell-group\">\n        <Checkbox.Group max={2}>\n          <Cell.Group clickable>\n            <Cell title=\"复选框 a\">\n              <Checkbox name=\"a\" />\n            </Cell>\n            <Cell title=\"复选框 b\">\n              <Checkbox name=\"b\" />\n            </Cell>\n          </Cell.Group>\n        </Checkbox.Group>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "checkbox",
        "code": "import { Cell, Checkbox, Image, Space } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction CheckboxWithCustomIcon() {\n  const [value, setValue] = useState(false)\n\n  return (\n    <Checkbox\n      icon={\n        <Image\n          src={`https://img.yzcdn.cn/vant/user-${value ? \"active\" : \"inactive\"}.png`}\n          style={{\n            width: \"25px\",\n            height: \"20px\",\n          }}\n        />\n      }\n      checked={value}\n      onChange={setValue}\n    >\n      自定义图标\n    </Checkbox>\n  )\n}\n\nexport default function CheckboxDemo() {\n  return (\n    <Page title=\"Checkbox 复选框\" className=\"checkbox-demo\">\n      <Block title=\"基础用法\">\n        <Checkbox defaultChecked>复选框</Checkbox>\n      </Block>\n      <Block title=\"禁用状态\">\n        <Space direction=\"vertical\">\n          <Checkbox disabled checked={false}>\n            复选框\n          </Checkbox>\n          <Checkbox disabled checked>\n            复选框\n          </Checkbox>\n        </Space>\n      </Block>\n      <Block title=\"自定义形状\">\n        <Checkbox shape=\"square\">自定义形状</Checkbox>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Checkbox className=\"custom-color\">自定义颜色</Checkbox>\n      </Block>\n      <Block title=\"自定义大小\">\n        <Checkbox size={24}>自定义大小</Checkbox>\n      </Block>\n      <Block title=\"自定义图标\">\n        <CheckboxWithCustomIcon />\n      </Block>\n      <Block title=\"复选框组\">\n        <Checkbox.Group>\n          <Checkbox name=\"a\">复选框 a</Checkbox>\n          <Checkbox name=\"b\">复选框 b</Checkbox>\n        </Checkbox.Group>\n      </Block>\n      <Block title=\"水平排列\">\n        <Checkbox.Group direction=\"horizontal\">\n          <Checkbox name=\"a\">复选框 a</Checkbox>\n          <Checkbox name=\"b\">复选框 b</Checkbox>\n        </Checkbox.Group>\n      </Block>\n      <Block title=\"限制最大可选数\">\n        <Checkbox.Group max={4}>\n          <Checkbox name=\"a\">复选框 a</Checkbox>\n          <Checkbox name=\"b\">复选框 b</Checkbox>\n          <Checkbox name=\"c\">复选框 c</Checkbox>\n          <Checkbox name=\"d\">复选框 d</Checkbox>\n          <Checkbox name=\"e\">复选框 e</Checkbox>\n          <Checkbox name=\"f\">复选框 f</Checkbox>\n          <Checkbox name=\"g\">复选框 g</Checkbox>\n        </Checkbox.Group>\n      </Block>\n      <Block title=\"搭配单元格组件使用\" className=\"checkbox-cell-group\">\n        <Checkbox.Group max={2}>\n          <Cell.Group clickable>\n            <Cell title=\"复选框 a\">\n              <Checkbox name=\"a\" />\n            </Cell>\n            <Cell title=\"复选框 b\">\n              <Checkbox name=\"b\" />\n            </Cell>\n          </Cell.Group>\n        </Checkbox.Group>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "circle",
    "description": "圆环形的进度条组件，支持进度渐变动画。",
    "usage": [
      "import { Button, Circle, Space } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface PercentProps {\n  percent?: number\n}\n\nfunction BasicCircle({ percent }: PercentProps) {\n  const [currentPercent, setCurrentPercent] = useState(0)\n\n  return (\n    <Circle percent={percent} onChange={setCurrentPercent}>\n      {currentPercent.toFixed(0)}%\n    </Circle>\n  )\n}\n\nfunction CustomCircle({ percent }: PercentProps) {\n  return (\n    <Space>\n      <Circle percent={percent} strokeWidth={60}>\n        宽度定制\n      </Circle>\n      <Circle percent={percent} color=\"#ee0a24\" layerColor=\"#ebedf0\">\n        颜色定制\n      </Circle>\n      <Circle\n        percent={percent}\n        color={{\n          \"0%\": \"#3fecff\",\n          \"100%\": \"#6149f6\",\n        }}\n      >\n        渐变色\n      </Circle>\n      <Circle percent={percent} clockwise={false} color=\"#07c160\">\n        逆时针方向\n      </Circle>\n      <Circle percent={percent} size={120} color=\"#7232dd\">\n        大小定制\n      </Circle>\n    </Space>\n  )\n}\n\nexport default function CircleDemo() {\n  const [percent, setPercent] = useState(70)\n\n  return (\n    <Page title=\"Circle 环形进度条\" className=\"circle-demo\">\n      <Block title=\"基础用法\">\n        <BasicCircle percent={percent} />\n      </Block>\n      <Block title=\"样式定制\">\n        <CustomCircle percent={percent} />\n      </Block>\n      <Block>\n        <Space>\n          <Button\n            color=\"primary\"\n            size=\"small\"\n            onClick={() => setPercent((prevPercent) => Math.min(prevPercent + 20, 100))}\n          >\n            增加\n          </Button>\n          <Button\n            color=\"danger\"\n            size=\"small\"\n            onClick={() => setPercent((prevPercent) => Math.max(prevPercent - 20, 0))}\n          >\n            减少\n          </Button>\n        </Space>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "circle",
        "code": "import { Button, Circle, Space } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface PercentProps {\n  percent?: number\n}\n\nfunction BasicCircle({ percent }: PercentProps) {\n  const [currentPercent, setCurrentPercent] = useState(0)\n\n  return (\n    <Circle percent={percent} onChange={setCurrentPercent}>\n      {currentPercent.toFixed(0)}%\n    </Circle>\n  )\n}\n\nfunction CustomCircle({ percent }: PercentProps) {\n  return (\n    <Space>\n      <Circle percent={percent} strokeWidth={60}>\n        宽度定制\n      </Circle>\n      <Circle percent={percent} color=\"#ee0a24\" layerColor=\"#ebedf0\">\n        颜色定制\n      </Circle>\n      <Circle\n        percent={percent}\n        color={{\n          \"0%\": \"#3fecff\",\n          \"100%\": \"#6149f6\",\n        }}\n      >\n        渐变色\n      </Circle>\n      <Circle percent={percent} clockwise={false} color=\"#07c160\">\n        逆时针方向\n      </Circle>\n      <Circle percent={percent} size={120} color=\"#7232dd\">\n        大小定制\n      </Circle>\n    </Space>\n  )\n}\n\nexport default function CircleDemo() {\n  const [percent, setPercent] = useState(70)\n\n  return (\n    <Page title=\"Circle 环形进度条\" className=\"circle-demo\">\n      <Block title=\"基础用法\">\n        <BasicCircle percent={percent} />\n      </Block>\n      <Block title=\"样式定制\">\n        <CustomCircle percent={percent} />\n      </Block>\n      <Block>\n        <Space>\n          <Button\n            color=\"primary\"\n            size=\"small\"\n            onClick={() => setPercent((prevPercent) => Math.min(prevPercent + 20, 100))}\n          >\n            增加\n          </Button>\n          <Button\n            color=\"danger\"\n            size=\"small\"\n            onClick={() => setPercent((prevPercent) => Math.max(prevPercent - 20, 0))}\n          >\n            减少\n          </Button>\n        </Space>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "collapse",
    "description": "将一组内容放置在多个折叠面板中，点击面板的标题可以展开或收缩其内容。",
    "usage": [
      "import { Collapse } from \"@taroify/core\"\nimport { QuestionOutlined, ShopOutlined } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicCollapse() {\n  const [value, setValue] = useState([0])\n  return (\n    <Collapse value={value} onChange={setValue}>\n      <Collapse.Item title=\"标题1\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"标题2\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"标题3\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n    </Collapse>\n  )\n}\n\nfunction AccordionCollapse() {\n  return (\n    <Collapse accordion defaultValue={0}>\n      <Collapse.Item title=\"标题1\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"标题2\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"标题3\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n    </Collapse>\n  )\n}\n\nfunction CollapseWithDisabledWithReadonly() {\n  return (\n    <Collapse defaultValue={[0]}>\n      <Collapse.Item title=\"正常状态\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"只读状态\" clickable={false}>\n        代码是写出来给人看的，附带能在机器上运行\n      </Collapse.Item>\n      <Collapse.Item title=\"禁用状态\" disabled>\n        代码是写出来给人看的，附带能在机器上运行\n      </Collapse.Item>\n    </Collapse>\n  )\n}\n\nfunction CustomCollapse() {\n  return (\n    <Collapse defaultValue={[0]}>\n      <Collapse.Item\n        className=\"custom-collapse-item1\"\n        title={\n          <>\n            标题1\n            <QuestionOutlined />\n          </>\n        }\n      >\n        代码是写出来给人看的，附带能在机器上运行\n      </Collapse.Item>\n      <Collapse.Item icon={<ShopOutlined />} title=\"标题2\" extra=\"内容\" clickable={false}>\n        代码是写出来给人看的，附带能在机器上运行\n      </Collapse.Item>\n    </Collapse>\n  )\n}\n\nexport default function CollapseDemo() {\n  return (\n    <Page title=\"Collapse 折叠面板\" className=\"collapse-demo\">\n      <Block title=\"基础用法\">\n        <BasicCollapse />\n      </Block>\n      <Block title=\"手风琴\">\n        <AccordionCollapse />\n      </Block>\n      <Block title=\"只读状态和禁用状态\">\n        <CollapseWithDisabledWithReadonly />\n      </Block>\n      <Block title=\"自定义标题内容\">\n        <CustomCollapse />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "collapse",
        "code": "import { Collapse } from \"@taroify/core\"\nimport { QuestionOutlined, ShopOutlined } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicCollapse() {\n  const [value, setValue] = useState([0])\n  return (\n    <Collapse value={value} onChange={setValue}>\n      <Collapse.Item title=\"标题1\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"标题2\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"标题3\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n    </Collapse>\n  )\n}\n\nfunction AccordionCollapse() {\n  return (\n    <Collapse accordion defaultValue={0}>\n      <Collapse.Item title=\"标题1\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"标题2\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"标题3\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n    </Collapse>\n  )\n}\n\nfunction CollapseWithDisabledWithReadonly() {\n  return (\n    <Collapse defaultValue={[0]}>\n      <Collapse.Item title=\"正常状态\">代码是写出来给人看的，附带能在机器上运行</Collapse.Item>\n      <Collapse.Item title=\"只读状态\" clickable={false}>\n        代码是写出来给人看的，附带能在机器上运行\n      </Collapse.Item>\n      <Collapse.Item title=\"禁用状态\" disabled>\n        代码是写出来给人看的，附带能在机器上运行\n      </Collapse.Item>\n    </Collapse>\n  )\n}\n\nfunction CustomCollapse() {\n  return (\n    <Collapse defaultValue={[0]}>\n      <Collapse.Item\n        className=\"custom-collapse-item1\"\n        title={\n          <>\n            标题1\n            <QuestionOutlined />\n          </>\n        }\n      >\n        代码是写出来给人看的，附带能在机器上运行\n      </Collapse.Item>\n      <Collapse.Item icon={<ShopOutlined />} title=\"标题2\" extra=\"内容\" clickable={false}>\n        代码是写出来给人看的，附带能在机器上运行\n      </Collapse.Item>\n    </Collapse>\n  )\n}\n\nexport default function CollapseDemo() {\n  return (\n    <Page title=\"Collapse 折叠面板\" className=\"collapse-demo\">\n      <Block title=\"基础用法\">\n        <BasicCollapse />\n      </Block>\n      <Block title=\"手风琴\">\n        <AccordionCollapse />\n      </Block>\n      <Block title=\"只读状态和禁用状态\">\n        <CollapseWithDisabledWithReadonly />\n      </Block>\n      <Block title=\"自定义标题内容\">\n        <CustomCollapse />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "config-provider",
    "description": "用于配置 Taroify 组件的主题样式。",
    "usage": [
      "import { Button, ConfigProvider, Field, Rate, Slider, ConfigProviderThemeVars } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nconst themeVars: ConfigProviderThemeVars ={\n  rateIconFullColor: \"#07c160\",\n  sliderTrackHeight: \"4px\",\n  sliderActiveBackgroundColor: \"#07c160\",\n  buttonPrimaryBorderColor: \"#07c160\",\n  buttonPrimaryBackgroundColor: \"#07c160\",\n}\n\nexport default function ConfigProviderDemo() {\n  const [rate, setRate] = useState(4)\n  const [slider, setSlider] = useState(50)\n\n  return (\n    <Page className=\"config-provider-demo\" title=\"ConfigProvider 全局配置\">\n      <Block title=\"默认主题\">\n        <Field label=\"评分\">\n          <Rate allowHalf value={rate} onChange={setRate} />\n        </Field>\n        <Field label=\"滑块\">\n          <Slider value={slider} onChange={setSlider} />\n        </Field>\n        <View style={{ margin: \"16px\" }}>\n          <Button shape=\"round\" block color=\"primary\">\n            提交\n          </Button>\n        </View>\n      </Block>\n      <Block title=\"定制主题\">\n        <ConfigProvider\n          theme={themeVars}\n        >\n          <Field label=\"评分\">\n            <Rate allowHalf value={rate} onChange={setRate} />\n          </Field>\n          <Field label=\"滑块\">\n            <Slider value={slider} onChange={setSlider} />\n          </Field>\n          <View style={{ margin: \"16px\" }}>\n            <Button shape=\"round\" block color=\"primary\">\n              提交\n            </Button>\n          </View>\n        </ConfigProvider>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "config-provider",
        "code": "import { Button, ConfigProvider, Field, Rate, Slider, ConfigProviderThemeVars } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nconst themeVars: ConfigProviderThemeVars ={\n  rateIconFullColor: \"#07c160\",\n  sliderTrackHeight: \"4px\",\n  sliderActiveBackgroundColor: \"#07c160\",\n  buttonPrimaryBorderColor: \"#07c160\",\n  buttonPrimaryBackgroundColor: \"#07c160\",\n}\n\nexport default function ConfigProviderDemo() {\n  const [rate, setRate] = useState(4)\n  const [slider, setSlider] = useState(50)\n\n  return (\n    <Page className=\"config-provider-demo\" title=\"ConfigProvider 全局配置\">\n      <Block title=\"默认主题\">\n        <Field label=\"评分\">\n          <Rate allowHalf value={rate} onChange={setRate} />\n        </Field>\n        <Field label=\"滑块\">\n          <Slider value={slider} onChange={setSlider} />\n        </Field>\n        <View style={{ margin: \"16px\" }}>\n          <Button shape=\"round\" block color=\"primary\">\n            提交\n          </Button>\n        </View>\n      </Block>\n      <Block title=\"定制主题\">\n        <ConfigProvider\n          theme={themeVars}\n        >\n          <Field label=\"评分\">\n            <Rate allowHalf value={rate} onChange={setRate} />\n          </Field>\n          <Field label=\"滑块\">\n            <Slider value={slider} onChange={setSlider} />\n          </Field>\n          <View style={{ margin: \"16px\" }}>\n            <Button shape=\"round\" block color=\"primary\">\n              提交\n            </Button>\n          </View>\n        </ConfigProvider>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "countdown",
    "description": "用于实时展示倒计时数值，支持毫秒精度。",
    "usage": [
      "import { Countdown, Grid, Toast } from \"@taroify/core\"\nimport { CountdownInstance } from \"@taroify/core/countdown\"\nimport { PauseCircleOutlined, PlayCircleOutlined, Replay } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport { useRef } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction CountdownWithManualControl() {\n  const countRef = useRef<CountdownInstance>(null)\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Countdown\n        className=\"manual-control\"\n        ref={countRef}\n        value={30 * 1000}\n        interval={1}\n        format=\"ss:SSS\"\n        onComplete={() => Toast.open(\"倒计时结束\")}\n      />\n      <Grid columns={3} clickable>\n        <Grid.Item\n          icon={<PlayCircleOutlined />}\n          text=\"开始\"\n          onClick={() => countRef.current?.start()}\n        />\n        <Grid.Item\n          icon={<PauseCircleOutlined />}\n          text=\"暂停\"\n          onClick={() => countRef.current?.pause()}\n        />\n        <Grid.Item icon={<Replay />} text=\"重置\" onClick={() => countRef.current?.reset()} />\n      </Grid>\n    </>\n  )\n}\n\nexport default function CountDownDemo() {\n  return (\n    <Page title=\"CountDown 倒计时\" className=\"count-down-demo\">\n      <Block title=\"基础用法\">\n        <Countdown value={30 * 60 * 60 * 1000} />\n      </Block>\n      <Block title=\"自定义格式\">\n        <Countdown value={30 * 60 * 60 * 1000} format=\"DD 天 HH 时 mm 分 ss 秒\" />\n      </Block>\n      <Block title=\"毫秒级渲染\">\n        <Countdown interval={1} value={30 * 60 * 60 * 1000} format=\"HH:mm:ss:SS\" />\n      </Block>\n      <Block title=\"自定义样式\">\n        <Countdown value={30 * 60 * 60 * 1000}>\n          {(current) => (\n            <>\n              <View className=\"block\">{current.hours}</View>\n              <View className=\"colon\">:</View>\n              <View className=\"block\">{current.minutes}</View>\n              <View className=\"colon\">:</View>\n              <View className=\"block\">{current.seconds}</View>\n            </>\n          )}\n        </Countdown>\n      </Block>\n      <Block className=\"manual-control-block\" title=\"手动控制\">\n        <CountdownWithManualControl />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "countdown",
        "code": "import { Countdown, Grid, Toast } from \"@taroify/core\"\nimport { CountdownInstance } from \"@taroify/core/countdown\"\nimport { PauseCircleOutlined, PlayCircleOutlined, Replay } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport { useRef } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction CountdownWithManualControl() {\n  const countRef = useRef<CountdownInstance>(null)\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Countdown\n        className=\"manual-control\"\n        ref={countRef}\n        value={30 * 1000}\n        interval={1}\n        format=\"ss:SSS\"\n        onComplete={() => Toast.open(\"倒计时结束\")}\n      />\n      <Grid columns={3} clickable>\n        <Grid.Item\n          icon={<PlayCircleOutlined />}\n          text=\"开始\"\n          onClick={() => countRef.current?.start()}\n        />\n        <Grid.Item\n          icon={<PauseCircleOutlined />}\n          text=\"暂停\"\n          onClick={() => countRef.current?.pause()}\n        />\n        <Grid.Item icon={<Replay />} text=\"重置\" onClick={() => countRef.current?.reset()} />\n      </Grid>\n    </>\n  )\n}\n\nexport default function CountDownDemo() {\n  return (\n    <Page title=\"CountDown 倒计时\" className=\"count-down-demo\">\n      <Block title=\"基础用法\">\n        <Countdown value={30 * 60 * 60 * 1000} />\n      </Block>\n      <Block title=\"自定义格式\">\n        <Countdown value={30 * 60 * 60 * 1000} format=\"DD 天 HH 时 mm 分 ss 秒\" />\n      </Block>\n      <Block title=\"毫秒级渲染\">\n        <Countdown interval={1} value={30 * 60 * 60 * 1000} format=\"HH:mm:ss:SS\" />\n      </Block>\n      <Block title=\"自定义样式\">\n        <Countdown value={30 * 60 * 60 * 1000}>\n          {(current) => (\n            <>\n              <View className=\"block\">{current.hours}</View>\n              <View className=\"colon\">:</View>\n              <View className=\"block\">{current.minutes}</View>\n              <View className=\"colon\">:</View>\n              <View className=\"block\">{current.seconds}</View>\n            </>\n          )}\n        </Countdown>\n      </Block>\n      <Block className=\"manual-control-block\" title=\"手动控制\">\n        <CountdownWithManualControl />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "datetime-picker",
    "description": "时间选择器，支持日期、年月、时分秒等维度，通常与[弹出层](/components/popup)组件配合使用。",
    "usage": [
      "import { DatetimePicker } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction DatePicker() {\n  const [minDate] = useState(new Date(2019, 0, 1))\n  const [maxDate] = useState(new Date(2023, 11, 12))\n  const [defaultValue] = useState(new Date(2021, 12, 14))\n  const [value, setValue] = useState(new Date(2022, 10, 14))\n  return (\n    <DatetimePicker\n      type=\"date\"\n      min={minDate}\n      max={maxDate}\n      defaultValue={defaultValue}\n      value={value}\n      onChange={setValue}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择年月日</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction YearMonthPicker() {\n  const [minDate] = useState(new Date(2020, 0, 1))\n  const [maxDate] = useState(new Date(2025, 10, 1))\n  const [defaultValue] = useState(new Date(2021, 0, 17))\n\n  return (\n    <DatetimePicker\n      type=\"year-month\"\n      min={minDate}\n      max={maxDate}\n      defaultValue={defaultValue}\n      formatter={(type, val) => {\n        if (type === \"year\") {\n          return `${val}年`\n        }\n        if (type === \"month\") {\n          return `${val}月`\n        }\n        return val\n      }}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择年月</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction MonthDayPicker() {\n  const [minDate] = useState(new Date(2020, 0, 1))\n  const [maxDate] = useState(new Date(2025, 10, 1))\n  const [defaultValue] = useState(new Date(2021, 0, 17))\n\n  return (\n    <DatetimePicker\n      type=\"month-day\"\n      min={minDate}\n      max={maxDate}\n      defaultValue={defaultValue}\n      formatter={(type, val) => {\n        if (type === \"month\") {\n          return `${val}月`\n        }\n        if (type === \"day\") {\n          return `${val}日`\n        }\n        return val\n      }}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择年月</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction TimePicker() {\n  const [minDate] = useState(new Date(2020, 0, 1, 10, 0, 0))\n  const [maxDate] = useState(new Date(2020, 0, 1, 20, 59, 59))\n  const [defaultValue] = useState(new Date(2020, 0, 1, 12, 0, 0))\n\n  return (\n    <DatetimePicker type=\"time\" min={minDate} max={maxDate} defaultValue={defaultValue}>\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择时间</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction DateTimePicker() {\n  const [minDate] = useState(new Date(2020, 0, 1, 10, 0, 0))\n  const [maxDate] = useState(new Date(2025, 10, 1, 20, 59, 59))\n  const [defaultValue] = useState(new Date(2021, 2, 3, 12, 12, 12))\n\n  return (\n    <DatetimePicker type=\"datetime\" min={minDate} max={maxDate} defaultValue={defaultValue}>\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择完整时间</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction DateHourPicker() {\n  const [minDate] = useState(new Date(2020, 0, 1, 0))\n  const [maxDate] = useState(new Date(2025, 10, 1, 23))\n  const [defaultValue] = useState(new Date())\n\n  return (\n    <DatetimePicker type=\"date-hour\" min={minDate} max={maxDate} defaultValue={defaultValue}>\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择年月日小时</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction TimePickerWithFilter() {\n  const [minDate] = useState(new Date(2020, 0, 1, 0, 0, 0))\n  const [maxDate] = useState(new Date(2020, 0, 1, 23, 59, 59))\n  const [defaultValue] = useState(new Date(2020, 0, 1, 12, 0, 0))\n\n  return (\n    <DatetimePicker\n      type=\"time\"\n      min={minDate}\n      max={maxDate}\n      defaultValue={defaultValue}\n      filter={(type, options) => {\n        if (type === \"minute\") {\n          return options.filter((option) => Number(option) % 5 === 0)\n        }\n        return options\n      }}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选项过滤器</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction DatePickerWithFields() {\n  const [minDate] = useState(new Date(2020, 0, 1))\n  const [maxDate] = useState(new Date(2025, 10, 1))\n  const [defaultValue] = useState(new Date(2021, 0, 17))\n  return (\n    <DatetimePicker\n      type=\"date\"\n      fields={[\"month\", \"day\", \"year\"]}\n      defaultValue={defaultValue}\n      min={minDate}\n      max={maxDate}\n      formatter={(type, val) => {\n        if (type === \"year\") {\n          return val + \"年\"\n        }\n        if (type === \"month\") {\n          return val + \"月\"\n        }\n        if (type === \"day\") {\n          return val + \"日\"\n        }\n        return val\n      }}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>自定义列排序</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nexport default function PickerDemo() {\n  return (\n    <Page title=\"DatetimePicker 时间选择\" className=\"datetime-picker-demo\">\n      <Block variant=\"card\" title=\"选择年月日\">\n        <CustomWrapper>\n          <DatePicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择年月\">\n        <CustomWrapper>\n          <YearMonthPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择月日\">\n        <CustomWrapper>\n          <MonthDayPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择时间\">\n        <CustomWrapper>\n          <TimePicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择完整时间\">\n        <CustomWrapper>\n          <DateTimePicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选项过滤器\">\n        <CustomWrapper>\n          <TimePickerWithFilter />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择年月日小时\">\n        <CustomWrapper>\n          <DateHourPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"自定义列排序\">\n        <CustomWrapper>\n          <DatePickerWithFields />\n        </CustomWrapper>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "datetime-picker",
        "code": "import { DatetimePicker } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction DatePicker() {\n  const [minDate] = useState(new Date(2019, 0, 1))\n  const [maxDate] = useState(new Date(2023, 11, 12))\n  const [defaultValue] = useState(new Date(2021, 12, 14))\n  const [value, setValue] = useState(new Date(2022, 10, 14))\n  return (\n    <DatetimePicker\n      type=\"date\"\n      min={minDate}\n      max={maxDate}\n      defaultValue={defaultValue}\n      value={value}\n      onChange={setValue}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择年月日</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction YearMonthPicker() {\n  const [minDate] = useState(new Date(2020, 0, 1))\n  const [maxDate] = useState(new Date(2025, 10, 1))\n  const [defaultValue] = useState(new Date(2021, 0, 17))\n\n  return (\n    <DatetimePicker\n      type=\"year-month\"\n      min={minDate}\n      max={maxDate}\n      defaultValue={defaultValue}\n      formatter={(type, val) => {\n        if (type === \"year\") {\n          return `${val}年`\n        }\n        if (type === \"month\") {\n          return `${val}月`\n        }\n        return val\n      }}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择年月</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction MonthDayPicker() {\n  const [minDate] = useState(new Date(2020, 0, 1))\n  const [maxDate] = useState(new Date(2025, 10, 1))\n  const [defaultValue] = useState(new Date(2021, 0, 17))\n\n  return (\n    <DatetimePicker\n      type=\"month-day\"\n      min={minDate}\n      max={maxDate}\n      defaultValue={defaultValue}\n      formatter={(type, val) => {\n        if (type === \"month\") {\n          return `${val}月`\n        }\n        if (type === \"day\") {\n          return `${val}日`\n        }\n        return val\n      }}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择年月</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction TimePicker() {\n  const [minDate] = useState(new Date(2020, 0, 1, 10, 0, 0))\n  const [maxDate] = useState(new Date(2020, 0, 1, 20, 59, 59))\n  const [defaultValue] = useState(new Date(2020, 0, 1, 12, 0, 0))\n\n  return (\n    <DatetimePicker type=\"time\" min={minDate} max={maxDate} defaultValue={defaultValue}>\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择时间</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction DateTimePicker() {\n  const [minDate] = useState(new Date(2020, 0, 1, 10, 0, 0))\n  const [maxDate] = useState(new Date(2025, 10, 1, 20, 59, 59))\n  const [defaultValue] = useState(new Date(2021, 2, 3, 12, 12, 12))\n\n  return (\n    <DatetimePicker type=\"datetime\" min={minDate} max={maxDate} defaultValue={defaultValue}>\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择完整时间</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction DateHourPicker() {\n  const [minDate] = useState(new Date(2020, 0, 1, 0))\n  const [maxDate] = useState(new Date(2025, 10, 1, 23))\n  const [defaultValue] = useState(new Date())\n\n  return (\n    <DatetimePicker type=\"date-hour\" min={minDate} max={maxDate} defaultValue={defaultValue}>\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选择年月日小时</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction TimePickerWithFilter() {\n  const [minDate] = useState(new Date(2020, 0, 1, 0, 0, 0))\n  const [maxDate] = useState(new Date(2020, 0, 1, 23, 59, 59))\n  const [defaultValue] = useState(new Date(2020, 0, 1, 12, 0, 0))\n\n  return (\n    <DatetimePicker\n      type=\"time\"\n      min={minDate}\n      max={maxDate}\n      defaultValue={defaultValue}\n      filter={(type, options) => {\n        if (type === \"minute\") {\n          return options.filter((option) => Number(option) % 5 === 0)\n        }\n        return options\n      }}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>选项过滤器</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nfunction DatePickerWithFields() {\n  const [minDate] = useState(new Date(2020, 0, 1))\n  const [maxDate] = useState(new Date(2025, 10, 1))\n  const [defaultValue] = useState(new Date(2021, 0, 17))\n  return (\n    <DatetimePicker\n      type=\"date\"\n      fields={[\"month\", \"day\", \"year\"]}\n      defaultValue={defaultValue}\n      min={minDate}\n      max={maxDate}\n      formatter={(type, val) => {\n        if (type === \"year\") {\n          return val + \"年\"\n        }\n        if (type === \"month\") {\n          return val + \"月\"\n        }\n        if (type === \"day\") {\n          return val + \"日\"\n        }\n        return val\n      }}\n    >\n      <DatetimePicker.Toolbar>\n        <DatetimePicker.Button>取消</DatetimePicker.Button>\n        <DatetimePicker.Title>自定义列排序</DatetimePicker.Title>\n        <DatetimePicker.Button>确认</DatetimePicker.Button>\n      </DatetimePicker.Toolbar>\n    </DatetimePicker>\n  )\n}\n\nexport default function PickerDemo() {\n  return (\n    <Page title=\"DatetimePicker 时间选择\" className=\"datetime-picker-demo\">\n      <Block variant=\"card\" title=\"选择年月日\">\n        <CustomWrapper>\n          <DatePicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择年月\">\n        <CustomWrapper>\n          <YearMonthPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择月日\">\n        <CustomWrapper>\n          <MonthDayPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择时间\">\n        <CustomWrapper>\n          <TimePicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择完整时间\">\n        <CustomWrapper>\n          <DateTimePicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选项过滤器\">\n        <CustomWrapper>\n          <TimePickerWithFilter />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"选择年月日小时\">\n        <CustomWrapper>\n          <DateHourPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"自定义列排序\">\n        <CustomWrapper>\n          <DatePickerWithFields />\n        </CustomWrapper>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "dialog",
    "description": "弹出模态框，常用于消息提示、消息确认，或在当前页面内完成特定的交互操作，支持函数调用和组件调用两种方式。",
    "usage": [
      "import { Button, Cell, Dialog } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicDialog() {\n  return (\n    <>\n      <Dialog id=\"dialog\" />\n      <Cell\n        title=\"提示弹窗\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => Dialog.alert(\"提示\")}\n      />\n    </>\n  )\n}\n\nfunction NoTitleDialog() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        title=\"提示弹窗（无标题）\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Dialog open={open} onClose={setOpen}>\n        <Dialog.Content>代码是写出来给人看的，附带能在机器上运行</Dialog.Content>\n        <Dialog.Actions>\n          <Button onClick={() => setOpen(false)}>确认</Button>\n        </Dialog.Actions>\n      </Dialog>\n    </>\n  )\n}\n\nfunction ConfirmDialog() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        title=\"确认弹窗\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Dialog open={open} onClose={setOpen}>\n        <Dialog.Header>标题</Dialog.Header>\n        <Dialog.Content>代码是写出来给人看的，附带能在机器上运行</Dialog.Content>\n        <Dialog.Actions>\n          <Button onClick={() => setOpen(false)}>取消</Button>\n          <Button onClick={() => setOpen(false)}>确认</Button>\n        </Dialog.Actions>\n      </Dialog>\n    </>\n  )\n}\n\nfunction RoundedDialog() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        title=\"提示弹窗\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Dialog open={open} onClose={setOpen}>\n        <Dialog.Header>标题</Dialog.Header>\n        <Dialog.Content>代码是写出来给人看的，附带能在机器上运行</Dialog.Content>\n        <Dialog.Actions variant=\"rounded\">\n          <Button onClick={() => setOpen(false)}>取消</Button>\n          <Button onClick={() => setOpen(false)}>确认</Button>\n        </Dialog.Actions>\n      </Dialog>\n    </>\n  )\n}\n\nfunction RoundedNoTitleDialog() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        title=\"提示弹窗（无标题）\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Dialog open={open} onClose={setOpen}>\n        <Dialog.Content>代码是写出来给人看的，附带能在机器上运行</Dialog.Content>\n        <Dialog.Actions variant=\"rounded\">\n          <Button onClick={() => setOpen(false)}>确认</Button>\n        </Dialog.Actions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default function DialogDemo() {\n  return (\n    <Page title=\"Dialog 弹出框\" className=\"dialog-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicDialog />\n        <NoTitleDialog />\n        <ConfirmDialog />\n      </Block>\n      <Block variant=\"card\" title=\"圆角按钮样式\">\n        <RoundedDialog />\n        <RoundedNoTitleDialog />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "dialog",
        "code": "import { Button, Cell, Dialog } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicDialog() {\n  return (\n    <>\n      <Dialog id=\"dialog\" />\n      <Cell\n        title=\"提示弹窗\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => Dialog.alert(\"提示\")}\n      />\n    </>\n  )\n}\n\nfunction NoTitleDialog() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        title=\"提示弹窗（无标题）\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Dialog open={open} onClose={setOpen}>\n        <Dialog.Content>代码是写出来给人看的，附带能在机器上运行</Dialog.Content>\n        <Dialog.Actions>\n          <Button onClick={() => setOpen(false)}>确认</Button>\n        </Dialog.Actions>\n      </Dialog>\n    </>\n  )\n}\n\nfunction ConfirmDialog() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        title=\"确认弹窗\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Dialog open={open} onClose={setOpen}>\n        <Dialog.Header>标题</Dialog.Header>\n        <Dialog.Content>代码是写出来给人看的，附带能在机器上运行</Dialog.Content>\n        <Dialog.Actions>\n          <Button onClick={() => setOpen(false)}>取消</Button>\n          <Button onClick={() => setOpen(false)}>确认</Button>\n        </Dialog.Actions>\n      </Dialog>\n    </>\n  )\n}\n\nfunction RoundedDialog() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        title=\"提示弹窗\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Dialog open={open} onClose={setOpen}>\n        <Dialog.Header>标题</Dialog.Header>\n        <Dialog.Content>代码是写出来给人看的，附带能在机器上运行</Dialog.Content>\n        <Dialog.Actions variant=\"rounded\">\n          <Button onClick={() => setOpen(false)}>取消</Button>\n          <Button onClick={() => setOpen(false)}>确认</Button>\n        </Dialog.Actions>\n      </Dialog>\n    </>\n  )\n}\n\nfunction RoundedNoTitleDialog() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        title=\"提示弹窗（无标题）\"\n        clickable\n        bordered\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Dialog open={open} onClose={setOpen}>\n        <Dialog.Content>代码是写出来给人看的，附带能在机器上运行</Dialog.Content>\n        <Dialog.Actions variant=\"rounded\">\n          <Button onClick={() => setOpen(false)}>确认</Button>\n        </Dialog.Actions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default function DialogDemo() {\n  return (\n    <Page title=\"Dialog 弹出框\" className=\"dialog-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicDialog />\n        <NoTitleDialog />\n        <ConfirmDialog />\n      </Block>\n      <Block variant=\"card\" title=\"圆角按钮样式\">\n        <RoundedDialog />\n        <RoundedNoTitleDialog />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "divider",
    "description": "用于将内容分隔为多个区域。",
    "usage": [
      "import { Divider } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function DividerDemo() {\n  return (\n    <Page title=\"Divider 分割线\" className=\"divider-demo\">\n      <Block title=\"基础用法\">\n        <Divider />\n      </Block>\n      <Block title=\"展示文字\">\n        <Divider>文本</Divider>\n      </Block>\n      <Block title=\"内容位置\">\n        <Divider>\n          <Divider.Text orientation=\"left\">文字</Divider.Text>\n        </Divider>\n        <Divider>\n          <Divider.Text orientation=\"right\">文字</Divider.Text>\n        </Divider>\n      </Block>\n      <Block title=\"虚线\">\n        <Divider dashed>文本</Divider>\n      </Block>\n      <Block title=\"自定义样式\">\n        <Divider style={{ color: \"#1989fa\", borderColor: \"#1989fa\", padding: \"0 16px\" }}>\n          文本\n        </Divider>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "divider",
        "code": "import { Divider } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function DividerDemo() {\n  return (\n    <Page title=\"Divider 分割线\" className=\"divider-demo\">\n      <Block title=\"基础用法\">\n        <Divider />\n      </Block>\n      <Block title=\"展示文字\">\n        <Divider>文本</Divider>\n      </Block>\n      <Block title=\"内容位置\">\n        <Divider>\n          <Divider.Text orientation=\"left\">文字</Divider.Text>\n        </Divider>\n        <Divider>\n          <Divider.Text orientation=\"right\">文字</Divider.Text>\n        </Divider>\n      </Block>\n      <Block title=\"虚线\">\n        <Divider dashed>文本</Divider>\n      </Block>\n      <Block title=\"自定义样式\">\n        <Divider style={{ color: \"#1989fa\", borderColor: \"#1989fa\", padding: \"0 16px\" }}>\n          文本\n        </Divider>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "dropdown-menu",
    "description": "向下弹出的菜单列表。",
    "usage": [
      "import { Button, Cell, DropdownMenu, Switch } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { Key, useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nfunction BasicDropdownMenu() {\n  return (\n    <DropdownMenu>\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>默认排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>好评排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>销量排序</DropdownMenu.Option>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nfunction DropdownMenuWithCustomContent() {\n  const [value, setValue] = useState<Key | false>()\n  const [option1, setOption1] = useState()\n  const [switch1, setSwitch1] = useState(true)\n  const [switch2, setSwitch2] = useState(false)\n  return (\n    <DropdownMenu value={value} onChange={setValue}>\n      <DropdownMenu.Item value={option1} onChange={setOption1}>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item title=\"筛选\">\n        <Cell title=\"包邮\" align=\"center\">\n          <Switch size=\"24\" checked={switch1} onChange={setSwitch1} />\n        </Cell>\n        <Cell title=\"团购\" align=\"center\">\n          <Switch size=\"24\" checked={switch2} onChange={setSwitch2} />\n        </Cell>\n        <View style=\"padding: 5px 16px;\">\n          <Button color=\"primary\" block shape=\"round\" onClick={() => setValue(false)}>\n            确认\n          </Button>\n        </View>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nfunction DropdownMenuWithCustomColor() {\n  return (\n    <DropdownMenu className=\"custom-color\">\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>默认排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>好评排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>销量排序</DropdownMenu.Option>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nfunction UpDropdownMenu() {\n  return (\n    <DropdownMenu direction=\"up\">\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>默认排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>好评排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>销量排序</DropdownMenu.Option>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nfunction DisabledDropdownMenu() {\n  return (\n    <DropdownMenu>\n      <DropdownMenu.Item disabled>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item disabled>\n        <DropdownMenu.Option value={0}>默认排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>好评排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>销量排序</DropdownMenu.Option>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nexport default function DropdownMenuDemo() {\n  return (\n    <Page className=\"dropdown-menu-demo\" title=\"DropdownMenu 下拉菜单\">\n      <Block title=\"基础用法\">\n        <BasicDropdownMenu />\n      </Block>\n      <Block title=\"自定义菜单内容\">\n        <DropdownMenuWithCustomContent />\n      </Block>\n      <Block title=\"自定义选中态颜色\">\n        <DropdownMenuWithCustomColor />\n      </Block>\n      <Block title=\"向上展开\">\n        <UpDropdownMenu />\n      </Block>\n      <Block title=\"禁用菜单\">\n        <DisabledDropdownMenu />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "dropdown-menu",
        "code": "import { Button, Cell, DropdownMenu, Switch } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { Key, useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nfunction BasicDropdownMenu() {\n  return (\n    <DropdownMenu>\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>默认排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>好评排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>销量排序</DropdownMenu.Option>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nfunction DropdownMenuWithCustomContent() {\n  const [value, setValue] = useState<Key | false>()\n  const [option1, setOption1] = useState()\n  const [switch1, setSwitch1] = useState(true)\n  const [switch2, setSwitch2] = useState(false)\n  return (\n    <DropdownMenu value={value} onChange={setValue}>\n      <DropdownMenu.Item value={option1} onChange={setOption1}>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item title=\"筛选\">\n        <Cell title=\"包邮\" align=\"center\">\n          <Switch size=\"24\" checked={switch1} onChange={setSwitch1} />\n        </Cell>\n        <Cell title=\"团购\" align=\"center\">\n          <Switch size=\"24\" checked={switch2} onChange={setSwitch2} />\n        </Cell>\n        <View style=\"padding: 5px 16px;\">\n          <Button color=\"primary\" block shape=\"round\" onClick={() => setValue(false)}>\n            确认\n          </Button>\n        </View>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nfunction DropdownMenuWithCustomColor() {\n  return (\n    <DropdownMenu className=\"custom-color\">\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>默认排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>好评排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>销量排序</DropdownMenu.Option>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nfunction UpDropdownMenu() {\n  return (\n    <DropdownMenu direction=\"up\">\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item>\n        <DropdownMenu.Option value={0}>默认排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>好评排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>销量排序</DropdownMenu.Option>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nfunction DisabledDropdownMenu() {\n  return (\n    <DropdownMenu>\n      <DropdownMenu.Item disabled>\n        <DropdownMenu.Option value={0}>全部商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>新款商品</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>活动商品</DropdownMenu.Option>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item disabled>\n        <DropdownMenu.Option value={0}>默认排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={1}>好评排序</DropdownMenu.Option>\n        <DropdownMenu.Option value={2}>销量排序</DropdownMenu.Option>\n      </DropdownMenu.Item>\n    </DropdownMenu>\n  )\n}\n\nexport default function DropdownMenuDemo() {\n  return (\n    <Page className=\"dropdown-menu-demo\" title=\"DropdownMenu 下拉菜单\">\n      <Block title=\"基础用法\">\n        <BasicDropdownMenu />\n      </Block>\n      <Block title=\"自定义菜单内容\">\n        <DropdownMenuWithCustomContent />\n      </Block>\n      <Block title=\"自定义选中态颜色\">\n        <DropdownMenuWithCustomColor />\n      </Block>\n      <Block title=\"向上展开\">\n        <UpDropdownMenu />\n      </Block>\n      <Block title=\"禁用菜单\">\n        <DisabledDropdownMenu />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "empty",
    "description": "空状态时的占位提示。",
    "usage": [
      "import { Button, Empty, Tabs } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction PresetEmpty() {\n  const [tab, setTab] = useState(0)\n  return (\n    <Block title=\"图片类型\">\n      <Tabs value={tab} onChange={setTab}>\n        <Tabs.TabPane title=\"通用错误\">\n          <Empty>\n            <Empty.Image src=\"error\" />\n            <Empty.Description>描述文字</Empty.Description>\n          </Empty>\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"网络错误\">\n          <Empty>\n            <Empty.Image src=\"network\" />\n            <Empty.Description>描述文字</Empty.Description>\n          </Empty>\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"搜索提示\">\n          <Empty>\n            <Empty.Image src=\"search\" />\n            <Empty.Description>描述文字</Empty.Description>\n          </Empty>\n        </Tabs.TabPane>\n      </Tabs>\n    </Block>\n  )\n}\n\nexport default function EmptyDemo() {\n  return (\n    <Page title=\"Empty 空状态\" className=\"empty-demo\">\n      <Block title=\"基础用法\">\n        <Empty>\n          <Empty.Image />\n          <Empty.Description>描述文字</Empty.Description>\n        </Empty>\n      </Block>\n      <PresetEmpty />\n      <Block title=\"自定义图片\">\n        <Empty>\n          <Empty.Image\n            className=\"custom-empty__image\"\n            src=\"https://img.yzcdn.cn/vant/custom-empty-image.png\"\n          />\n          <Empty.Description>描述文字</Empty.Description>\n        </Empty>\n      </Block>\n      <Block title=\"底部内容\">\n        <Empty>\n          <Empty.Image />\n          <Empty.Description>描述文字</Empty.Description>\n          <Button shape=\"round\" color=\"primary\" className=\"bottom-button\">\n            按钮\n          </Button>\n        </Empty>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "empty",
        "code": "import { Button, Empty, Tabs } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction PresetEmpty() {\n  const [tab, setTab] = useState(0)\n  return (\n    <Block title=\"图片类型\">\n      <Tabs value={tab} onChange={setTab}>\n        <Tabs.TabPane title=\"通用错误\">\n          <Empty>\n            <Empty.Image src=\"error\" />\n            <Empty.Description>描述文字</Empty.Description>\n          </Empty>\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"网络错误\">\n          <Empty>\n            <Empty.Image src=\"network\" />\n            <Empty.Description>描述文字</Empty.Description>\n          </Empty>\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"搜索提示\">\n          <Empty>\n            <Empty.Image src=\"search\" />\n            <Empty.Description>描述文字</Empty.Description>\n          </Empty>\n        </Tabs.TabPane>\n      </Tabs>\n    </Block>\n  )\n}\n\nexport default function EmptyDemo() {\n  return (\n    <Page title=\"Empty 空状态\" className=\"empty-demo\">\n      <Block title=\"基础用法\">\n        <Empty>\n          <Empty.Image />\n          <Empty.Description>描述文字</Empty.Description>\n        </Empty>\n      </Block>\n      <PresetEmpty />\n      <Block title=\"自定义图片\">\n        <Empty>\n          <Empty.Image\n            className=\"custom-empty__image\"\n            src=\"https://img.yzcdn.cn/vant/custom-empty-image.png\"\n          />\n          <Empty.Description>描述文字</Empty.Description>\n        </Empty>\n      </Block>\n      <Block title=\"底部内容\">\n        <Empty>\n          <Empty.Image />\n          <Empty.Description>描述文字</Empty.Description>\n          <Button shape=\"round\" color=\"primary\" className=\"bottom-button\">\n            按钮\n          </Button>\n        </Empty>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "field",
    "description": "用户可以在文本框内输入或编辑文字。",
    "usage": [
      "import { Button, Cell, Field, Input, Textarea } from \"@taroify/core\"\nimport { MusicOutlined, SmileOutlined, WarningOutlined } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicField() {\n  const [value, setValue] = useState(\"\")\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\">\n        <Input placeholder=\"请输入文本\" value={value} onChange={(e) => setValue(e.detail.value)} />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction CustomField() {\n  const [text, setText] = useState(\"\")\n  const [idcard, setIdcard] = useState(\"\")\n  const [number, setNumber] = useState(\"\")\n  const [digit, setDigit] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\">\n        <Input placeholder=\"请输入文本\" value={text} onChange={(e) => setText(e.detail.value)} />\n      </Field>\n      <Field label=\"身份证号\">\n        <Input\n          type=\"idcard\"\n          placeholder=\"请输入手机号\"\n          value={idcard}\n          onChange={(e) => setIdcard(e.detail.value)}\n        />\n      </Field>\n      <Field label=\"整数\">\n        <Input\n          type=\"number\"\n          placeholder=\"请输入整数\"\n          value={number}\n          onChange={(e) => setNumber(e.detail.value)}\n        />\n      </Field>\n      <Field label=\"数字\">\n        <Input\n          type=\"digit\"\n          placeholder=\"请输入数字（支持小数）\"\n          value={digit}\n          onChange={(e) => setDigit(e.detail.value)}\n        />\n      </Field>\n      <Field label=\"密码\">\n        <Input\n          password\n          placeholder=\"请输入密码\"\n          value={password}\n          onChange={(e) => setPassword(e.detail.value)}\n        />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction DisabledField() {\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\">\n        <Input placeholder=\"输入框只读\" readonly value=\"输入框只读\" />\n      </Field>\n      <Field label=\"文本\">\n        <Input placeholder=\"输入框已禁用\" disabled />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction IconField() {\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\" icon={<SmileOutlined />} rightIcon={<WarningOutlined />}>\n        <Input placeholder=\"显示图标\" />\n      </Field>\n      <Field label=\"文本\" icon={<MusicOutlined />}>\n        <Input placeholder=\"显示清除图标\" clearable />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction ErrorField() {\n  return (\n    <Cell.Group inset>\n      <Field label=\"用户名\" required>\n        <Input placeholder=\"请输入用户名\" color=\"danger\" />\n      </Field>\n      <Field\n        required\n        label=\"手机号\"\n        feedback={<Field.Feedback status=\"invalid\">手机号格式错误</Field.Feedback>}\n      >\n        <Input placeholder=\"请输入手机号\" />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction ButtonField() {\n  return (\n    <Cell.Group inset>\n      <Field align=\"center\" label=\"短信验证码\">\n        <Input placeholder=\"请输入短信验证码\" />\n        <Button size=\"small\" color=\"primary\">\n          发送验证码\n        </Button>\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction FieldWithInputAlign() {\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\">\n        <Input align=\"left\" placeholder=\"输入框内容左对齐\" />\n      </Field>\n      <Field label=\"文本\">\n        <Input align=\"center\" placeholder=\"输入框内容居中对齐\" />\n      </Field>\n      <Field label=\"文本\">\n        <Input align=\"right\" placeholder=\"输入框内容右对齐\" />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction TextareaWithAutoHeight() {\n  return (\n    <Cell.Group inset>\n      <Field align=\"start\" label=\"留言\">\n        <Textarea autoHeight placeholder=\"请输入留言\" />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction TextareaWithLimit() {\n  return (\n    <Cell.Group inset>\n      <Field align=\"start\" label=\"留言\">\n        <Textarea style={{ height: \"48px\" }} limit={50} placeholder=\"请输入留言\" />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nexport default function FieldDemo() {\n  return (\n    <Page title=\"Field 输入框\" className=\"field-demo\">\n      <Block title=\"基础用法\">\n        <BasicField />\n      </Block>\n      <Block title=\"自定义类型\">\n        <CustomField />\n      </Block>\n      <Block title=\"禁用输入框\">\n        <DisabledField />\n      </Block>\n      <Block title=\"显示图标\">\n        <IconField />\n      </Block>\n      <Block title=\"错误提示\">\n        <ErrorField />\n      </Block>\n      <Block title=\"插入按钮\">\n        <ButtonField />\n      </Block>\n      <Block title=\"高度自适应\">\n        <CustomWrapper>\n          <TextareaWithAutoHeight />\n        </CustomWrapper>\n      </Block>\n      <Block title=\"显示字数统计\">\n        <CustomWrapper>\n          <TextareaWithLimit />\n        </CustomWrapper>\n      </Block>\n      <Block title=\"输入框内容对齐\">\n        <CustomWrapper>\n          <FieldWithInputAlign />\n        </CustomWrapper>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "field",
        "code": "import { Button, Cell, Field, Input, Textarea } from \"@taroify/core\"\nimport { MusicOutlined, SmileOutlined, WarningOutlined } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicField() {\n  const [value, setValue] = useState(\"\")\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\">\n        <Input placeholder=\"请输入文本\" value={value} onChange={(e) => setValue(e.detail.value)} />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction CustomField() {\n  const [text, setText] = useState(\"\")\n  const [idcard, setIdcard] = useState(\"\")\n  const [number, setNumber] = useState(\"\")\n  const [digit, setDigit] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\">\n        <Input placeholder=\"请输入文本\" value={text} onChange={(e) => setText(e.detail.value)} />\n      </Field>\n      <Field label=\"身份证号\">\n        <Input\n          type=\"idcard\"\n          placeholder=\"请输入手机号\"\n          value={idcard}\n          onChange={(e) => setIdcard(e.detail.value)}\n        />\n      </Field>\n      <Field label=\"整数\">\n        <Input\n          type=\"number\"\n          placeholder=\"请输入整数\"\n          value={number}\n          onChange={(e) => setNumber(e.detail.value)}\n        />\n      </Field>\n      <Field label=\"数字\">\n        <Input\n          type=\"digit\"\n          placeholder=\"请输入数字（支持小数）\"\n          value={digit}\n          onChange={(e) => setDigit(e.detail.value)}\n        />\n      </Field>\n      <Field label=\"密码\">\n        <Input\n          password\n          placeholder=\"请输入密码\"\n          value={password}\n          onChange={(e) => setPassword(e.detail.value)}\n        />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction DisabledField() {\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\">\n        <Input placeholder=\"输入框只读\" readonly value=\"输入框只读\" />\n      </Field>\n      <Field label=\"文本\">\n        <Input placeholder=\"输入框已禁用\" disabled />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction IconField() {\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\" icon={<SmileOutlined />} rightIcon={<WarningOutlined />}>\n        <Input placeholder=\"显示图标\" />\n      </Field>\n      <Field label=\"文本\" icon={<MusicOutlined />}>\n        <Input placeholder=\"显示清除图标\" clearable />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction ErrorField() {\n  return (\n    <Cell.Group inset>\n      <Field label=\"用户名\" required>\n        <Input placeholder=\"请输入用户名\" color=\"danger\" />\n      </Field>\n      <Field\n        required\n        label=\"手机号\"\n        feedback={<Field.Feedback status=\"invalid\">手机号格式错误</Field.Feedback>}\n      >\n        <Input placeholder=\"请输入手机号\" />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction ButtonField() {\n  return (\n    <Cell.Group inset>\n      <Field align=\"center\" label=\"短信验证码\">\n        <Input placeholder=\"请输入短信验证码\" />\n        <Button size=\"small\" color=\"primary\">\n          发送验证码\n        </Button>\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction FieldWithInputAlign() {\n  return (\n    <Cell.Group inset>\n      <Field label=\"文本\">\n        <Input align=\"left\" placeholder=\"输入框内容左对齐\" />\n      </Field>\n      <Field label=\"文本\">\n        <Input align=\"center\" placeholder=\"输入框内容居中对齐\" />\n      </Field>\n      <Field label=\"文本\">\n        <Input align=\"right\" placeholder=\"输入框内容右对齐\" />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction TextareaWithAutoHeight() {\n  return (\n    <Cell.Group inset>\n      <Field align=\"start\" label=\"留言\">\n        <Textarea autoHeight placeholder=\"请输入留言\" />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nfunction TextareaWithLimit() {\n  return (\n    <Cell.Group inset>\n      <Field align=\"start\" label=\"留言\">\n        <Textarea style={{ height: \"48px\" }} limit={50} placeholder=\"请输入留言\" />\n      </Field>\n    </Cell.Group>\n  )\n}\n\nexport default function FieldDemo() {\n  return (\n    <Page title=\"Field 输入框\" className=\"field-demo\">\n      <Block title=\"基础用法\">\n        <BasicField />\n      </Block>\n      <Block title=\"自定义类型\">\n        <CustomField />\n      </Block>\n      <Block title=\"禁用输入框\">\n        <DisabledField />\n      </Block>\n      <Block title=\"显示图标\">\n        <IconField />\n      </Block>\n      <Block title=\"错误提示\">\n        <ErrorField />\n      </Block>\n      <Block title=\"插入按钮\">\n        <ButtonField />\n      </Block>\n      <Block title=\"高度自适应\">\n        <CustomWrapper>\n          <TextareaWithAutoHeight />\n        </CustomWrapper>\n      </Block>\n      <Block title=\"显示字数统计\">\n        <CustomWrapper>\n          <TextareaWithLimit />\n        </CustomWrapper>\n      </Block>\n      <Block title=\"输入框内容对齐\">\n        <CustomWrapper>\n          <FieldWithInputAlign />\n        </CustomWrapper>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "fixed-nav",
    "description": "伸缩式交互，用于快捷导航",
    "usage": [
      "import { useState } from \"react\"\nimport { FixedNav } from \"@taroify/core\"\nimport { WapHomeOutlined, AppsOutlined, ShoppingCartOutlined, UserOutlined } from \"@taroify/icons\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function BackTopDemo() {\n  const [open, setOpen] = useState(false)\n  const [open2, setOpen2] = useState(false)\n  const list = [\n    {\n      id: 1,\n      text: \"首页\",\n      icon: <WapHomeOutlined />,\n    },\n    {\n      id: 2,\n      text: \"分类\",\n      icon: <AppsOutlined />,\n    },\n    {\n      id: 3,\n      text: \"购物车\",\n      icon: <ShoppingCartOutlined />,\n    },\n    {\n      id: 4,\n      text: \"我的\",\n      icon: <UserOutlined />,\n    },\n  ]\n  return (\n    <Page title=\"FixedNav 悬浮导航\" className=\"fixed-nav-demo\">\n      <FixedNav open={open} onChange={setOpen} data={list} position={{ top: \"150px\" }} />\n      <FixedNav\n        open={open2}\n        onChange={setOpen2}\n        data={list}\n        type=\"left\"\n        backdrop={false}\n        position={{ top: \"300px\" }}\n      />\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "fixed-nav",
        "code": "import { useState } from \"react\"\nimport { FixedNav } from \"@taroify/core\"\nimport { WapHomeOutlined, AppsOutlined, ShoppingCartOutlined, UserOutlined } from \"@taroify/icons\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function BackTopDemo() {\n  const [open, setOpen] = useState(false)\n  const [open2, setOpen2] = useState(false)\n  const list = [\n    {\n      id: 1,\n      text: \"首页\",\n      icon: <WapHomeOutlined />,\n    },\n    {\n      id: 2,\n      text: \"分类\",\n      icon: <AppsOutlined />,\n    },\n    {\n      id: 3,\n      text: \"购物车\",\n      icon: <ShoppingCartOutlined />,\n    },\n    {\n      id: 4,\n      text: \"我的\",\n      icon: <UserOutlined />,\n    },\n  ]\n  return (\n    <Page title=\"FixedNav 悬浮导航\" className=\"fixed-nav-demo\">\n      <FixedNav open={open} onChange={setOpen} data={list} position={{ top: \"150px\" }} />\n      <FixedNav\n        open={open2}\n        onChange={setOpen2}\n        data={list}\n        type=\"left\"\n        backdrop={false}\n        position={{ top: \"300px\" }}\n      />\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "fixed-view",
    "description": "用于固定在顶部或底部的视图。",
    "usage": [
      "import { FixedView } from \"@taroify/core\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nexport default function FixedViewDemo() {\n  return (\n    <Page title=\"FixedView 固定视图\" className=\"fixed-view-demo\">\n      <FixedView position=\"bottom\">固定在底部</FixedView>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "fixed-view",
        "code": "import { FixedView } from \"@taroify/core\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nexport default function FixedViewDemo() {\n  return (\n    <Page title=\"FixedView 固定视图\" className=\"fixed-view-demo\">\n      <FixedView position=\"bottom\">固定在底部</FixedView>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "flex",
    "description": "`Flex` 组件是 CSS `flex` 布局的一个封装。",
    "usage": [
      "import { Flex } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function FlexDemo() {\n  return (\n    <Page title=\"Flex 布局\" className=\"flex-demo\">\n      <Block title=\"基础用法\">\n        <Flex>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n        </Flex>\n        <Flex>\n          <Flex.Item span={4}>span: 4</Flex.Item>\n          <Flex.Item span={10} offset={4}>\n            offset: 4, span: 10\n          </Flex.Item>\n        </Flex>\n        <Flex>\n          <Flex.Item offset={12} span={12}>\n            offset: 12, span: 12\n          </Flex.Item>\n        </Flex>\n      </Block>\n      <Block title=\"在列元素之间增加间距\">\n        <Flex gutter={12}>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n        </Flex>\n      </Block>\n      <Block title=\"Flex 布局\">\n        <Flex justify=\"center\">\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n        </Flex>\n        <Flex justify=\"end\">\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n        </Flex>\n        <Flex justify=\"space-between\">\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n        </Flex>\n        <Flex justify=\"space-around\">\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n        </Flex>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "flex",
        "code": "import { Flex } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function FlexDemo() {\n  return (\n    <Page title=\"Flex 布局\" className=\"flex-demo\">\n      <Block title=\"基础用法\">\n        <Flex>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n        </Flex>\n        <Flex>\n          <Flex.Item span={4}>span: 4</Flex.Item>\n          <Flex.Item span={10} offset={4}>\n            offset: 4, span: 10\n          </Flex.Item>\n        </Flex>\n        <Flex>\n          <Flex.Item offset={12} span={12}>\n            offset: 12, span: 12\n          </Flex.Item>\n        </Flex>\n      </Block>\n      <Block title=\"在列元素之间增加间距\">\n        <Flex gutter={12}>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n          <Flex.Item span={8}>span: 8</Flex.Item>\n        </Flex>\n      </Block>\n      <Block title=\"Flex 布局\">\n        <Flex justify=\"center\">\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n        </Flex>\n        <Flex justify=\"end\">\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n        </Flex>\n        <Flex justify=\"space-between\">\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n        </Flex>\n        <Flex justify=\"space-around\">\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n          <Flex.Item span={6}>span: 6</Flex.Item>\n        </Flex>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "floating-bubble",
    "description": "悬浮在页面边缘的可点击气泡。",
    "usage": [
      "import { useState } from \"react\"\nimport { showToast } from \"@tarojs/taro\"\nimport { FloatingBubble, Tabs } from \"@taroify/core\"\nimport { ChatOutlined } from \"@taroify/icons\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nfunction BasicFloatingBubble() {\n  const onClick = () => {\n    showToast({\n      title: \"点击气泡\",\n      icon: \"none\",\n      duration: 1000,\n    })\n  }\n\n  return <FloatingBubble icon={<ChatOutlined />} onClick={onClick} />\n}\n\nfunction CustomFloatingBubble() {\n  const onOffsetChange = (x: number, y: number) => {\n    showToast({\n      title: `x: ${x.toFixed(0)}, y: ${y.toFixed(0)}`,\n      icon: \"none\",\n      duration: 1000,\n    })\n  }\n\n  return (\n    <FloatingBubble\n      axis=\"xy\"\n      magnetic=\"x\"\n      icon={<ChatOutlined />}\n      onOffsetChange={onOffsetChange}\n    />\n  )\n}\n\nexport default function FloatingPanelDemo() {\n  const [value, setValue] = useState(0)\n\n  return (\n    <Page className=\"floating-bubble-demo\" title=\"FloatingBubble 浮动气泡\">\n      <Tabs value={value} onChange={setValue}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicFloatingBubble />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自由拖拽和磁吸\">\n          <CustomFloatingBubble />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "floating-bubble",
        "code": "import { useState } from \"react\"\nimport { showToast } from \"@tarojs/taro\"\nimport { FloatingBubble, Tabs } from \"@taroify/core\"\nimport { ChatOutlined } from \"@taroify/icons\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nfunction BasicFloatingBubble() {\n  const onClick = () => {\n    showToast({\n      title: \"点击气泡\",\n      icon: \"none\",\n      duration: 1000,\n    })\n  }\n\n  return <FloatingBubble icon={<ChatOutlined />} onClick={onClick} />\n}\n\nfunction CustomFloatingBubble() {\n  const onOffsetChange = (x: number, y: number) => {\n    showToast({\n      title: `x: ${x.toFixed(0)}, y: ${y.toFixed(0)}`,\n      icon: \"none\",\n      duration: 1000,\n    })\n  }\n\n  return (\n    <FloatingBubble\n      axis=\"xy\"\n      magnetic=\"x\"\n      icon={<ChatOutlined />}\n      onOffsetChange={onOffsetChange}\n    />\n  )\n}\n\nexport default function FloatingPanelDemo() {\n  const [value, setValue] = useState(0)\n\n  return (\n    <Page className=\"floating-bubble-demo\" title=\"FloatingBubble 浮动气泡\">\n      <Tabs value={value} onChange={setValue}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicFloatingBubble />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自由拖拽和磁吸\">\n          <CustomFloatingBubble />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "floating-panel",
    "description": "浮动在页面底部的面板，可以上下拖动来浏览内容，常用于提供额外的功能或信息。",
    "usage": [
      "import { FloatingPanel, Cell, Tabs } from \"@taroify/core\"\nimport { useState, useMemo } from \"react\"\nimport { getSystemInfoSync } from \"@tarojs/taro\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nfunction BasicFloatingPanel() {\n  return (\n    <FloatingPanel>\n      <Cell.Group>\n        <Cell>1</Cell>\n        <Cell>2</Cell>\n        <Cell>3</Cell>\n        <Cell>4</Cell>\n        <Cell>5</Cell>\n        <Cell>6</Cell>\n        <Cell>7</Cell>\n        <Cell>8</Cell>\n        <Cell>9</Cell>\n        <Cell>10</Cell>\n        <Cell>11</Cell>\n        <Cell>12</Cell>\n        <Cell>13</Cell>\n      </Cell.Group>\n    </FloatingPanel>\n  )\n}\n\nfunction CustomAnchors() {\n  const windowHeight = useMemo(() => getSystemInfoSync().windowHeight, [])\n\n  const anchors = useMemo(\n    () => [200, Math.round(0.4 * windowHeight), Math.round(0.7 * windowHeight)],\n    [windowHeight],\n  )\n\n  return (\n    <FloatingPanel anchors={anchors} height={anchors[0]}>\n      <Cell.Group>\n        <Cell>1</Cell>\n        <Cell>2</Cell>\n        <Cell>3</Cell>\n        <Cell>4</Cell>\n        <Cell>5</Cell>\n        <Cell>6</Cell>\n        <Cell>7</Cell>\n        <Cell>8</Cell>\n        <Cell>9</Cell>\n        <Cell>10</Cell>\n        <Cell>11</Cell>\n        <Cell>12</Cell>\n        <Cell>13</Cell>\n      </Cell.Group>\n    </FloatingPanel>\n  )\n}\n\nfunction HeadDragOnly() {\n  return (\n    <FloatingPanel contentDraggable={false}>\n      <Cell.Group>\n        <Cell>1</Cell>\n        <Cell>2</Cell>\n        <Cell>3</Cell>\n        <Cell>4</Cell>\n        <Cell>5</Cell>\n        <Cell>6</Cell>\n        <Cell>7</Cell>\n        <Cell>8</Cell>\n        <Cell>9</Cell>\n        <Cell>10</Cell>\n        <Cell>11</Cell>\n        <Cell>12</Cell>\n        <Cell>13</Cell>\n      </Cell.Group>\n    </FloatingPanel>\n  )\n}\n\nexport default function FloatingPanelDemo() {\n  const [value, setValue] = useState(0)\n\n  return (\n    <Page className=\"floating-panel-demo\" title=\"FloatingPanel 浮动面板\">\n      <Tabs value={value} onChange={setValue}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicFloatingPanel />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义锚点\">\n          <CustomAnchors />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"仅头部拖拽\">\n          <HeadDragOnly />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "floating-panel",
        "code": "import { FloatingPanel, Cell, Tabs } from \"@taroify/core\"\nimport { useState, useMemo } from \"react\"\nimport { getSystemInfoSync } from \"@tarojs/taro\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nfunction BasicFloatingPanel() {\n  return (\n    <FloatingPanel>\n      <Cell.Group>\n        <Cell>1</Cell>\n        <Cell>2</Cell>\n        <Cell>3</Cell>\n        <Cell>4</Cell>\n        <Cell>5</Cell>\n        <Cell>6</Cell>\n        <Cell>7</Cell>\n        <Cell>8</Cell>\n        <Cell>9</Cell>\n        <Cell>10</Cell>\n        <Cell>11</Cell>\n        <Cell>12</Cell>\n        <Cell>13</Cell>\n      </Cell.Group>\n    </FloatingPanel>\n  )\n}\n\nfunction CustomAnchors() {\n  const windowHeight = useMemo(() => getSystemInfoSync().windowHeight, [])\n\n  const anchors = useMemo(\n    () => [200, Math.round(0.4 * windowHeight), Math.round(0.7 * windowHeight)],\n    [windowHeight],\n  )\n\n  return (\n    <FloatingPanel anchors={anchors} height={anchors[0]}>\n      <Cell.Group>\n        <Cell>1</Cell>\n        <Cell>2</Cell>\n        <Cell>3</Cell>\n        <Cell>4</Cell>\n        <Cell>5</Cell>\n        <Cell>6</Cell>\n        <Cell>7</Cell>\n        <Cell>8</Cell>\n        <Cell>9</Cell>\n        <Cell>10</Cell>\n        <Cell>11</Cell>\n        <Cell>12</Cell>\n        <Cell>13</Cell>\n      </Cell.Group>\n    </FloatingPanel>\n  )\n}\n\nfunction HeadDragOnly() {\n  return (\n    <FloatingPanel contentDraggable={false}>\n      <Cell.Group>\n        <Cell>1</Cell>\n        <Cell>2</Cell>\n        <Cell>3</Cell>\n        <Cell>4</Cell>\n        <Cell>5</Cell>\n        <Cell>6</Cell>\n        <Cell>7</Cell>\n        <Cell>8</Cell>\n        <Cell>9</Cell>\n        <Cell>10</Cell>\n        <Cell>11</Cell>\n        <Cell>12</Cell>\n        <Cell>13</Cell>\n      </Cell.Group>\n    </FloatingPanel>\n  )\n}\n\nexport default function FloatingPanelDemo() {\n  const [value, setValue] = useState(0)\n\n  return (\n    <Page className=\"floating-panel-demo\" title=\"FloatingPanel 浮动面板\">\n      <Tabs value={value} onChange={setValue}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicFloatingPanel />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义锚点\">\n          <CustomAnchors />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"仅头部拖拽\">\n          <HeadDragOnly />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "form",
    "description": "用于数据录入、校验，支持输入框、单选框、复选框、文件上传等类型。",
    "usage": [
      "import {\n  Button,\n  Calendar,\n  Cell,\n  Checkbox,\n  DatetimePicker,\n  Form,\n  Input,\n  Picker,\n  Popup,\n  Radio,\n  Rate,\n  Slider,\n  Stepper,\n  Switch,\n  Toast,\n  Uploader,\n} from \"@taroify/core\"\nimport { FormItemInstance, FormValidError, FormInstance } from \"@taroify/core/form\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport { BaseEventOrig } from \"@tarojs/components/types/common\"\nimport { FormProps } from \"@tarojs/components/types/Form\"\nimport { chooseImage } from \"@tarojs/taro\"\nimport * as _ from \"lodash\"\nimport { useRef, useState, Fragment } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicForm() {\n  const onSubmit = (event: BaseEventOrig<FormProps.onSubmitEventDetail>) => {\n    Toast.open(JSON.stringify(event.detail.value))\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Toast id=\"toast\" />\n      <Cell.Group inset>\n        <Form.Item name=\"username\" rules={[{ required: true, message: \"请填写用户名\" }]}>\n          <Form.Label>用户名</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"用户名\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"password\" rules={[{ required: true, message: \"请填写密码\" }]}>\n          <Form.Label>密码</Form.Label>\n          <Form.Control>\n            <Input password placeholder=\"密码\" />\n          </Form.Control>\n        </Form.Item>\n      </Cell.Group>\n      <View style={{ margin: \"16px\" }}>\n        <Button shape=\"round\" block color=\"primary\" formType=\"submit\">\n          提交\n        </Button>\n      </View>\n    </Form>\n  )\n}\n\nfunction FormWithRules() {\n  const asyncValidator = (val: any) =>\n    new Promise<boolean>((resolve) => {\n      Toast.loading(\"验证中...\")\n\n      setTimeout(() => {\n        Toast.close(\"toast\")\n        resolve(/\\d{6}/.test(val))\n      }, 1000)\n    })\n\n  function onValidate(errors: FormValidError[]) {\n    Toast.open({\n      style: {\n        textAlign: \"left\",\n      },\n      message: JSON.stringify(errors, undefined, 2),\n    })\n  }\n\n  return (\n    <Form defaultValues={{ validatorMessage: \"abc\" }} onValidate={onValidate}>\n      <Toast id=\"toast\" />\n      <Cell.Group inset>\n        <Form.Item name=\"pattern\" rules={[{ pattern: /\\d{6}/, message: \"请输入正确内容\" }]}>\n          <Form.Label>文本</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"正则校验\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item\n          name=\"validator\"\n          rules={[{ validator: (val) => /1\\d{10}/.test(val), message: \"请输入正确内容\" }]}\n        >\n          <Form.Label>文本</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"函数校验\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item\n          name=\"validatorMessage\"\n          rules={[{ validator: (val) => `${val ?? \"\"} 不合法，请重新输入` }]}\n        >\n          <Form.Label>文本</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"校验函数返回错误提示\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item\n          name=\"asyncValidator\"\n          rules={[{ validator: asyncValidator, message: \"请输入正确内容\" }]}\n        >\n          <Form.Label>文本</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"异步函数校验\" />\n          </Form.Control>\n        </Form.Item>\n      </Cell.Group>\n      <View style={{ margin: \"16px\" }}>\n        <Button shape=\"round\" block color=\"primary\" formType=\"submit\">\n          提交\n        </Button>\n      </View>\n    </Form>\n  )\n}\n\nfunction UploaderField() {\n  const itemRef = useRef<FormItemInstance>()\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      itemRef.current?.setValue([\n        ...(itemRef.current?.getValue() ? [...itemRef.current?.getValue()] : []),\n        {\n          url: tempFiles[0].path,\n          type: tempFiles[0].type,\n          name: tempFiles[0].originalFileObj?.name,\n        },\n      ])\n    })\n  }\n\n  return (\n    <Form.Item ref={itemRef} name=\"uploader\">\n      <Form.Label>文件上传</Form.Label>\n      <Form.Control>\n        <Uploader multiple maxFiles={2} onUpload={onUpload} />\n      </Form.Control>\n    </Form.Item>\n  )\n}\n\nfunction PickerField() {\n  const itemRef = useRef<FormItemInstance>()\n  const [open, setOpen] = useState(false)\n\n  return (\n    <>\n      <Form.Item ref={itemRef} name=\"picker\" clickable rightIcon={<ArrowRight />}>\n        <Form.Label>选择器</Form.Label>\n        <Form.Control>\n          <Input readonly placeholder=\"点击选择城市\" onClick={() => setOpen(true)} />\n        </Form.Control>\n      </Form.Item>\n      <Popup mountOnEnter={false} open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Picker\n          onCancel={() => setOpen(false)}\n          onConfirm={(newValue) => {\n            itemRef.current?.setValue(newValue)\n            setOpen(false)\n          }}\n        >\n          <Picker.Toolbar>\n            <Picker.Button>取消</Picker.Button>\n            <Picker.Button>确认</Picker.Button>\n          </Picker.Toolbar>\n          <Picker.Column>\n            <Picker.Option>杭州</Picker.Option>\n            <Picker.Option>宁波</Picker.Option>\n            <Picker.Option>温州</Picker.Option>\n            <Picker.Option>嘉兴</Picker.Option>\n            <Picker.Option>湖州</Picker.Option>\n          </Picker.Column>\n        </Picker>\n      </Popup>\n    </>\n  )\n}\n\nfunction DatetimePickerField() {\n  const itemRef = useRef<FormItemInstance>()\n  const [open, setOpen] = useState(false)\n\n  const formatDate = (date: any) => {\n    if (date) {\n      const hours = _.padStart(_.toString(date?.getHours()), 2, \"0\")\n      const minutes = _.padStart(_.toString(date?.getMinutes()), 2, \"0\")\n      return `${hours}:${minutes}`\n    }\n  }\n\n  return (\n    <>\n      <Form.Item ref={itemRef} name=\"datetimePicker\" clickable rightIcon={<ArrowRight />}>\n        <Form.Label>时间选择</Form.Label>\n        <Form.Control>\n          {(controller) => (\n            <Input\n              value={formatDate(controller.value)}\n              readonly\n              placeholder=\"点击选择时间\"\n              onClick={() => setOpen(true)}\n            />\n          )}\n        </Form.Control>\n      </Form.Item>\n      <Popup mountOnEnter={false} open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <DatetimePicker\n          type=\"hour-minute\"\n          onCancel={() => setOpen(false)}\n          onConfirm={(newValue) => {\n            itemRef.current?.setValue(newValue)\n            setOpen(false)\n          }}\n        >\n          <Picker.Toolbar>\n            <Picker.Button>取消</Picker.Button>\n            <Picker.Button>确认</Picker.Button>\n          </Picker.Toolbar>\n        </DatetimePicker>\n      </Popup>\n    </>\n  )\n}\n\nfunction CalendarField() {\n  const itemRef = useRef<FormItemInstance>()\n  const [open, setOpen] = useState(false)\n\n  const formatDate = (date: any) => {\n    if (date) {\n      const months = _.padStart(_.toString(date?.getMonth() + 1), 2, \"0\")\n      const days = _.padStart(_.toString(date?.getDate()), 2, \"0\")\n      return `${months}-${days}`\n    }\n  }\n\n  return (\n    <>\n      <Form.Item ref={itemRef} name=\"calendar\" clickable rightIcon={<ArrowRight />}>\n        <Form.Label>日历</Form.Label>\n        <Form.Control>\n          {(controller) => (\n            <Input\n              value={formatDate(controller.value)}\n              readonly\n              placeholder=\"点击选择日期\"\n              onClick={() => setOpen(true)}\n            />\n          )}\n        </Form.Control>\n      </Form.Item>\n      <Popup\n        mountOnEnter={false}\n        style={{ height: \"80%\" }}\n        open={open}\n        rounded\n        placement=\"bottom\"\n        onClose={setOpen}\n      >\n        <Popup.Close />\n        <Calendar\n          type=\"single\"\n          onConfirm={(newValue) => {\n            itemRef.current?.setValue(newValue)\n            setOpen(false)\n          }}\n        >\n          <Calendar.Footer>\n            <Calendar.Button type=\"confirm\">确定</Calendar.Button>\n          </Calendar.Footer>\n        </Calendar>\n      </Popup>\n    </>\n  )\n}\n\nfunction FormWithFields() {\n  return (\n    <Form onSubmit={(e) => Toast.open(JSON.stringify(e.detail.value, undefined, 2))}>\n      <Cell.Group inset>\n        <Form.Item name=\"switch\">\n          <Form.Label>开关</Form.Label>\n          <Form.Control>\n            <Switch size={20} />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"checkbox\">\n          <Form.Label>复选框</Form.Label>\n          <Form.Control>\n            <Checkbox shape=\"square\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"checkboxGroup\">\n          <Form.Label>复选框</Form.Label>\n          <Form.Control>\n            <Checkbox.Group direction=\"horizontal\">\n              <Checkbox name=\"1\" shape=\"square\">\n                复选框 1\n              </Checkbox>\n              <Checkbox name=\"2\" shape=\"square\">\n                复选框 2\n              </Checkbox>\n            </Checkbox.Group>\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"radio\">\n          <Form.Label>单选框</Form.Label>\n          <Form.Control>\n            <Radio.Group direction=\"horizontal\">\n              <Radio name=\"1\">单选框 1</Radio>\n              <Radio name=\"2\">单选框 2</Radio>\n            </Radio.Group>\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"stepper\">\n          <Form.Label>步进器</Form.Label>\n          <Form.Control>\n            <Stepper />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"rate\">\n          <Form.Label>评分</Form.Label>\n          <Form.Control>\n            <Rate />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"slider\">\n          <Form.Label>滑块</Form.Label>\n          <Form.Control>\n            <Slider />\n          </Form.Control>\n        </Form.Item>\n        <CustomWrapper>\n          <UploaderField />\n        </CustomWrapper>\n        <CustomWrapper>\n          <PickerField />\n        </CustomWrapper>\n        <CustomWrapper>\n          <DatetimePickerField />\n        </CustomWrapper>\n        <CustomWrapper>\n          <CalendarField />\n        </CustomWrapper>\n      </Cell.Group>\n      <View style={{ margin: \"16px\" }}>\n        <Button shape=\"round\" block color=\"primary\" formType=\"submit\">\n          提交\n        </Button>\n        <Button style={{ marginTop: \"16px\" }} shape=\"round\" block color=\"warning\" formType=\"reset\">\n          重置\n        </Button>\n      </View>\n    </Form>\n  )\n}\n\nfunction DynamicForm() {\n  const ref = useRef<FormInstance>(null)\n  const onManual = () => {\n    ref.current?.setValues({\n      contacts: [\n        { name: \"小红\", phone: \"10000\" },\n        { name: \"小绿\", phone: \"10086\" }\n      ]\n    })\n  }\n  return <Form ref={ref}  onSubmit={(e) => {\n    Toast.open(JSON.stringify(e.detail.value, undefined, 2))\n  }}\n  >\n    <Form.List name=\"contacts\" defaultValue={[{name: \"小明\", phone: \"10086\"}]}>\n      {\n        (fields, { add, remove }) => <Cell.Group inset>\n          {\n            fields.map((field, idx) => <Fragment key={field.key}>\n              <Form.Item name={`${field.name}.name`} key={`${field.key}.name`}>\n                <Form.Label>姓名</Form.Label>\n                <Form.Control>\n                  {\n                    ({ value, onChange }) => <>\n                      <Input placeholder=\"请输入姓名\" value={value} onChange={(e) => { onChange?.(e.detail.value) }} />\n                      <View style={{ flexShrink: 0 }} onClick={() => { remove(idx) }}>删除</View>\n                    </>\n                  }\n                </Form.Control>\n              </Form.Item>\n              <Form.Item name={`${field.name}.phone`} key={`${field.key}.phone`} rules={[{ required: true, message: \"必填\" }]}>\n                <Form.Label>电话</Form.Label>\n                <Form.Control>\n                  <Input placeholder=\"请输入电话\" />\n                </Form.Control>\n              </Form.Item>\n            </Fragment>)\n          }\n          <Button variant=\"text\" color=\"primary\" onClick={() => add({})} >添加联系人</Button>\n        </Cell.Group>\n      }\n    </Form.List>\n    <View style={{ margin: \"16px\" }}>\n      <Button shape=\"round\" block color=\"primary\" formType=\"submit\">\n        提交\n      </Button>\n      <Button style={{ marginTop: \"16px\" }} shape=\"round\" block color=\"info\" onClick={onManual}>\n        手动\n      </Button>\n      <Button style={{ marginTop: \"16px\" }} shape=\"round\" block color=\"warning\" formType=\"reset\">\n        重置\n      </Button>\n    </View>\n  </Form>\n}\n\nexport default function FormDemo() {\n  return (\n    <Page title=\"Form 表单\" className=\"form-demo\">\n      <Block title=\"基础用法\">\n        <BasicForm />\n      </Block>\n      <Block title=\"校验规则\">\n        <FormWithRules />\n      </Block>\n      <Block title=\"表单项类型\">\n        <CustomWrapper>\n          <FormWithFields />\n        </CustomWrapper>\n      </Block>\n      <Block title=\"动态增减表单项\">\n        <DynamicForm />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "form",
        "code": "import {\n  Button,\n  Calendar,\n  Cell,\n  Checkbox,\n  DatetimePicker,\n  Form,\n  Input,\n  Picker,\n  Popup,\n  Radio,\n  Rate,\n  Slider,\n  Stepper,\n  Switch,\n  Toast,\n  Uploader,\n} from \"@taroify/core\"\nimport { FormItemInstance, FormValidError, FormInstance } from \"@taroify/core/form\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport { BaseEventOrig } from \"@tarojs/components/types/common\"\nimport { FormProps } from \"@tarojs/components/types/Form\"\nimport { chooseImage } from \"@tarojs/taro\"\nimport * as _ from \"lodash\"\nimport { useRef, useState, Fragment } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicForm() {\n  const onSubmit = (event: BaseEventOrig<FormProps.onSubmitEventDetail>) => {\n    Toast.open(JSON.stringify(event.detail.value))\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Toast id=\"toast\" />\n      <Cell.Group inset>\n        <Form.Item name=\"username\" rules={[{ required: true, message: \"请填写用户名\" }]}>\n          <Form.Label>用户名</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"用户名\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"password\" rules={[{ required: true, message: \"请填写密码\" }]}>\n          <Form.Label>密码</Form.Label>\n          <Form.Control>\n            <Input password placeholder=\"密码\" />\n          </Form.Control>\n        </Form.Item>\n      </Cell.Group>\n      <View style={{ margin: \"16px\" }}>\n        <Button shape=\"round\" block color=\"primary\" formType=\"submit\">\n          提交\n        </Button>\n      </View>\n    </Form>\n  )\n}\n\nfunction FormWithRules() {\n  const asyncValidator = (val: any) =>\n    new Promise<boolean>((resolve) => {\n      Toast.loading(\"验证中...\")\n\n      setTimeout(() => {\n        Toast.close(\"toast\")\n        resolve(/\\d{6}/.test(val))\n      }, 1000)\n    })\n\n  function onValidate(errors: FormValidError[]) {\n    Toast.open({\n      style: {\n        textAlign: \"left\",\n      },\n      message: JSON.stringify(errors, undefined, 2),\n    })\n  }\n\n  return (\n    <Form defaultValues={{ validatorMessage: \"abc\" }} onValidate={onValidate}>\n      <Toast id=\"toast\" />\n      <Cell.Group inset>\n        <Form.Item name=\"pattern\" rules={[{ pattern: /\\d{6}/, message: \"请输入正确内容\" }]}>\n          <Form.Label>文本</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"正则校验\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item\n          name=\"validator\"\n          rules={[{ validator: (val) => /1\\d{10}/.test(val), message: \"请输入正确内容\" }]}\n        >\n          <Form.Label>文本</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"函数校验\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item\n          name=\"validatorMessage\"\n          rules={[{ validator: (val) => `${val ?? \"\"} 不合法，请重新输入` }]}\n        >\n          <Form.Label>文本</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"校验函数返回错误提示\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item\n          name=\"asyncValidator\"\n          rules={[{ validator: asyncValidator, message: \"请输入正确内容\" }]}\n        >\n          <Form.Label>文本</Form.Label>\n          <Form.Control>\n            <Input placeholder=\"异步函数校验\" />\n          </Form.Control>\n        </Form.Item>\n      </Cell.Group>\n      <View style={{ margin: \"16px\" }}>\n        <Button shape=\"round\" block color=\"primary\" formType=\"submit\">\n          提交\n        </Button>\n      </View>\n    </Form>\n  )\n}\n\nfunction UploaderField() {\n  const itemRef = useRef<FormItemInstance>()\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      itemRef.current?.setValue([\n        ...(itemRef.current?.getValue() ? [...itemRef.current?.getValue()] : []),\n        {\n          url: tempFiles[0].path,\n          type: tempFiles[0].type,\n          name: tempFiles[0].originalFileObj?.name,\n        },\n      ])\n    })\n  }\n\n  return (\n    <Form.Item ref={itemRef} name=\"uploader\">\n      <Form.Label>文件上传</Form.Label>\n      <Form.Control>\n        <Uploader multiple maxFiles={2} onUpload={onUpload} />\n      </Form.Control>\n    </Form.Item>\n  )\n}\n\nfunction PickerField() {\n  const itemRef = useRef<FormItemInstance>()\n  const [open, setOpen] = useState(false)\n\n  return (\n    <>\n      <Form.Item ref={itemRef} name=\"picker\" clickable rightIcon={<ArrowRight />}>\n        <Form.Label>选择器</Form.Label>\n        <Form.Control>\n          <Input readonly placeholder=\"点击选择城市\" onClick={() => setOpen(true)} />\n        </Form.Control>\n      </Form.Item>\n      <Popup mountOnEnter={false} open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <Picker\n          onCancel={() => setOpen(false)}\n          onConfirm={(newValue) => {\n            itemRef.current?.setValue(newValue)\n            setOpen(false)\n          }}\n        >\n          <Picker.Toolbar>\n            <Picker.Button>取消</Picker.Button>\n            <Picker.Button>确认</Picker.Button>\n          </Picker.Toolbar>\n          <Picker.Column>\n            <Picker.Option>杭州</Picker.Option>\n            <Picker.Option>宁波</Picker.Option>\n            <Picker.Option>温州</Picker.Option>\n            <Picker.Option>嘉兴</Picker.Option>\n            <Picker.Option>湖州</Picker.Option>\n          </Picker.Column>\n        </Picker>\n      </Popup>\n    </>\n  )\n}\n\nfunction DatetimePickerField() {\n  const itemRef = useRef<FormItemInstance>()\n  const [open, setOpen] = useState(false)\n\n  const formatDate = (date: any) => {\n    if (date) {\n      const hours = _.padStart(_.toString(date?.getHours()), 2, \"0\")\n      const minutes = _.padStart(_.toString(date?.getMinutes()), 2, \"0\")\n      return `${hours}:${minutes}`\n    }\n  }\n\n  return (\n    <>\n      <Form.Item ref={itemRef} name=\"datetimePicker\" clickable rightIcon={<ArrowRight />}>\n        <Form.Label>时间选择</Form.Label>\n        <Form.Control>\n          {(controller) => (\n            <Input\n              value={formatDate(controller.value)}\n              readonly\n              placeholder=\"点击选择时间\"\n              onClick={() => setOpen(true)}\n            />\n          )}\n        </Form.Control>\n      </Form.Item>\n      <Popup mountOnEnter={false} open={open} rounded placement=\"bottom\" onClose={setOpen}>\n        <DatetimePicker\n          type=\"hour-minute\"\n          onCancel={() => setOpen(false)}\n          onConfirm={(newValue) => {\n            itemRef.current?.setValue(newValue)\n            setOpen(false)\n          }}\n        >\n          <Picker.Toolbar>\n            <Picker.Button>取消</Picker.Button>\n            <Picker.Button>确认</Picker.Button>\n          </Picker.Toolbar>\n        </DatetimePicker>\n      </Popup>\n    </>\n  )\n}\n\nfunction CalendarField() {\n  const itemRef = useRef<FormItemInstance>()\n  const [open, setOpen] = useState(false)\n\n  const formatDate = (date: any) => {\n    if (date) {\n      const months = _.padStart(_.toString(date?.getMonth() + 1), 2, \"0\")\n      const days = _.padStart(_.toString(date?.getDate()), 2, \"0\")\n      return `${months}-${days}`\n    }\n  }\n\n  return (\n    <>\n      <Form.Item ref={itemRef} name=\"calendar\" clickable rightIcon={<ArrowRight />}>\n        <Form.Label>日历</Form.Label>\n        <Form.Control>\n          {(controller) => (\n            <Input\n              value={formatDate(controller.value)}\n              readonly\n              placeholder=\"点击选择日期\"\n              onClick={() => setOpen(true)}\n            />\n          )}\n        </Form.Control>\n      </Form.Item>\n      <Popup\n        mountOnEnter={false}\n        style={{ height: \"80%\" }}\n        open={open}\n        rounded\n        placement=\"bottom\"\n        onClose={setOpen}\n      >\n        <Popup.Close />\n        <Calendar\n          type=\"single\"\n          onConfirm={(newValue) => {\n            itemRef.current?.setValue(newValue)\n            setOpen(false)\n          }}\n        >\n          <Calendar.Footer>\n            <Calendar.Button type=\"confirm\">确定</Calendar.Button>\n          </Calendar.Footer>\n        </Calendar>\n      </Popup>\n    </>\n  )\n}\n\nfunction FormWithFields() {\n  return (\n    <Form onSubmit={(e) => Toast.open(JSON.stringify(e.detail.value, undefined, 2))}>\n      <Cell.Group inset>\n        <Form.Item name=\"switch\">\n          <Form.Label>开关</Form.Label>\n          <Form.Control>\n            <Switch size={20} />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"checkbox\">\n          <Form.Label>复选框</Form.Label>\n          <Form.Control>\n            <Checkbox shape=\"square\" />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"checkboxGroup\">\n          <Form.Label>复选框</Form.Label>\n          <Form.Control>\n            <Checkbox.Group direction=\"horizontal\">\n              <Checkbox name=\"1\" shape=\"square\">\n                复选框 1\n              </Checkbox>\n              <Checkbox name=\"2\" shape=\"square\">\n                复选框 2\n              </Checkbox>\n            </Checkbox.Group>\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"radio\">\n          <Form.Label>单选框</Form.Label>\n          <Form.Control>\n            <Radio.Group direction=\"horizontal\">\n              <Radio name=\"1\">单选框 1</Radio>\n              <Radio name=\"2\">单选框 2</Radio>\n            </Radio.Group>\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"stepper\">\n          <Form.Label>步进器</Form.Label>\n          <Form.Control>\n            <Stepper />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"rate\">\n          <Form.Label>评分</Form.Label>\n          <Form.Control>\n            <Rate />\n          </Form.Control>\n        </Form.Item>\n        <Form.Item name=\"slider\">\n          <Form.Label>滑块</Form.Label>\n          <Form.Control>\n            <Slider />\n          </Form.Control>\n        </Form.Item>\n        <CustomWrapper>\n          <UploaderField />\n        </CustomWrapper>\n        <CustomWrapper>\n          <PickerField />\n        </CustomWrapper>\n        <CustomWrapper>\n          <DatetimePickerField />\n        </CustomWrapper>\n        <CustomWrapper>\n          <CalendarField />\n        </CustomWrapper>\n      </Cell.Group>\n      <View style={{ margin: \"16px\" }}>\n        <Button shape=\"round\" block color=\"primary\" formType=\"submit\">\n          提交\n        </Button>\n        <Button style={{ marginTop: \"16px\" }} shape=\"round\" block color=\"warning\" formType=\"reset\">\n          重置\n        </Button>\n      </View>\n    </Form>\n  )\n}\n\nfunction DynamicForm() {\n  const ref = useRef<FormInstance>(null)\n  const onManual = () => {\n    ref.current?.setValues({\n      contacts: [\n        { name: \"小红\", phone: \"10000\" },\n        { name: \"小绿\", phone: \"10086\" }\n      ]\n    })\n  }\n  return <Form ref={ref}  onSubmit={(e) => {\n    Toast.open(JSON.stringify(e.detail.value, undefined, 2))\n  }}\n  >\n    <Form.List name=\"contacts\" defaultValue={[{name: \"小明\", phone: \"10086\"}]}>\n      {\n        (fields, { add, remove }) => <Cell.Group inset>\n          {\n            fields.map((field, idx) => <Fragment key={field.key}>\n              <Form.Item name={`${field.name}.name`} key={`${field.key}.name`}>\n                <Form.Label>姓名</Form.Label>\n                <Form.Control>\n                  {\n                    ({ value, onChange }) => <>\n                      <Input placeholder=\"请输入姓名\" value={value} onChange={(e) => { onChange?.(e.detail.value) }} />\n                      <View style={{ flexShrink: 0 }} onClick={() => { remove(idx) }}>删除</View>\n                    </>\n                  }\n                </Form.Control>\n              </Form.Item>\n              <Form.Item name={`${field.name}.phone`} key={`${field.key}.phone`} rules={[{ required: true, message: \"必填\" }]}>\n                <Form.Label>电话</Form.Label>\n                <Form.Control>\n                  <Input placeholder=\"请输入电话\" />\n                </Form.Control>\n              </Form.Item>\n            </Fragment>)\n          }\n          <Button variant=\"text\" color=\"primary\" onClick={() => add({})} >添加联系人</Button>\n        </Cell.Group>\n      }\n    </Form.List>\n    <View style={{ margin: \"16px\" }}>\n      <Button shape=\"round\" block color=\"primary\" formType=\"submit\">\n        提交\n      </Button>\n      <Button style={{ marginTop: \"16px\" }} shape=\"round\" block color=\"info\" onClick={onManual}>\n        手动\n      </Button>\n      <Button style={{ marginTop: \"16px\" }} shape=\"round\" block color=\"warning\" formType=\"reset\">\n        重置\n      </Button>\n    </View>\n  </Form>\n}\n\nexport default function FormDemo() {\n  return (\n    <Page title=\"Form 表单\" className=\"form-demo\">\n      <Block title=\"基础用法\">\n        <BasicForm />\n      </Block>\n      <Block title=\"校验规则\">\n        <FormWithRules />\n      </Block>\n      <Block title=\"表单项类型\">\n        <CustomWrapper>\n          <FormWithFields />\n        </CustomWrapper>\n      </Block>\n      <Block title=\"动态增减表单项\">\n        <DynamicForm />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "grid",
    "description": "宫格可以在水平方向上把页面分隔成等宽度的区块，用于展示内容或进行页面导航。",
    "usage": [
      "import { Grid, Image } from \"@taroify/core\"\nimport { HomeOutlined, PhotoOutlined, Search } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function GridDemo() {\n  return (\n    <Page title=\"Grid 宫格\" className=\"grid-demo\">\n      <Block title=\"基础用法\">\n        <Grid columns={4}>\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"自定义列数\">\n        <Grid columns={3}>\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"自定义内容\">\n        <Grid columns={3} bordered={false}>\n          <Grid.Item>\n            <Image className=\"grid-image\" src=\"https://img.yzcdn.cn/vant/apple-1.jpg\" />\n          </Grid.Item>\n          <Grid.Item>\n            <Image className=\"grid-image\" src=\"https://img.yzcdn.cn/vant/apple-2.jpg\" />\n          </Grid.Item>\n          <Grid.Item>\n            <Image className=\"grid-image\" src=\"https://img.yzcdn.cn/vant/apple-3.jpg\" />\n          </Grid.Item>\n        </Grid>\n      </Block>\n      <Block title=\"正方形格子\">\n        <Grid columns={4} square>\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"格子间距\">\n        <Grid columns={4} gutter={10}>\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"内容横排\">\n        <Grid columns={3} direction=\"horizontal\">\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"徽标提示\">\n        <Grid columns={2}>\n          <Grid.Item icon={<HomeOutlined />} badge text=\"文字\" />\n          <Grid.Item icon={<Search />} badge=\"99+\" text=\"文字\" />\n        </Grid>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "grid",
        "code": "import { Grid, Image } from \"@taroify/core\"\nimport { HomeOutlined, PhotoOutlined, Search } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function GridDemo() {\n  return (\n    <Page title=\"Grid 宫格\" className=\"grid-demo\">\n      <Block title=\"基础用法\">\n        <Grid columns={4}>\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"自定义列数\">\n        <Grid columns={3}>\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"自定义内容\">\n        <Grid columns={3} bordered={false}>\n          <Grid.Item>\n            <Image className=\"grid-image\" src=\"https://img.yzcdn.cn/vant/apple-1.jpg\" />\n          </Grid.Item>\n          <Grid.Item>\n            <Image className=\"grid-image\" src=\"https://img.yzcdn.cn/vant/apple-2.jpg\" />\n          </Grid.Item>\n          <Grid.Item>\n            <Image className=\"grid-image\" src=\"https://img.yzcdn.cn/vant/apple-3.jpg\" />\n          </Grid.Item>\n        </Grid>\n      </Block>\n      <Block title=\"正方形格子\">\n        <Grid columns={4} square>\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"格子间距\">\n        <Grid columns={4} gutter={10}>\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"内容横排\">\n        <Grid columns={3} direction=\"horizontal\">\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n          <Grid.Item icon={<PhotoOutlined />} text=\"文字\" />\n        </Grid>\n      </Block>\n      <Block title=\"徽标提示\">\n        <Grid columns={2}>\n          <Grid.Item icon={<HomeOutlined />} badge text=\"文字\" />\n          <Grid.Item icon={<Search />} badge=\"99+\" text=\"文字\" />\n        </Grid>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "image",
    "description": "增强版的 taro Image 组件，提供多种图片填充模式，支持图片懒加载、加载中提示、加载失败提示。",
    "usage": [
      "import { Flex, Image } from \"@taroify/core\"\nimport { ImageMode } from \"@taroify/core/image\"\nimport { Photo, PhotoFail } from \"@taroify/icons\"\nimport { Text } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function ImageDemo() {\n  const imageUrl = \"https://img01.yzcdn.cn/vant/cat.jpeg\"\n\n  const modes: ImageMode[] = [\n    \"scaleToFill\",\n    \"aspectFit\",\n    \"aspectFill\",\n    \"widthFix\",\n    \"heightFix\",\n    \"top\",\n    \"bottom\",\n    \"center\",\n    \"left\",\n    \"right\",\n    \"topLeft\",\n    \"topRight\",\n    \"bottomLeft\",\n    \"bottomRight\",\n  ]\n\n  return (\n    <Page title=\"Image 图片\" className=\"image-demo\">\n      <Block title=\"基础用法\">\n        <Image className=\"basic-image\" src={imageUrl} />\n      </Block>\n      <Block title=\"填充模式\">\n        <Flex wrap=\"wrap\" gutter={20}>\n          {modes.map((mode) => (\n            <Flex.Item span={8} key={mode}>\n              <Image mode={mode} src={imageUrl} />\n              <Text className=\"text\">{mode}</Text>\n            </Flex.Item>\n          ))}\n        </Flex>\n      </Block>\n      <Block title=\"圆形图片\">\n        <Flex wrap=\"wrap\" gutter={20}>\n          {modes.map((mode) => (\n            <Flex.Item span={8} key={mode}>\n              <Image mode={mode} src={imageUrl} round />\n              <Text className=\"text\">{mode}</Text>\n            </Flex.Item>\n          ))}\n        </Flex>\n      </Block>\n      <Block title=\"加载中提示\">\n        <Flex wrap=\"wrap\" gutter={20}>\n          <Flex.Item span={8}>\n            <Image placeholder={<Photo />} />\n            <Text className=\"text\">默认提示</Text>\n          </Flex.Item>\n          <Flex.Item span={8}>\n            <Image placeholder=\"加载中...\" />\n            <Text className=\"text\">自定义提示</Text>\n          </Flex.Item>\n        </Flex>\n      </Block>\n      <Block title=\"加载失败提示\">\n        <Flex wrap=\"wrap\" gutter={20}>\n          <Flex.Item span={8}>\n            <Image src=\"error\" fallback={<PhotoFail />} />\n            <Text className=\"text\">默认提示</Text>\n          </Flex.Item>\n          <Flex.Item span={8}>\n            <Image src=\"error\" fallback=\"加载失败\" />\n            <Text className=\"text\">自定义提示</Text>\n          </Flex.Item>\n        </Flex>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "image",
        "code": "import { Flex, Image } from \"@taroify/core\"\nimport { ImageMode } from \"@taroify/core/image\"\nimport { Photo, PhotoFail } from \"@taroify/icons\"\nimport { Text } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function ImageDemo() {\n  const imageUrl = \"https://img01.yzcdn.cn/vant/cat.jpeg\"\n\n  const modes: ImageMode[] = [\n    \"scaleToFill\",\n    \"aspectFit\",\n    \"aspectFill\",\n    \"widthFix\",\n    \"heightFix\",\n    \"top\",\n    \"bottom\",\n    \"center\",\n    \"left\",\n    \"right\",\n    \"topLeft\",\n    \"topRight\",\n    \"bottomLeft\",\n    \"bottomRight\",\n  ]\n\n  return (\n    <Page title=\"Image 图片\" className=\"image-demo\">\n      <Block title=\"基础用法\">\n        <Image className=\"basic-image\" src={imageUrl} />\n      </Block>\n      <Block title=\"填充模式\">\n        <Flex wrap=\"wrap\" gutter={20}>\n          {modes.map((mode) => (\n            <Flex.Item span={8} key={mode}>\n              <Image mode={mode} src={imageUrl} />\n              <Text className=\"text\">{mode}</Text>\n            </Flex.Item>\n          ))}\n        </Flex>\n      </Block>\n      <Block title=\"圆形图片\">\n        <Flex wrap=\"wrap\" gutter={20}>\n          {modes.map((mode) => (\n            <Flex.Item span={8} key={mode}>\n              <Image mode={mode} src={imageUrl} round />\n              <Text className=\"text\">{mode}</Text>\n            </Flex.Item>\n          ))}\n        </Flex>\n      </Block>\n      <Block title=\"加载中提示\">\n        <Flex wrap=\"wrap\" gutter={20}>\n          <Flex.Item span={8}>\n            <Image placeholder={<Photo />} />\n            <Text className=\"text\">默认提示</Text>\n          </Flex.Item>\n          <Flex.Item span={8}>\n            <Image placeholder=\"加载中...\" />\n            <Text className=\"text\">自定义提示</Text>\n          </Flex.Item>\n        </Flex>\n      </Block>\n      <Block title=\"加载失败提示\">\n        <Flex wrap=\"wrap\" gutter={20}>\n          <Flex.Item span={8}>\n            <Image src=\"error\" fallback={<PhotoFail />} />\n            <Text className=\"text\">默认提示</Text>\n          </Flex.Item>\n          <Flex.Item span={8}>\n            <Image src=\"error\" fallback=\"加载失败\" />\n            <Text className=\"text\">自定义提示</Text>\n          </Flex.Item>\n        </Flex>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "index-list",
    "description": "用于列表的索引分类显示和快速定位。",
    "usage": [
      "import { Cell, IndexList, Tabs } from \"@taroify/core\"\nimport * as _ from \"lodash\"\nimport { Fragment, useState } from \"react\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicIndexBar() {\n  const indexList: string[] = []\n  const charCodeOfA = \"A\".charCodeAt(0)\n\n  for (let i = 0; i < 26; i++) {\n    indexList.push(String.fromCharCode(charCodeOfA + i))\n  }\n\n  return (\n    <IndexList>\n      {_.map(indexList, (index) => {\n        return (\n          <Fragment key={index}>\n            <IndexList.Anchor index={index} />\n            <Cell title=\"文本\" />\n            <Cell title=\"文本\" />\n            <Cell title=\"文本\" />\n          </Fragment>\n        )\n      })}\n    </IndexList>\n  )\n}\n\nfunction CustomIndexBar() {\n  const customIndexList = [1, 2, 3, 4, 5, 6, 8, 9, 10]\n\n  return (\n    <IndexList>\n      {_.map(customIndexList, (index) => {\n        return (\n          <Fragment key={index}>\n            <IndexList.Anchor index={index}>标题{index}</IndexList.Anchor>\n            <Cell title=\"文本\" />\n            <Cell title=\"文本\" />\n            <Cell title=\"文本\" />\n          </Fragment>\n        )\n      })}\n    </IndexList>\n  )\n}\n\nexport default function IndexBarDemo() {\n  const [tab, setTab] = useState(0)\n  return (\n    <Page title=\"IndexList 索引栏\" className=\"index-list-demo\">\n      <Tabs value={tab} onChange={setTab}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicIndexBar />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义索引列表\">\n          <CustomIndexBar />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "index-list",
        "code": "import { Cell, IndexList, Tabs } from \"@taroify/core\"\nimport * as _ from \"lodash\"\nimport { Fragment, useState } from \"react\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicIndexBar() {\n  const indexList: string[] = []\n  const charCodeOfA = \"A\".charCodeAt(0)\n\n  for (let i = 0; i < 26; i++) {\n    indexList.push(String.fromCharCode(charCodeOfA + i))\n  }\n\n  return (\n    <IndexList>\n      {_.map(indexList, (index) => {\n        return (\n          <Fragment key={index}>\n            <IndexList.Anchor index={index} />\n            <Cell title=\"文本\" />\n            <Cell title=\"文本\" />\n            <Cell title=\"文本\" />\n          </Fragment>\n        )\n      })}\n    </IndexList>\n  )\n}\n\nfunction CustomIndexBar() {\n  const customIndexList = [1, 2, 3, 4, 5, 6, 8, 9, 10]\n\n  return (\n    <IndexList>\n      {_.map(customIndexList, (index) => {\n        return (\n          <Fragment key={index}>\n            <IndexList.Anchor index={index}>标题{index}</IndexList.Anchor>\n            <Cell title=\"文本\" />\n            <Cell title=\"文本\" />\n            <Cell title=\"文本\" />\n          </Fragment>\n        )\n      })}\n    </IndexList>\n  )\n}\n\nexport default function IndexBarDemo() {\n  const [tab, setTab] = useState(0)\n  return (\n    <Page title=\"IndexList 索引栏\" className=\"index-list-demo\">\n      <Tabs value={tab} onChange={setTab}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicIndexBar />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义索引列表\">\n          <CustomIndexBar />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "list",
    "description": "瀑布流滚动加载，用于展示长列表，当列表即将滚动到底部时，会触发事件并加载更多列表项。",
    "usage": [
      "import { Cell, List, ListInstance, Loading, PullRefresh, Tabs, Button, Flex } from \"@taroify/core\"\nimport { usePageScroll } from \"@tarojs/taro\"\nimport { useRef, useState } from \"react\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicList({ disabled }) {\n  const [hasMore, setHasMore] = useState(true)\n  const [list, setList] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  return (\n    <List\n      loading={loading}\n      hasMore={hasMore}\n      disabled={disabled}\n      onLoad={() => {\n        setLoading(true)\n        setTimeout(() => {\n          for (let i = 0; i < 10; i++) {\n            const text = list.length + 1\n            list.push(text < 10 ? \"0\" + text : String(text))\n          }\n          setList([...list])\n          setHasMore(list.length < 40)\n          setLoading(false)\n        }, 1000)\n      }}\n    >\n      {\n        //\n        list.map((item) => (\n          <Cell key={item}>{item}</Cell>\n        ))\n      }\n      <List.Placeholder>\n        {loading && <Loading>加载中...</Loading>}\n        {!hasMore && \"没有更多了\"}\n      </List.Placeholder>\n    </List>\n  )\n}\n\nfunction FixedHeightList({ disabled }) {\n  const [hasMore, setHasMore] = useState(true)\n  const [list, setList] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  const ref = useRef<ListInstance>(null)\n\n  return (\n    <>\n      <List\n        ref={ref}\n        loading={loading}\n        hasMore={hasMore}\n        fixedHeight\n        style={{ height: \"300px\" }}\n        disabled={disabled}\n        immediateCheck={false}\n        onLoad={() => {\n          setLoading(true)\n          setTimeout(() => {\n            for (let i = 0; i < 10; i++) {\n              const text = list.length + 1\n              list.push(text < 10 ? \"0\" + text : String(text))\n            }\n            setList([...list])\n            setHasMore(list.length < 40)\n            setLoading(false)\n          }, 1000)\n        }}\n      >\n        {\n          //\n          list.map((item) => (\n            <Cell key={item}>{item}</Cell>\n          ))\n        }\n        <List.Placeholder>\n          {loading && <Loading>加载中...</Loading>}\n          {!hasMore && \"没有更多了\"}\n        </List.Placeholder>\n      </List>\n      <Flex align=\"center\" direction=\"column\">\n        <Flex.Item>immediateCheck设为false,调用check，触发onLoad</Flex.Item>\n        <Flex.Item>\n          <Button\n            onClick={() => {\n              ref.current?.check()\n            }}\n          >\n          check\n        </Button>\n        </Flex.Item>\n      </Flex>\n    </>\n  )\n}\n\nfunction ErrorList({ disabled }) {\n  const [hasMore, setHasMore] = useState(true)\n  const [list, setList] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(false)\n\n  return (\n    <List\n      loading={loading}\n      hasMore={hasMore}\n      disabled={disabled}\n      onLoad={() => {\n        setLoading(true)\n        setTimeout(() => {\n          for (let i = 0; i < 10; i++) {\n            const text = list.length + 1\n            list.push(text < 10 ? \"0\" + text : String(text))\n          }\n          const newList = [...list]\n\n          setHasMore(!(newList.length <= 10 || newList.length >= 40))\n          setError(newList.length <= 10)\n          setList(newList)\n          setLoading(false)\n        }, 1000)\n      }}\n    >\n      {list.map((item) => (\n        <Cell key={item}>{item}</Cell>\n      ))}\n      <List.Placeholder\n        onClick={() => {\n          if (error) {\n            setHasMore(true)\n            setError(false)\n          }\n        }}\n      >\n        {loading && <Loading>加载中...</Loading>}\n        {error && \"请求失败，点击重新加载\"}\n        {!error && !hasMore && \"没有更多了\"}\n      </List.Placeholder>\n    </List>\n  )\n}\n\nfunction PullRefreshList({ disabled }) {\n  const [hasMore, setHasMore] = useState(true)\n  const [list, setList] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  const refreshingRef = useRef(false)\n  const [reachTop, setReachTop] = useState(true)\n\n  usePageScroll(({ scrollTop: aScrollTop }) => {\n    setReachTop(aScrollTop === 0)\n  })\n\n  const onLoad = () => {\n    setLoading(true)\n    const newList = refreshingRef.current ? [] : list\n    setTimeout(() => {\n      refreshingRef.current = false\n      for (let i = 0; i < 10; i++) {\n        const text = newList.length + 1\n        newList.push(text < 10 ? \"0\" + text : String(text))\n      }\n      setList(newList)\n      setLoading(false)\n      setHasMore(newList.length < 40)\n    }, 1000)\n  }\n\n  function onRefresh() {\n    refreshingRef.current = true\n    setLoading(false)\n    onLoad()\n  }\n\n  return (\n    <PullRefresh loading={refreshingRef.current} reachTop={reachTop} onRefresh={onRefresh}>\n      <List loading={loading} hasMore={hasMore} onLoad={onLoad} disabled={disabled}>\n        {\n          //\n          list.map((item) => (\n            <Cell key={item}>{item}</Cell>\n          ))\n        }\n        {!refreshingRef.current && (\n          <List.Placeholder>\n            {loading && <Loading>加载中...</Loading>}\n            {!hasMore && \"没有更多了\"}\n          </List.Placeholder>\n        )}\n      </List>\n    </PullRefresh>\n  )\n}\n\nexport default function ListDemo() {\n  const [tab, setTab] = useState(0)\n\n  return (\n    <Page title=\"List 列表\" className=\"list-demo\">\n      <Tabs value={tab} onChange={setTab}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicList disabled={tab !== 0} />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"固定高度\">\n          <FixedHeightList disabled={tab !== 1} />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"错误提示\">\n          <ErrorList disabled={tab !== 2} />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"下拉刷新\">\n          <PullRefreshList disabled={tab !== 3} />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "list",
        "code": "import { Cell, List, ListInstance, Loading, PullRefresh, Tabs, Button, Flex } from \"@taroify/core\"\nimport { usePageScroll } from \"@tarojs/taro\"\nimport { useRef, useState } from \"react\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicList({ disabled }) {\n  const [hasMore, setHasMore] = useState(true)\n  const [list, setList] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  return (\n    <List\n      loading={loading}\n      hasMore={hasMore}\n      disabled={disabled}\n      onLoad={() => {\n        setLoading(true)\n        setTimeout(() => {\n          for (let i = 0; i < 10; i++) {\n            const text = list.length + 1\n            list.push(text < 10 ? \"0\" + text : String(text))\n          }\n          setList([...list])\n          setHasMore(list.length < 40)\n          setLoading(false)\n        }, 1000)\n      }}\n    >\n      {\n        //\n        list.map((item) => (\n          <Cell key={item}>{item}</Cell>\n        ))\n      }\n      <List.Placeholder>\n        {loading && <Loading>加载中...</Loading>}\n        {!hasMore && \"没有更多了\"}\n      </List.Placeholder>\n    </List>\n  )\n}\n\nfunction FixedHeightList({ disabled }) {\n  const [hasMore, setHasMore] = useState(true)\n  const [list, setList] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  const ref = useRef<ListInstance>(null)\n\n  return (\n    <>\n      <List\n        ref={ref}\n        loading={loading}\n        hasMore={hasMore}\n        fixedHeight\n        style={{ height: \"300px\" }}\n        disabled={disabled}\n        immediateCheck={false}\n        onLoad={() => {\n          setLoading(true)\n          setTimeout(() => {\n            for (let i = 0; i < 10; i++) {\n              const text = list.length + 1\n              list.push(text < 10 ? \"0\" + text : String(text))\n            }\n            setList([...list])\n            setHasMore(list.length < 40)\n            setLoading(false)\n          }, 1000)\n        }}\n      >\n        {\n          //\n          list.map((item) => (\n            <Cell key={item}>{item}</Cell>\n          ))\n        }\n        <List.Placeholder>\n          {loading && <Loading>加载中...</Loading>}\n          {!hasMore && \"没有更多了\"}\n        </List.Placeholder>\n      </List>\n      <Flex align=\"center\" direction=\"column\">\n        <Flex.Item>immediateCheck设为false,调用check，触发onLoad</Flex.Item>\n        <Flex.Item>\n          <Button\n            onClick={() => {\n              ref.current?.check()\n            }}\n          >\n          check\n        </Button>\n        </Flex.Item>\n      </Flex>\n    </>\n  )\n}\n\nfunction ErrorList({ disabled }) {\n  const [hasMore, setHasMore] = useState(true)\n  const [list, setList] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(false)\n\n  return (\n    <List\n      loading={loading}\n      hasMore={hasMore}\n      disabled={disabled}\n      onLoad={() => {\n        setLoading(true)\n        setTimeout(() => {\n          for (let i = 0; i < 10; i++) {\n            const text = list.length + 1\n            list.push(text < 10 ? \"0\" + text : String(text))\n          }\n          const newList = [...list]\n\n          setHasMore(!(newList.length <= 10 || newList.length >= 40))\n          setError(newList.length <= 10)\n          setList(newList)\n          setLoading(false)\n        }, 1000)\n      }}\n    >\n      {list.map((item) => (\n        <Cell key={item}>{item}</Cell>\n      ))}\n      <List.Placeholder\n        onClick={() => {\n          if (error) {\n            setHasMore(true)\n            setError(false)\n          }\n        }}\n      >\n        {loading && <Loading>加载中...</Loading>}\n        {error && \"请求失败，点击重新加载\"}\n        {!error && !hasMore && \"没有更多了\"}\n      </List.Placeholder>\n    </List>\n  )\n}\n\nfunction PullRefreshList({ disabled }) {\n  const [hasMore, setHasMore] = useState(true)\n  const [list, setList] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  const refreshingRef = useRef(false)\n  const [reachTop, setReachTop] = useState(true)\n\n  usePageScroll(({ scrollTop: aScrollTop }) => {\n    setReachTop(aScrollTop === 0)\n  })\n\n  const onLoad = () => {\n    setLoading(true)\n    const newList = refreshingRef.current ? [] : list\n    setTimeout(() => {\n      refreshingRef.current = false\n      for (let i = 0; i < 10; i++) {\n        const text = newList.length + 1\n        newList.push(text < 10 ? \"0\" + text : String(text))\n      }\n      setList(newList)\n      setLoading(false)\n      setHasMore(newList.length < 40)\n    }, 1000)\n  }\n\n  function onRefresh() {\n    refreshingRef.current = true\n    setLoading(false)\n    onLoad()\n  }\n\n  return (\n    <PullRefresh loading={refreshingRef.current} reachTop={reachTop} onRefresh={onRefresh}>\n      <List loading={loading} hasMore={hasMore} onLoad={onLoad} disabled={disabled}>\n        {\n          //\n          list.map((item) => (\n            <Cell key={item}>{item}</Cell>\n          ))\n        }\n        {!refreshingRef.current && (\n          <List.Placeholder>\n            {loading && <Loading>加载中...</Loading>}\n            {!hasMore && \"没有更多了\"}\n          </List.Placeholder>\n        )}\n      </List>\n    </PullRefresh>\n  )\n}\n\nexport default function ListDemo() {\n  const [tab, setTab] = useState(0)\n\n  return (\n    <Page title=\"List 列表\" className=\"list-demo\">\n      <Tabs value={tab} onChange={setTab}>\n        <Tabs.TabPane title=\"基础用法\">\n          <BasicList disabled={tab !== 0} />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"固定高度\">\n          <FixedHeightList disabled={tab !== 1} />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"错误提示\">\n          <ErrorList disabled={tab !== 2} />\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"下拉刷新\">\n          <PullRefreshList disabled={tab !== 3} />\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "loading",
    "description": "加载图标，用于表示加载中的过渡状态。",
    "usage": [
      "import { Loading, Space } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function LoadingDemo() {\n  return (\n    <Page title=\"Loading 加载\" className=\"loading-demo\">\n      <Block title=\"加载类型\">\n        <Space>\n          <Loading />\n          <Loading type=\"spinner\" />\n        </Space>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Space>\n          <Loading className=\"custom-color\" />\n          <Loading className=\"custom-color\" type=\"spinner\" />\n        </Space>\n      </Block>\n      <Block title=\"自定义大小\">\n        <Space>\n          <Loading size=\"24\" />\n          <Loading type=\"spinner\" size=\"24\" />\n        </Space>\n      </Block>\n      <Block title=\"加载文案\">\n        <Loading size=\"24\">加载中...</Loading>\n      </Block>\n      <Block title=\"垂直排列\">\n        <Loading direction=\"vertical\" size=\"24\">\n          加载中...\n        </Loading>\n      </Block>\n      <Block title=\"垂直排列\">\n        <Space size=\"large\">\n          <Loading className=\"custom-color\" direction=\"vertical\">\n            加载中...\n          </Loading>\n          <Loading className=\"custom-text-color\" direction=\"vertical\">\n            加载中...\n          </Loading>\n        </Space>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "loading",
        "code": "import { Loading, Space } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function LoadingDemo() {\n  return (\n    <Page title=\"Loading 加载\" className=\"loading-demo\">\n      <Block title=\"加载类型\">\n        <Space>\n          <Loading />\n          <Loading type=\"spinner\" />\n        </Space>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Space>\n          <Loading className=\"custom-color\" />\n          <Loading className=\"custom-color\" type=\"spinner\" />\n        </Space>\n      </Block>\n      <Block title=\"自定义大小\">\n        <Space>\n          <Loading size=\"24\" />\n          <Loading type=\"spinner\" size=\"24\" />\n        </Space>\n      </Block>\n      <Block title=\"加载文案\">\n        <Loading size=\"24\">加载中...</Loading>\n      </Block>\n      <Block title=\"垂直排列\">\n        <Loading direction=\"vertical\" size=\"24\">\n          加载中...\n        </Loading>\n      </Block>\n      <Block title=\"垂直排列\">\n        <Space size=\"large\">\n          <Loading className=\"custom-color\" direction=\"vertical\">\n            加载中...\n          </Loading>\n          <Loading className=\"custom-text-color\" direction=\"vertical\">\n            加载中...\n          </Loading>\n        </Space>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "navbar",
    "description": "为页面提供导航功能，常用于页面顶部。",
    "usage": [
      "import { Navbar } from \"@taroify/core\"\nimport { Search } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function NavbarDemo() {\n  return (\n    <Page title=\"Navbar 导航栏\" className=\"navbar-demo\">\n      <Block title=\"基础用法\">\n        <Navbar title=\"标题\" />\n      </Block>\n      <Block title=\"返回上级\">\n        <Navbar title=\"标题\">\n          <Navbar.NavLeft>返回</Navbar.NavLeft>\n          <Navbar.NavRight>按钮</Navbar.NavRight>\n        </Navbar>\n      </Block>\n      <Block title=\"使用 NavLeft 和 NavRight\">\n        <Navbar>\n          <Navbar.NavLeft>返回</Navbar.NavLeft>\n          <Navbar.Title>标题</Navbar.Title>\n          <Navbar.NavRight icon={<Search />} />\n        </Navbar>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "navbar",
        "code": "import { Navbar } from \"@taroify/core\"\nimport { Search } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function NavbarDemo() {\n  return (\n    <Page title=\"Navbar 导航栏\" className=\"navbar-demo\">\n      <Block title=\"基础用法\">\n        <Navbar title=\"标题\" />\n      </Block>\n      <Block title=\"返回上级\">\n        <Navbar title=\"标题\">\n          <Navbar.NavLeft>返回</Navbar.NavLeft>\n          <Navbar.NavRight>按钮</Navbar.NavRight>\n        </Navbar>\n      </Block>\n      <Block title=\"使用 NavLeft 和 NavRight\">\n        <Navbar>\n          <Navbar.NavLeft>返回</Navbar.NavLeft>\n          <Navbar.Title>标题</Navbar.Title>\n          <Navbar.NavRight icon={<Search />} />\n        </Navbar>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "notice-bar",
    "description": "用于循环播放展示一组消息通知。",
    "usage": [
      "import { NoticeBar, Swiper, WhiteSpace } from \"@taroify/core\"\nimport { ArrowRight, Cross, InfoOutlined, VolumeOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicNoticeBar() {\n  return (\n    <NoticeBar scrollable>\n      <NoticeBar.Icon>\n        <VolumeOutlined />\n      </NoticeBar.Icon>\n      在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n    </NoticeBar>\n  )\n}\n\nfunction ScrollableNoticeBar() {\n  return (\n    <>\n      <NoticeBar scrollable>技术是开发它的人的共同灵魂。</NoticeBar>\n      <WhiteSpace />\n      <NoticeBar scrollable={false}>\n        在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n      </NoticeBar>\n    </>\n  )\n}\n\nfunction WordwrapNoticeBar() {\n  return (\n    <NoticeBar wordwrap scrollable={false}>\n      在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n    </NoticeBar>\n  )\n}\n\nfunction ActionNoticeBar() {\n  return (\n    <>\n      <NoticeBar scrollable={false}>\n        技术是开发它的人的共同灵魂。\n        <NoticeBar.Action>\n          <Cross />\n        </NoticeBar.Action>\n      </NoticeBar>\n      <WhiteSpace />\n      <NoticeBar scrollable={false}>\n        技术是开发它的人的共同灵魂。\n        <NoticeBar.Action>\n          <ArrowRight />\n        </NoticeBar.Action>\n      </NoticeBar>\n    </>\n  )\n}\n\nfunction NoticeBarWithCustomStyle() {\n  return (\n    <NoticeBar style={{ color: \"#1989fa\", background: \"#ecf9ff\" }}>\n      <NoticeBar.Icon>\n        <InfoOutlined />\n      </NoticeBar.Icon>\n      技术是开发它的人的共同灵魂。\n    </NoticeBar>\n  )\n}\n\nfunction NoticeBarWithVerticalScrolling() {\n  return (\n    <NoticeBar>\n      <NoticeBar.Icon>\n        <VolumeOutlined />\n      </NoticeBar.Icon>\n      <Swiper className=\"notice-swiper\" direction=\"vertical\" autoplay={3000}>\n        <Swiper.Item>内容 1</Swiper.Item>\n        <Swiper.Item>内容 2</Swiper.Item>\n        <Swiper.Item>内容 3</Swiper.Item>\n      </Swiper>\n    </NoticeBar>\n  )\n}\n\nexport default function NoticeBarDemo() {\n  return (\n    <Page title=\"NoticeBar 通知栏\" className=\"notice-bar-demo\">\n      <Block title=\"基础用法\">\n        <BasicNoticeBar />\n      </Block>\n      <Block title=\"滚动播放\">\n        <ScrollableNoticeBar />\n      </Block>\n      <Block title=\"多行展示\">\n        <WordwrapNoticeBar />\n      </Block>\n      <Block title=\"通知栏模式\">\n        <ActionNoticeBar />\n      </Block>\n      <Block title=\"自定义样式\">\n        <NoticeBarWithCustomStyle />\n      </Block>\n      <Block title=\"垂直滚动\">\n        <NoticeBarWithVerticalScrolling />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "notice-bar",
        "code": "import { NoticeBar, Swiper, WhiteSpace } from \"@taroify/core\"\nimport { ArrowRight, Cross, InfoOutlined, VolumeOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicNoticeBar() {\n  return (\n    <NoticeBar scrollable>\n      <NoticeBar.Icon>\n        <VolumeOutlined />\n      </NoticeBar.Icon>\n      在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n    </NoticeBar>\n  )\n}\n\nfunction ScrollableNoticeBar() {\n  return (\n    <>\n      <NoticeBar scrollable>技术是开发它的人的共同灵魂。</NoticeBar>\n      <WhiteSpace />\n      <NoticeBar scrollable={false}>\n        在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n      </NoticeBar>\n    </>\n  )\n}\n\nfunction WordwrapNoticeBar() {\n  return (\n    <NoticeBar wordwrap scrollable={false}>\n      在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n    </NoticeBar>\n  )\n}\n\nfunction ActionNoticeBar() {\n  return (\n    <>\n      <NoticeBar scrollable={false}>\n        技术是开发它的人的共同灵魂。\n        <NoticeBar.Action>\n          <Cross />\n        </NoticeBar.Action>\n      </NoticeBar>\n      <WhiteSpace />\n      <NoticeBar scrollable={false}>\n        技术是开发它的人的共同灵魂。\n        <NoticeBar.Action>\n          <ArrowRight />\n        </NoticeBar.Action>\n      </NoticeBar>\n    </>\n  )\n}\n\nfunction NoticeBarWithCustomStyle() {\n  return (\n    <NoticeBar style={{ color: \"#1989fa\", background: \"#ecf9ff\" }}>\n      <NoticeBar.Icon>\n        <InfoOutlined />\n      </NoticeBar.Icon>\n      技术是开发它的人的共同灵魂。\n    </NoticeBar>\n  )\n}\n\nfunction NoticeBarWithVerticalScrolling() {\n  return (\n    <NoticeBar>\n      <NoticeBar.Icon>\n        <VolumeOutlined />\n      </NoticeBar.Icon>\n      <Swiper className=\"notice-swiper\" direction=\"vertical\" autoplay={3000}>\n        <Swiper.Item>内容 1</Swiper.Item>\n        <Swiper.Item>内容 2</Swiper.Item>\n        <Swiper.Item>内容 3</Swiper.Item>\n      </Swiper>\n    </NoticeBar>\n  )\n}\n\nexport default function NoticeBarDemo() {\n  return (\n    <Page title=\"NoticeBar 通知栏\" className=\"notice-bar-demo\">\n      <Block title=\"基础用法\">\n        <BasicNoticeBar />\n      </Block>\n      <Block title=\"滚动播放\">\n        <ScrollableNoticeBar />\n      </Block>\n      <Block title=\"多行展示\">\n        <WordwrapNoticeBar />\n      </Block>\n      <Block title=\"通知栏模式\">\n        <ActionNoticeBar />\n      </Block>\n      <Block title=\"自定义样式\">\n        <NoticeBarWithCustomStyle />\n      </Block>\n      <Block title=\"垂直滚动\">\n        <NoticeBarWithVerticalScrolling />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "notify",
    "description": "在页面顶部展示消息提示，支持函数调用和组件调用两种方式。",
    "usage": [
      "import { Cell, Notify } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { ReactNode, useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicNotify() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell title=\"基础用法\" clickable rightIcon={<ArrowRight />} onClick={() => setOpen(true)} />\n      <Notify open={open} onClose={setOpen} children=\"通知内容\" />\n    </>\n  )\n}\n\nfunction CustomNotify() {\n  const [options, setOptions] = useState<{\n    open?: boolean\n    duration?: number\n    children?: ReactNode\n  }>({})\n\n  return (\n    <>\n      <Cell\n        title=\"自定义颜色\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => {\n          setOptions({\n            open: true,\n            children: \"自定义颜色\",\n          })\n        }}\n      />\n      <Cell\n        title=\"自定义时长\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() =>\n          setOptions({\n            open: true,\n            duration: 1000,\n            children: \"自定义时长\",\n          })\n        }\n      />\n      <Notify\n        open={options.open}\n        style={{\n          color: \"#ad0000\",\n          background: \"#ffe1e1\",\n        }}\n        duration={options.duration}\n        children={options.children}\n        onClose={() => setOptions({ open: false })}\n      />\n    </>\n  )\n}\n\nfunction NotifyWithPresetColors() {\n  return (\n    <>\n      <Notify id=\"notify\" />\n      <Cell\n        title=\"主要通知\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => Notify.open({ color: \"primary\", message: \"通知内容\" })}\n      />\n      <Cell\n        title=\"成功通知\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => Notify.open({ color: \"success\", message: \"通知内容\" })}\n      />\n      <Cell\n        title=\"危险通知\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => Notify.open({ color: \"danger\", message: \"通知内容\" })}\n      />\n      <Cell\n        title=\"警告通知\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => Notify.open({ color: \"warning\", message: \"通知内容\" })}\n      />\n    </>\n  )\n}\n\nexport default function NotifyDemo() {\n  return (\n    <Page title=\"Notify 消息提示\" className=\"notify-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicNotify />\n      </Block>\n      <Block variant=\"card\" title=\"通知颜色\">\n        <NotifyWithPresetColors />\n      </Block>\n      <Block variant=\"card\" title=\"自定义配置\">\n        <CustomNotify />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "notify",
        "code": "import { Cell, Notify } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { ReactNode, useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicNotify() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell title=\"基础用法\" clickable rightIcon={<ArrowRight />} onClick={() => setOpen(true)} />\n      <Notify open={open} onClose={setOpen} children=\"通知内容\" />\n    </>\n  )\n}\n\nfunction CustomNotify() {\n  const [options, setOptions] = useState<{\n    open?: boolean\n    duration?: number\n    children?: ReactNode\n  }>({})\n\n  return (\n    <>\n      <Cell\n        title=\"自定义颜色\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => {\n          setOptions({\n            open: true,\n            children: \"自定义颜色\",\n          })\n        }}\n      />\n      <Cell\n        title=\"自定义时长\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() =>\n          setOptions({\n            open: true,\n            duration: 1000,\n            children: \"自定义时长\",\n          })\n        }\n      />\n      <Notify\n        open={options.open}\n        style={{\n          color: \"#ad0000\",\n          background: \"#ffe1e1\",\n        }}\n        duration={options.duration}\n        children={options.children}\n        onClose={() => setOptions({ open: false })}\n      />\n    </>\n  )\n}\n\nfunction NotifyWithPresetColors() {\n  return (\n    <>\n      <Notify id=\"notify\" />\n      <Cell\n        title=\"主要通知\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => Notify.open({ color: \"primary\", message: \"通知内容\" })}\n      />\n      <Cell\n        title=\"成功通知\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => Notify.open({ color: \"success\", message: \"通知内容\" })}\n      />\n      <Cell\n        title=\"危险通知\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => Notify.open({ color: \"danger\", message: \"通知内容\" })}\n      />\n      <Cell\n        title=\"警告通知\"\n        clickable\n        rightIcon={<ArrowRight />}\n        onClick={() => Notify.open({ color: \"warning\", message: \"通知内容\" })}\n      />\n    </>\n  )\n}\n\nexport default function NotifyDemo() {\n  return (\n    <Page title=\"Notify 消息提示\" className=\"notify-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicNotify />\n      </Block>\n      <Block variant=\"card\" title=\"通知颜色\">\n        <NotifyWithPresetColors />\n      </Block>\n      <Block variant=\"card\" title=\"自定义配置\">\n        <CustomNotify />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "number-keyboard",
    "description": "虚拟数字键盘，可以配合[密码输入框组件](/components/password-input/)或自定义的输入框组件使用。",
    "usage": [
      "import { Cell, NumberKeyboard, Toast } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport BlockCard from \"../../../components/block-card\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface KeyboardProps {\n  keyboard?: string\n\n  onKeyboard?(keyboard: string): void\n\n  onKeyPress?(value: string | number, code: string): void\n}\n\nfunction BasicNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出默认键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"basic\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"basic\"}\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction SidebarNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出带右侧栏的键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"sidebar\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"sidebar\"}\n        extraKey={[undefined, \".\"]}\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      >\n        <NumberKeyboard.Sidebar>\n          <NumberKeyboard.Key size=\"large\" code=\"backspace\" />\n          <NumberKeyboard.Key size=\"large\" code=\"keyboard-hide\" color=\"blue\">\n            完成\n          </NumberKeyboard.Key>\n        </NumberKeyboard.Sidebar>\n      </NumberKeyboard>\n    </>\n  )\n}\n\nfunction IdCardNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出身份证号键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"idCard\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"idCard\"}\n        extraKey=\"X\"\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      >\n        <NumberKeyboard.Header>\n          <NumberKeyboard.Button>完成</NumberKeyboard.Button>\n        </NumberKeyboard.Header>\n      </NumberKeyboard>\n    </>\n  )\n}\n\nfunction TitleNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出带标题的键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"title\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"title\"}\n        title=\"键盘标题\"\n        extraKey=\".\"\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      >\n        <NumberKeyboard.Header>\n          <NumberKeyboard.Button>完成</NumberKeyboard.Button>\n        </NumberKeyboard.Header>\n      </NumberKeyboard>\n    </>\n  )\n}\n\nfunction NumberKeyboardWithKeys(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出配置多个按键的键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"keys\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"keys\"}\n        extraKey={[\"00\", \".\"]}\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      >\n        <NumberKeyboard.Sidebar>\n          <NumberKeyboard.Key size=\"large\" code=\"backspace\" />\n          <NumberKeyboard.Key size=\"large\" code=\"keyboard-hide\" color=\"blue\">\n            完成\n          </NumberKeyboard.Key>\n        </NumberKeyboard.Sidebar>\n      </NumberKeyboard>\n    </>\n  )\n}\n\nfunction RandomNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出配置随机数字的键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"random\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"random\"}\n        random\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      />\n    </>\n  )\n}\n\nexport default function NumberKeyboardDemo() {\n  const [keyboard, setKeyboard] = useState(\"basic\")\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<any>()\n\n  const onKeyPress = (aValue: string | number, code: string) => {\n    setOpen(code !== \"keyboard-hide\")\n    if (code === \"backspace\") {\n      setValue(\"backspace\")\n    } else if (code === \"extra\") {\n      setValue(`输入：${aValue}`)\n    }\n  }\n\n  return (\n    <Page title=\"NumberKeyboard 数字键盘\" className=\"number-keyboard-demo\">\n      <BlockCard>\n        <BasicNumberKeyboard keyboard={keyboard} onKeyboard={setKeyboard} onKeyPress={onKeyPress} />\n        <SidebarNumberKeyboard\n          keyboard={keyboard}\n          onKeyboard={setKeyboard}\n          onKeyPress={onKeyPress}\n        />\n        <IdCardNumberKeyboard\n          keyboard={keyboard}\n          onKeyboard={setKeyboard}\n          onKeyPress={onKeyPress}\n        />\n        <TitleNumberKeyboard keyboard={keyboard} onKeyboard={setKeyboard} onKeyPress={onKeyPress} />\n        <NumberKeyboardWithKeys\n          keyboard={keyboard}\n          onKeyboard={setKeyboard}\n          onKeyPress={onKeyPress}\n        />\n        <RandomNumberKeyboard\n          keyboard={keyboard}\n          onKeyboard={setKeyboard}\n          onKeyPress={onKeyPress}\n        />\n      </BlockCard>\n      <Toast open={open} duration={800} onClose={() => setOpen(false)} children={value} />\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "number-keyboard",
        "code": "import { Cell, NumberKeyboard, Toast } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport BlockCard from \"../../../components/block-card\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface KeyboardProps {\n  keyboard?: string\n\n  onKeyboard?(keyboard: string): void\n\n  onKeyPress?(value: string | number, code: string): void\n}\n\nfunction BasicNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出默认键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"basic\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"basic\"}\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction SidebarNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出带右侧栏的键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"sidebar\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"sidebar\"}\n        extraKey={[undefined, \".\"]}\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      >\n        <NumberKeyboard.Sidebar>\n          <NumberKeyboard.Key size=\"large\" code=\"backspace\" />\n          <NumberKeyboard.Key size=\"large\" code=\"keyboard-hide\" color=\"blue\">\n            完成\n          </NumberKeyboard.Key>\n        </NumberKeyboard.Sidebar>\n      </NumberKeyboard>\n    </>\n  )\n}\n\nfunction IdCardNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出身份证号键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"idCard\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"idCard\"}\n        extraKey=\"X\"\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      >\n        <NumberKeyboard.Header>\n          <NumberKeyboard.Button>完成</NumberKeyboard.Button>\n        </NumberKeyboard.Header>\n      </NumberKeyboard>\n    </>\n  )\n}\n\nfunction TitleNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出带标题的键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"title\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"title\"}\n        title=\"键盘标题\"\n        extraKey=\".\"\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      >\n        <NumberKeyboard.Header>\n          <NumberKeyboard.Button>完成</NumberKeyboard.Button>\n        </NumberKeyboard.Header>\n      </NumberKeyboard>\n    </>\n  )\n}\n\nfunction NumberKeyboardWithKeys(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出配置多个按键的键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"keys\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"keys\"}\n        extraKey={[\"00\", \".\"]}\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      >\n        <NumberKeyboard.Sidebar>\n          <NumberKeyboard.Key size=\"large\" code=\"backspace\" />\n          <NumberKeyboard.Key size=\"large\" code=\"keyboard-hide\" color=\"blue\">\n            完成\n          </NumberKeyboard.Key>\n        </NumberKeyboard.Sidebar>\n      </NumberKeyboard>\n    </>\n  )\n}\n\nfunction RandomNumberKeyboard(props: KeyboardProps) {\n  const { keyboard, onKeyboard, onKeyPress } = props\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹出配置随机数字的键盘\"\n        rightIcon={<ArrowRight />}\n        onClick={() => onKeyboard?.(\"random\")}\n      />\n      <NumberKeyboard\n        open={keyboard === \"random\"}\n        random\n        onKeyPress={onKeyPress}\n        onHide={() => onKeyboard?.(\"\")}\n      />\n    </>\n  )\n}\n\nexport default function NumberKeyboardDemo() {\n  const [keyboard, setKeyboard] = useState(\"basic\")\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState<any>()\n\n  const onKeyPress = (aValue: string | number, code: string) => {\n    setOpen(code !== \"keyboard-hide\")\n    if (code === \"backspace\") {\n      setValue(\"backspace\")\n    } else if (code === \"extra\") {\n      setValue(`输入：${aValue}`)\n    }\n  }\n\n  return (\n    <Page title=\"NumberKeyboard 数字键盘\" className=\"number-keyboard-demo\">\n      <BlockCard>\n        <BasicNumberKeyboard keyboard={keyboard} onKeyboard={setKeyboard} onKeyPress={onKeyPress} />\n        <SidebarNumberKeyboard\n          keyboard={keyboard}\n          onKeyboard={setKeyboard}\n          onKeyPress={onKeyPress}\n        />\n        <IdCardNumberKeyboard\n          keyboard={keyboard}\n          onKeyboard={setKeyboard}\n          onKeyPress={onKeyPress}\n        />\n        <TitleNumberKeyboard keyboard={keyboard} onKeyboard={setKeyboard} onKeyPress={onKeyPress} />\n        <NumberKeyboardWithKeys\n          keyboard={keyboard}\n          onKeyboard={setKeyboard}\n          onKeyPress={onKeyPress}\n        />\n        <RandomNumberKeyboard\n          keyboard={keyboard}\n          onKeyboard={setKeyboard}\n          onKeyPress={onKeyPress}\n        />\n      </BlockCard>\n      <Toast open={open} duration={800} onClose={() => setOpen(false)} children={value} />\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "pagination",
    "description": "数据量过多时，采用分页的形式将数据分隔，每次只加载一个页面。",
    "usage": [
      "import { Pagination } from \"@taroify/core\"\nimport { ArrowLeft, ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicPagination() {\n  const [current, setCurrent] = useState<number>(1)\n  return (\n    <Block title=\"基础用法\">\n      <Pagination current={current} count={10} onChange={(page) => setCurrent(page)} />\n    </Block>\n  )\n}\n\nfunction SimplePagination() {\n  const [current, setCurrent] = useState<number>(1)\n  return (\n    <Block title=\"简单模式\">\n      <Pagination\n        current={current}\n        count={10}\n        mode=\"simple\"\n        onChange={(page) => setCurrent(page)}\n      />\n    </Block>\n  )\n}\n\nfunction PaginationWithEllipses() {\n  const [current, setCurrent] = useState<number>(1)\n  return (\n    <Block title=\"显示省略号\">\n      <Pagination\n        current={current}\n        siblingCount={1}\n        count={13}\n        onChange={(page) => setCurrent(page)}\n      >\n        <Pagination.Item type=\"start-ellipsis\" />\n        <Pagination.Item type=\"end-ellipsis\" />\n      </Pagination>\n    </Block>\n  )\n}\n\nfunction PaginationWithCustomButton() {\n  const [current, setCurrent] = useState<number>(1)\n  return (\n    <Block title=\"自定义按钮\">\n      <Pagination current={current} count={6} onChange={(page) => setCurrent(page)}>\n        <Pagination.Item type=\"previous\">\n          <ArrowLeft />\n        </Pagination.Item>\n        <Pagination.Item type=\"next\">\n          <ArrowRight />\n        </Pagination.Item>\n      </Pagination>\n    </Block>\n  )\n}\n\nexport default function PaginationDemo() {\n  return (\n    <Page title=\"Pagination 分页\" className=\"pagination-demo\">\n      <BasicPagination />\n      <SimplePagination />\n      <PaginationWithEllipses />\n      <PaginationWithCustomButton />\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "pagination",
        "code": "import { Pagination } from \"@taroify/core\"\nimport { ArrowLeft, ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicPagination() {\n  const [current, setCurrent] = useState<number>(1)\n  return (\n    <Block title=\"基础用法\">\n      <Pagination current={current} count={10} onChange={(page) => setCurrent(page)} />\n    </Block>\n  )\n}\n\nfunction SimplePagination() {\n  const [current, setCurrent] = useState<number>(1)\n  return (\n    <Block title=\"简单模式\">\n      <Pagination\n        current={current}\n        count={10}\n        mode=\"simple\"\n        onChange={(page) => setCurrent(page)}\n      />\n    </Block>\n  )\n}\n\nfunction PaginationWithEllipses() {\n  const [current, setCurrent] = useState<number>(1)\n  return (\n    <Block title=\"显示省略号\">\n      <Pagination\n        current={current}\n        siblingCount={1}\n        count={13}\n        onChange={(page) => setCurrent(page)}\n      >\n        <Pagination.Item type=\"start-ellipsis\" />\n        <Pagination.Item type=\"end-ellipsis\" />\n      </Pagination>\n    </Block>\n  )\n}\n\nfunction PaginationWithCustomButton() {\n  const [current, setCurrent] = useState<number>(1)\n  return (\n    <Block title=\"自定义按钮\">\n      <Pagination current={current} count={6} onChange={(page) => setCurrent(page)}>\n        <Pagination.Item type=\"previous\">\n          <ArrowLeft />\n        </Pagination.Item>\n        <Pagination.Item type=\"next\">\n          <ArrowRight />\n        </Pagination.Item>\n      </Pagination>\n    </Block>\n  )\n}\n\nexport default function PaginationDemo() {\n  return (\n    <Page title=\"Pagination 分页\" className=\"pagination-demo\">\n      <BasicPagination />\n      <SimplePagination />\n      <PaginationWithEllipses />\n      <PaginationWithCustomButton />\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "password-input",
    "description": "带网格的输入框组件，可以用于输入密码、短信验证码等场景，通常与[数字键盘](/components/number-keyboard/)组件配合使用。",
    "usage": [
      "import { NumberKeyboard, PasswordInput } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface OpenKeyboardProps {\n  open?: string\n\n  onOpen?(open: string): void\n}\n\nfunction BasicPasswordInput(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput focus value={value} onFocus={() => onOpen?.(\"basic\")} />\n      <NumberKeyboard\n        open={open === \"basic\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction CustomLengthPasswordInput(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput focus length={6} value={value} onFocus={() => onOpen?.(\"length\")} />\n      <NumberKeyboard\n        open={open === \"length\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction GutterPasswordInput(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput focus gutter={10} value={value} onFocus={() => onOpen?.(\"gutter\")} />\n      <NumberKeyboard\n        open={open === \"gutter\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction NoMaskPasswordInput(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput focus mask={false} value={value} onFocus={() => onOpen?.(\"mask\")} />\n      <NumberKeyboard\n        open={open === \"mask\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction PasswordInputWithFeedback(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput\n        focus\n        feedback=\"密码为 6 位数字\"\n        value={value}\n        onFocus={() => onOpen?.(\"feedback\")}\n      />\n      <NumberKeyboard\n        open={open === \"feedback\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nexport default function PasswordInputDemo() {\n  const [open, setOpen] = useState(\"\")\n  return (\n    <Page title=\"PasswordInput 密码输入框\" className=\"password-input-demo\">\n      <Block title=\"基础用法\">\n        <BasicPasswordInput open={open} onOpen={setOpen} />\n      </Block>\n      <Block title=\"自定义长度\">\n        <CustomLengthPasswordInput open={open} onOpen={setOpen} />\n      </Block>\n      <Block title=\"格子间距\">\n        <GutterPasswordInput open={open} onOpen={setOpen} />\n      </Block>\n      <Block title=\"明文展示\">\n        <NoMaskPasswordInput open={open} onOpen={setOpen} />\n      </Block>\n      <Block title=\"提示信息\">\n        <PasswordInputWithFeedback open={open} onOpen={setOpen} />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "password-input",
        "code": "import { NumberKeyboard, PasswordInput } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface OpenKeyboardProps {\n  open?: string\n\n  onOpen?(open: string): void\n}\n\nfunction BasicPasswordInput(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput focus value={value} onFocus={() => onOpen?.(\"basic\")} />\n      <NumberKeyboard\n        open={open === \"basic\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction CustomLengthPasswordInput(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput focus length={6} value={value} onFocus={() => onOpen?.(\"length\")} />\n      <NumberKeyboard\n        open={open === \"length\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction GutterPasswordInput(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput focus gutter={10} value={value} onFocus={() => onOpen?.(\"gutter\")} />\n      <NumberKeyboard\n        open={open === \"gutter\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction NoMaskPasswordInput(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput focus mask={false} value={value} onFocus={() => onOpen?.(\"mask\")} />\n      <NumberKeyboard\n        open={open === \"mask\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nfunction PasswordInputWithFeedback(props: OpenKeyboardProps) {\n  const { open, onOpen } = props\n  const [value, setValue] = useState(\"123\")\n\n  return (\n    <>\n      <PasswordInput\n        focus\n        feedback=\"密码为 6 位数字\"\n        value={value}\n        onFocus={() => onOpen?.(\"feedback\")}\n      />\n      <NumberKeyboard\n        open={open === \"feedback\"}\n        onKeyPress={(key) => setValue(value + key)}\n        onBackspace={() => setValue(value.substring(0, value.length - 1))}\n        onHide={() => onOpen?.(\"\")}\n      />\n    </>\n  )\n}\n\nexport default function PasswordInputDemo() {\n  const [open, setOpen] = useState(\"\")\n  return (\n    <Page title=\"PasswordInput 密码输入框\" className=\"password-input-demo\">\n      <Block title=\"基础用法\">\n        <BasicPasswordInput open={open} onOpen={setOpen} />\n      </Block>\n      <Block title=\"自定义长度\">\n        <CustomLengthPasswordInput open={open} onOpen={setOpen} />\n      </Block>\n      <Block title=\"格子间距\">\n        <GutterPasswordInput open={open} onOpen={setOpen} />\n      </Block>\n      <Block title=\"明文展示\">\n        <NoMaskPasswordInput open={open} onOpen={setOpen} />\n      </Block>\n      <Block title=\"提示信息\">\n        <PasswordInputWithFeedback open={open} onOpen={setOpen} />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "picker",
    "description": "提供多个选项集合供用户选择，支持单列选择和多列级联，通常与[弹出层](/components/popup/)组件配合使用。",
    "usage": [
      "import { Field, Input, Picker, Popup, Toast } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useMemo, useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicPicker() {\n  const columns = useMemo(() => [\n    { label2: \"杭州\", value: \"Hangzhou\" },\n    { label2: \"宁波\", value: \"Ningbo\" },\n    { label2: \"温州\", value: \"Wenzhou\" },\n    { label2: \"绍兴\", value: \"Shaoxing\" },\n    { label2: \"湖州\", value: \"Huzhou\" }\n  ], [])\n\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        title=\"标题\"\n        columns={columns}\n        columnsFieldNames={{ label: \"label2\" }}\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n      </Picker>\n    </>\n  )\n}\n\nfunction DefaultPicker() {\n  const columns = useMemo(() => [\n    { label: \"杭州\", value: \"Hangzhou\" },\n    { label: \"宁波\", value: \"Ningbo\" },\n    { label: \"温州\", value: \"Wenzhou\" },\n    { label: \"绍兴\", value: \"Shaoxing\" },\n    { label: \"湖州\", value: \"Huzhou\" }\n  ], [])\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        defaultValue=\"Wenzhou\"\n        title=\"标题\"\n        columns={columns}\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n      </Picker>\n    </>\n  )\n}\n\nfunction PickerWithMultiColumns() {\n  const columns = useMemo(() => [\n    [\n      { label: \"周一\", value: \"Monday\" },\n      { label: \"周二\", value: \"Tuesday\" },\n      { label: \"周三\", value: \"Wednesday\" },\n      { label: \"周四\", value: \"Thursday\" },\n      { label: \"周五\", value: \"Friday\" }\n    ],\n    [\n      { label: \"上午\", value: \"morning\" },\n      { label: \"下午\", value: \"afternoon\"},\n      { label: \"晚上\", value: \"evening\"}\n    ]\n  ], [])\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        defaultValue={[\"Monday\", \"evening\"]}\n        title=\"标题\"\n        columns={columns}\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n      </Picker>\n    </>\n  )\n}\n\nfunction DisabledPicker() {\n  const columns = useMemo(() => [\n    { label: \"杭州\", value: \"Hangzhou\" },\n    { label: \"宁波\", value: \"Ningbo\" },\n    { label: \"温州\", value: \"Wenzhou\", disabled: true },\n    { label: \"绍兴\", value: \"Shaoxing\" },\n    { label: \"湖州\", value: \"Huzhou\" }\n  ], [])\n  return (\n    <Picker\n      columns={columns}\n      onChange={(value) => Toast.open(`当前值：${value}`)}\n      onConfirm={(value) => Toast.open(`当前值：${value}`)}\n    >\n    </Picker>\n  )\n}\n\nfunction LoadingPicker() {\n  const columns = useMemo(() => [\n    { label: \"杭州\", value: \"Hangzhou\" },\n    { label: \"宁波\", value: \"Ningbo\" },\n    { label: \"温州\", value: \"Wenzhou\" },\n    { label: \"绍兴\", value: \"Shaoxing\" },\n    { label: \"湖州\", value: \"Huzhou\" }\n  ], [])\n\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        loading\n        title=\"标题\"\n        columns={columns}\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n      </Picker>\n    </>\n  )\n}\n\nfunction PickerPopup() {\n  const [value, setValue] = useState(\"\")\n  const [openPicker, setOpenPicker] = useState(false)\n  const columns = useMemo(() => [\n    { label: \"杭州\", value: \"Hangzhou\" },\n    { label: \"宁波\", value: \"Ningbo\" },\n    { label: \"温州\", value: \"Wenzhou\" },\n    { label: \"绍兴\", value: \"Shaoxing\" },\n    { label: \"湖州\", value: \"Huzhou\" }\n  ], [])\n  return (\n    <>\n      <Field label=\"城市\" rightIcon={<ArrowRight />} onClick={() => setOpenPicker(true)}>\n        <Input readonly placeholder=\"选择城市\" value={value} />\n      </Field>\n      <Popup open={openPicker} rounded placement=\"bottom\" onClose={setOpenPicker}>\n        <Popup.Backdrop />\n        <Picker\n          title=\"搭配弹出层使用\"\n          cancelText=\"取消\"\n          confirmText=\"确认\"\n          columns={columns}\n          onCancel={() => setOpenPicker(false)}\n          onConfirm={(values) => {\n            setValue(values as string)\n            setOpenPicker(false)\n          }}\n        >\n        </Picker>\n      </Popup>\n    </>\n  )\n}\n\nfunction ManualPicker() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n        <Picker.Toolbar>\n          <Picker.Button>取消</Picker.Button>\n          <Picker.Title>标题</Picker.Title>\n          <Picker.Button>确认</Picker.Button>\n        </Picker.Toolbar>\n        <Picker.Column>\n          <Picker.Option>周一</Picker.Option>\n          <Picker.Option>周二</Picker.Option>\n          <Picker.Option>周三</Picker.Option>\n          <Picker.Option>周四</Picker.Option>\n          <Picker.Option>周五</Picker.Option>\n        </Picker.Column>\n        <Picker.Column>\n          <Picker.Option>上午</Picker.Option>\n          <Picker.Option>下午</Picker.Option>\n          <Picker.Option>晚上</Picker.Option>\n        </Picker.Column>\n      </Picker>\n    </>\n  )\n}\n\nexport default function PickerDemo() {\n  return (\n    <Page title=\"Picker 选择器\" className=\"picker-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <CustomWrapper>\n          <BasicPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"默认选中项\">\n        <CustomWrapper>\n          <DefaultPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"多列选择\">\n        <CustomWrapper>\n          <PickerWithMultiColumns />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"禁用选项\">\n        <CustomWrapper>\n          <DisabledPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"加载状态\">\n        <CustomWrapper>\n          <LoadingPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"搭配弹出层使用\">\n        <CustomWrapper>\n          <PickerPopup />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"手动控制DOM\">\n        <CustomWrapper>\n          <ManualPicker />\n        </CustomWrapper>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "picker",
        "code": "import { Field, Input, Picker, Popup, Toast } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useMemo, useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicPicker() {\n  const columns = useMemo(() => [\n    { label2: \"杭州\", value: \"Hangzhou\" },\n    { label2: \"宁波\", value: \"Ningbo\" },\n    { label2: \"温州\", value: \"Wenzhou\" },\n    { label2: \"绍兴\", value: \"Shaoxing\" },\n    { label2: \"湖州\", value: \"Huzhou\" }\n  ], [])\n\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        title=\"标题\"\n        columns={columns}\n        columnsFieldNames={{ label: \"label2\" }}\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n      </Picker>\n    </>\n  )\n}\n\nfunction DefaultPicker() {\n  const columns = useMemo(() => [\n    { label: \"杭州\", value: \"Hangzhou\" },\n    { label: \"宁波\", value: \"Ningbo\" },\n    { label: \"温州\", value: \"Wenzhou\" },\n    { label: \"绍兴\", value: \"Shaoxing\" },\n    { label: \"湖州\", value: \"Huzhou\" }\n  ], [])\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        defaultValue=\"Wenzhou\"\n        title=\"标题\"\n        columns={columns}\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n      </Picker>\n    </>\n  )\n}\n\nfunction PickerWithMultiColumns() {\n  const columns = useMemo(() => [\n    [\n      { label: \"周一\", value: \"Monday\" },\n      { label: \"周二\", value: \"Tuesday\" },\n      { label: \"周三\", value: \"Wednesday\" },\n      { label: \"周四\", value: \"Thursday\" },\n      { label: \"周五\", value: \"Friday\" }\n    ],\n    [\n      { label: \"上午\", value: \"morning\" },\n      { label: \"下午\", value: \"afternoon\"},\n      { label: \"晚上\", value: \"evening\"}\n    ]\n  ], [])\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        defaultValue={[\"Monday\", \"evening\"]}\n        title=\"标题\"\n        columns={columns}\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n      </Picker>\n    </>\n  )\n}\n\nfunction DisabledPicker() {\n  const columns = useMemo(() => [\n    { label: \"杭州\", value: \"Hangzhou\" },\n    { label: \"宁波\", value: \"Ningbo\" },\n    { label: \"温州\", value: \"Wenzhou\", disabled: true },\n    { label: \"绍兴\", value: \"Shaoxing\" },\n    { label: \"湖州\", value: \"Huzhou\" }\n  ], [])\n  return (\n    <Picker\n      columns={columns}\n      onChange={(value) => Toast.open(`当前值：${value}`)}\n      onConfirm={(value) => Toast.open(`当前值：${value}`)}\n    >\n    </Picker>\n  )\n}\n\nfunction LoadingPicker() {\n  const columns = useMemo(() => [\n    { label: \"杭州\", value: \"Hangzhou\" },\n    { label: \"宁波\", value: \"Ningbo\" },\n    { label: \"温州\", value: \"Wenzhou\" },\n    { label: \"绍兴\", value: \"Shaoxing\" },\n    { label: \"湖州\", value: \"Huzhou\" }\n  ], [])\n\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        loading\n        title=\"标题\"\n        columns={columns}\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n      </Picker>\n    </>\n  )\n}\n\nfunction PickerPopup() {\n  const [value, setValue] = useState(\"\")\n  const [openPicker, setOpenPicker] = useState(false)\n  const columns = useMemo(() => [\n    { label: \"杭州\", value: \"Hangzhou\" },\n    { label: \"宁波\", value: \"Ningbo\" },\n    { label: \"温州\", value: \"Wenzhou\" },\n    { label: \"绍兴\", value: \"Shaoxing\" },\n    { label: \"湖州\", value: \"Huzhou\" }\n  ], [])\n  return (\n    <>\n      <Field label=\"城市\" rightIcon={<ArrowRight />} onClick={() => setOpenPicker(true)}>\n        <Input readonly placeholder=\"选择城市\" value={value} />\n      </Field>\n      <Popup open={openPicker} rounded placement=\"bottom\" onClose={setOpenPicker}>\n        <Popup.Backdrop />\n        <Picker\n          title=\"搭配弹出层使用\"\n          cancelText=\"取消\"\n          confirmText=\"确认\"\n          columns={columns}\n          onCancel={() => setOpenPicker(false)}\n          onConfirm={(values) => {\n            setValue(values as string)\n            setOpenPicker(false)\n          }}\n        >\n        </Picker>\n      </Popup>\n    </>\n  )\n}\n\nfunction ManualPicker() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Picker\n        onChange={(value) => Toast.open(`当前值：${value}`)}\n        onConfirm={(value) => Toast.open(`当前值：${value}`)}\n      >\n        <Picker.Toolbar>\n          <Picker.Button>取消</Picker.Button>\n          <Picker.Title>标题</Picker.Title>\n          <Picker.Button>确认</Picker.Button>\n        </Picker.Toolbar>\n        <Picker.Column>\n          <Picker.Option>周一</Picker.Option>\n          <Picker.Option>周二</Picker.Option>\n          <Picker.Option>周三</Picker.Option>\n          <Picker.Option>周四</Picker.Option>\n          <Picker.Option>周五</Picker.Option>\n        </Picker.Column>\n        <Picker.Column>\n          <Picker.Option>上午</Picker.Option>\n          <Picker.Option>下午</Picker.Option>\n          <Picker.Option>晚上</Picker.Option>\n        </Picker.Column>\n      </Picker>\n    </>\n  )\n}\n\nexport default function PickerDemo() {\n  return (\n    <Page title=\"Picker 选择器\" className=\"picker-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <CustomWrapper>\n          <BasicPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"默认选中项\">\n        <CustomWrapper>\n          <DefaultPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"多列选择\">\n        <CustomWrapper>\n          <PickerWithMultiColumns />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"禁用选项\">\n        <CustomWrapper>\n          <DisabledPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"加载状态\">\n        <CustomWrapper>\n          <LoadingPicker />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"搭配弹出层使用\">\n        <CustomWrapper>\n          <PickerPopup />\n        </CustomWrapper>\n      </Block>\n      <Block variant=\"card\" title=\"手动控制DOM\">\n        <CustomWrapper>\n          <ManualPicker />\n        </CustomWrapper>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "popup",
    "description": "弹出层容器，用于展示弹窗、信息提示等内容，支持多个弹出层叠加展示。",
    "usage": [
      "import { ScrollView } from \"@tarojs/components\"\nimport { Cell, Popup } from \"@taroify/core\"\nimport { PopupPlacement } from \"@taroify/core/popup\"\nimport { ArrowRight, Close } from \"@taroify/icons\"\nimport { CSSProperties, useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicPopup() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell clickable title=\"显示遮盖层\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)} />\n      <Popup\n        open={open}\n        style={{\n          padding: \"30px 50px\",\n        }}\n        onClose={setOpen}\n      >\n        内容\n      </Popup>\n    </>\n  )\n}\n\nfunction CenterRoundPopup() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"圆角弹窗（居中）\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Popup\n        open={open}\n        style={{\n          padding: \"64px\",\n        }}\n        onClose={setOpen}\n        rounded\n      >\n        内容\n      </Popup>\n    </>\n  )\n}\n\nfunction LockPopup() {\n  const [open, setOpen] = useState(false)\n  const [data] = useState(new Array(30).fill(0))\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹窗（禁止滚动穿透）\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Popup\n        open={open}\n        style={{\n          height: \"30%\",\n        }}\n        rounded\n        lock\n        placement=\"bottom\"\n        onClose={setOpen}\n      >\n        <ScrollView className=\"popup-demo-scroll\" scrollY>\n          {data.map((_, index) => (\n            <Cell key={index}>内容-{index}</Cell>\n          ))}\n        </ScrollView>\n      </Popup>\n    </>\n  )\n}\n\ninterface OpenOptions {\n  open?: boolean\n  closeable?: boolean\n  customer?: boolean\n  style?: CSSProperties\n  placement?: PopupPlacement\n  rounded?: boolean\n}\n\nexport default function PopupDemo() {\n  const [options, setOptions] = useState<OpenOptions>({})\n\n  function handleOpen({ placement, rounded, closeable, customer }: OpenOptions) {\n    const openOptions: OpenOptions = {\n      open: true,\n      placement,\n      rounded,\n      closeable,\n      customer,\n    }\n    if (placement === \"left\" || placement === \"right\") {\n      openOptions.style = {\n        height: \"100%\",\n        width: \"40%\",\n      }\n    } else if (placement) {\n      openOptions.style = { height: \"30%\" }\n    }\n    setOptions({\n      ...options,\n      ...openOptions,\n    })\n  }\n\n  return (\n    <Page title=\"Popup 弹出层\" className=\"popup-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicPopup />\n      </Block>\n      <Block variant=\"card\" title=\"弹出位置\">\n        <Cell\n          clickable\n          title=\"顶部弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"top\" })}\n        />\n        <Cell\n          clickable\n          title=\"底部弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"bottom\" })}\n        />\n        <Cell\n          clickable\n          title=\"左侧弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"left\" })}\n        />\n        <Cell\n          clickable\n          title=\"右侧弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"right\" })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"关闭按钮\">\n        <Cell\n          clickable\n          title=\"顶部弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"top\", closeable: true })}\n        />\n        <Cell\n          clickable\n          title=\"底部弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"bottom\", closeable: true })}\n        />\n        <Cell\n          clickable\n          title=\"左侧弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"left\", closeable: true })}\n        />\n        <Cell\n          clickable\n          title=\"右侧弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"right\", closeable: true })}\n        />\n        <Cell\n          clickable\n          title=\"自定义图标\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"bottom\", closeable: true, customer: true })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"圆角弹窗\">\n        <CenterRoundPopup />\n        <Cell\n          clickable\n          title=\"圆角弹窗（底部）\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"bottom\", rounded: true })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"禁止滚动穿透\">\n        <LockPopup />\n      </Block>\n      <Popup\n        open={options.open}\n        placement={options.placement}\n        rounded={options.rounded}\n        style={options.style}\n        onClose={() =>\n          setOptions({\n            ...options,\n            open: false,\n          })\n        }\n      >\n        <Popup.Backdrop />\n        {options.closeable && !options.customer && <Popup.Close />}\n        {options.closeable && options.customer && (\n          <Popup.Close>\n            <Close />\n          </Popup.Close>\n        )}\n      </Popup>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "popup",
        "code": "import { ScrollView } from \"@tarojs/components\"\nimport { Cell, Popup } from \"@taroify/core\"\nimport { PopupPlacement } from \"@taroify/core/popup\"\nimport { ArrowRight, Close } from \"@taroify/icons\"\nimport { CSSProperties, useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicPopup() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell clickable title=\"显示遮盖层\" rightIcon={<ArrowRight />} onClick={() => setOpen(true)} />\n      <Popup\n        open={open}\n        style={{\n          padding: \"30px 50px\",\n        }}\n        onClose={setOpen}\n      >\n        内容\n      </Popup>\n    </>\n  )\n}\n\nfunction CenterRoundPopup() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"圆角弹窗（居中）\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Popup\n        open={open}\n        style={{\n          padding: \"64px\",\n        }}\n        onClose={setOpen}\n        rounded\n      >\n        内容\n      </Popup>\n    </>\n  )\n}\n\nfunction LockPopup() {\n  const [open, setOpen] = useState(false)\n  const [data] = useState(new Array(30).fill(0))\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"弹窗（禁止滚动穿透）\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <Popup\n        open={open}\n        style={{\n          height: \"30%\",\n        }}\n        rounded\n        lock\n        placement=\"bottom\"\n        onClose={setOpen}\n      >\n        <ScrollView className=\"popup-demo-scroll\" scrollY>\n          {data.map((_, index) => (\n            <Cell key={index}>内容-{index}</Cell>\n          ))}\n        </ScrollView>\n      </Popup>\n    </>\n  )\n}\n\ninterface OpenOptions {\n  open?: boolean\n  closeable?: boolean\n  customer?: boolean\n  style?: CSSProperties\n  placement?: PopupPlacement\n  rounded?: boolean\n}\n\nexport default function PopupDemo() {\n  const [options, setOptions] = useState<OpenOptions>({})\n\n  function handleOpen({ placement, rounded, closeable, customer }: OpenOptions) {\n    const openOptions: OpenOptions = {\n      open: true,\n      placement,\n      rounded,\n      closeable,\n      customer,\n    }\n    if (placement === \"left\" || placement === \"right\") {\n      openOptions.style = {\n        height: \"100%\",\n        width: \"40%\",\n      }\n    } else if (placement) {\n      openOptions.style = { height: \"30%\" }\n    }\n    setOptions({\n      ...options,\n      ...openOptions,\n    })\n  }\n\n  return (\n    <Page title=\"Popup 弹出层\" className=\"popup-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicPopup />\n      </Block>\n      <Block variant=\"card\" title=\"弹出位置\">\n        <Cell\n          clickable\n          title=\"顶部弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"top\" })}\n        />\n        <Cell\n          clickable\n          title=\"底部弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"bottom\" })}\n        />\n        <Cell\n          clickable\n          title=\"左侧弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"left\" })}\n        />\n        <Cell\n          clickable\n          title=\"右侧弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"right\" })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"关闭按钮\">\n        <Cell\n          clickable\n          title=\"顶部弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"top\", closeable: true })}\n        />\n        <Cell\n          clickable\n          title=\"底部弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"bottom\", closeable: true })}\n        />\n        <Cell\n          clickable\n          title=\"左侧弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"left\", closeable: true })}\n        />\n        <Cell\n          clickable\n          title=\"右侧弹出\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"right\", closeable: true })}\n        />\n        <Cell\n          clickable\n          title=\"自定义图标\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"bottom\", closeable: true, customer: true })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"圆角弹窗\">\n        <CenterRoundPopup />\n        <Cell\n          clickable\n          title=\"圆角弹窗（底部）\"\n          rightIcon={<ArrowRight />}\n          onClick={() => handleOpen({ placement: \"bottom\", rounded: true })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"禁止滚动穿透\">\n        <LockPopup />\n      </Block>\n      <Popup\n        open={options.open}\n        placement={options.placement}\n        rounded={options.rounded}\n        style={options.style}\n        onClose={() =>\n          setOptions({\n            ...options,\n            open: false,\n          })\n        }\n      >\n        <Popup.Backdrop />\n        {options.closeable && !options.customer && <Popup.Close />}\n        {options.closeable && options.customer && (\n          <Popup.Close>\n            <Close />\n          </Popup.Close>\n        )}\n      </Popup>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "progress",
    "description": "用于展示操作的当前进度。",
    "usage": [
      "import { Progress } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicProgress() {\n  return (\n    <Block title=\"基础用法\">\n      <Progress percent={50} />\n    </Block>\n  )\n}\n\nfunction StripedProgress() {\n  return (\n    <Block title=\"条纹线条\">\n      <Progress percent={50} striped />\n    </Block>\n  )\n}\n\nfunction AnimatedProgress() {\n  return (\n    <Block title=\"动画条纹\">\n      <Progress percent={50} striped animated />\n    </Block>\n  )\n}\n\nfunction InactiveProgress() {\n  return (\n    <Block title=\"置灰\">\n      <Progress percent={50} inactive />\n    </Block>\n  )\n}\n\nfunction ProgressWithCustomColors() {\n  return (\n    <Block title=\"样式定制\">\n      <Progress className=\"custom-color1\" percent={25} />\n      <Progress className=\"custom-color2\" percent={50} />\n      <Progress className=\"custom-color3\" percent={75} />\n    </Block>\n  )\n}\n\nexport default function ProgressDemo() {\n  return (\n    <Page title=\"Progress 进度条\" className=\"progress-demo\">\n      <BasicProgress />\n      <StripedProgress />\n      <AnimatedProgress />\n      <InactiveProgress />\n      <ProgressWithCustomColors />\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "progress",
        "code": "import { Progress } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicProgress() {\n  return (\n    <Block title=\"基础用法\">\n      <Progress percent={50} />\n    </Block>\n  )\n}\n\nfunction StripedProgress() {\n  return (\n    <Block title=\"条纹线条\">\n      <Progress percent={50} striped />\n    </Block>\n  )\n}\n\nfunction AnimatedProgress() {\n  return (\n    <Block title=\"动画条纹\">\n      <Progress percent={50} striped animated />\n    </Block>\n  )\n}\n\nfunction InactiveProgress() {\n  return (\n    <Block title=\"置灰\">\n      <Progress percent={50} inactive />\n    </Block>\n  )\n}\n\nfunction ProgressWithCustomColors() {\n  return (\n    <Block title=\"样式定制\">\n      <Progress className=\"custom-color1\" percent={25} />\n      <Progress className=\"custom-color2\" percent={50} />\n      <Progress className=\"custom-color3\" percent={75} />\n    </Block>\n  )\n}\n\nexport default function ProgressDemo() {\n  return (\n    <Page title=\"Progress 进度条\" className=\"progress-demo\">\n      <BasicProgress />\n      <StripedProgress />\n      <AnimatedProgress />\n      <InactiveProgress />\n      <ProgressWithCustomColors />\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "pull-refresh",
    "description": "用于提供下拉刷新的交互操作。",
    "usage": [
      "import { Image, PullRefresh, Tabs } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { usePageScroll } from \"@tarojs/taro\"\nimport { useState } from \"react\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicPullRefresh() {\n  const [loading, setLoading] = useState(false)\n  const [counter, setCounter] = useState(0)\n  const [reachTop, setReachTop] = useState(true)\n\n  usePageScroll(({ scrollTop }) => setReachTop(scrollTop === 0))\n\n  return (\n    <PullRefresh\n      loading={loading}\n      reachTop={reachTop}\n      onRefresh={() => {\n        setLoading(true)\n        setTimeout(() => {\n          setCounter(counter + 1)\n          setLoading(false)\n        }, 1000)\n      }}\n    >\n      <View className=\"pull-text\">{counter ? \"刷新次数：\" + counter : \"下拉试试\"}</View>\n    </PullRefresh>\n  )\n}\n\nfunction CompletedPullRefresh() {\n  const [loading, setLoading] = useState(false)\n  const [counter, setCounter] = useState(0)\n  const [reachTop, setReachTop] = useState(true)\n\n  usePageScroll(({ scrollTop }) => setReachTop(scrollTop === 0))\n\n  return (\n    <PullRefresh\n      loading={loading}\n      reachTop={reachTop}\n      onRefresh={() => {\n        setLoading(true)\n        setTimeout(() => {\n          setLoading(false)\n          setCounter(counter + 1)\n        }, 1000)\n      }}\n    >\n      <PullRefresh.Completed>刷新成功</PullRefresh.Completed>\n      <View className=\"pull-text\">{counter ? \"刷新次数：\" + counter : \"下拉试试\"}</View>\n    </PullRefresh>\n  )\n}\n\nfunction CustomPullRefresh() {\n  const [loading, setLoading] = useState(false)\n  const [counter, setCounter] = useState(0)\n  const [reachTop, setReachTop] = useState(true)\n\n  usePageScroll(({ scrollTop }) => setReachTop(scrollTop === 0))\n\n  return (\n    <PullRefresh\n      loading={loading}\n      headHeight={80}\n      reachTop={reachTop}\n      onRefresh={() => {\n        setLoading(true)\n        setTimeout(() => {\n          setCounter(counter + 1)\n          setLoading(false)\n        }, 1000)\n      }}\n    >\n      <PullRefresh.Pulling>\n        {({ distance = 0 }) => (\n          <Image\n            className=\"doge\"\n            style={{ transform: `scale(${distance / 80})` }}\n            src=\"https://img.yzcdn.cn/vant/doge.png\"\n          />\n        )}\n      </PullRefresh.Pulling>\n      <PullRefresh.Loosing>\n        <Image className=\"doge\" src=\"https://img.yzcdn.cn/vant/doge.png\" />\n      </PullRefresh.Loosing>\n      <PullRefresh.Loading>\n        <Image className=\"doge\" src=\"https://img.yzcdn.cn/vant/doge-fire.jpg\" />\n      </PullRefresh.Loading>\n      <View className=\"pull-text\">{counter ? \"刷新次数：\" + counter : \"下拉试试\"}</View>\n    </PullRefresh>\n  )\n}\n\nexport default function PullRefreshDemo() {\n  const [tab, setTab] = useState(0)\n  return (\n    <Page title=\"PullRefresh 下拉刷新\" className=\"pull-refresh-demo\">\n      <Tabs value={tab} onChange={setTab}>\n        <Tabs.TabPane title=\"基本用法\">\n          <CustomWrapper>\n            <BasicPullRefresh />\n          </CustomWrapper>\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"完成提示\">\n          <CustomWrapper>\n            <CompletedPullRefresh />\n          </CustomWrapper>\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义提示\">\n          <CustomWrapper>\n            <CustomPullRefresh />\n          </CustomWrapper>\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "pull-refresh",
        "code": "import { Image, PullRefresh, Tabs } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { usePageScroll } from \"@tarojs/taro\"\nimport { useState } from \"react\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicPullRefresh() {\n  const [loading, setLoading] = useState(false)\n  const [counter, setCounter] = useState(0)\n  const [reachTop, setReachTop] = useState(true)\n\n  usePageScroll(({ scrollTop }) => setReachTop(scrollTop === 0))\n\n  return (\n    <PullRefresh\n      loading={loading}\n      reachTop={reachTop}\n      onRefresh={() => {\n        setLoading(true)\n        setTimeout(() => {\n          setCounter(counter + 1)\n          setLoading(false)\n        }, 1000)\n      }}\n    >\n      <View className=\"pull-text\">{counter ? \"刷新次数：\" + counter : \"下拉试试\"}</View>\n    </PullRefresh>\n  )\n}\n\nfunction CompletedPullRefresh() {\n  const [loading, setLoading] = useState(false)\n  const [counter, setCounter] = useState(0)\n  const [reachTop, setReachTop] = useState(true)\n\n  usePageScroll(({ scrollTop }) => setReachTop(scrollTop === 0))\n\n  return (\n    <PullRefresh\n      loading={loading}\n      reachTop={reachTop}\n      onRefresh={() => {\n        setLoading(true)\n        setTimeout(() => {\n          setLoading(false)\n          setCounter(counter + 1)\n        }, 1000)\n      }}\n    >\n      <PullRefresh.Completed>刷新成功</PullRefresh.Completed>\n      <View className=\"pull-text\">{counter ? \"刷新次数：\" + counter : \"下拉试试\"}</View>\n    </PullRefresh>\n  )\n}\n\nfunction CustomPullRefresh() {\n  const [loading, setLoading] = useState(false)\n  const [counter, setCounter] = useState(0)\n  const [reachTop, setReachTop] = useState(true)\n\n  usePageScroll(({ scrollTop }) => setReachTop(scrollTop === 0))\n\n  return (\n    <PullRefresh\n      loading={loading}\n      headHeight={80}\n      reachTop={reachTop}\n      onRefresh={() => {\n        setLoading(true)\n        setTimeout(() => {\n          setCounter(counter + 1)\n          setLoading(false)\n        }, 1000)\n      }}\n    >\n      <PullRefresh.Pulling>\n        {({ distance = 0 }) => (\n          <Image\n            className=\"doge\"\n            style={{ transform: `scale(${distance / 80})` }}\n            src=\"https://img.yzcdn.cn/vant/doge.png\"\n          />\n        )}\n      </PullRefresh.Pulling>\n      <PullRefresh.Loosing>\n        <Image className=\"doge\" src=\"https://img.yzcdn.cn/vant/doge.png\" />\n      </PullRefresh.Loosing>\n      <PullRefresh.Loading>\n        <Image className=\"doge\" src=\"https://img.yzcdn.cn/vant/doge-fire.jpg\" />\n      </PullRefresh.Loading>\n      <View className=\"pull-text\">{counter ? \"刷新次数：\" + counter : \"下拉试试\"}</View>\n    </PullRefresh>\n  )\n}\n\nexport default function PullRefreshDemo() {\n  const [tab, setTab] = useState(0)\n  return (\n    <Page title=\"PullRefresh 下拉刷新\" className=\"pull-refresh-demo\">\n      <Tabs value={tab} onChange={setTab}>\n        <Tabs.TabPane title=\"基本用法\">\n          <CustomWrapper>\n            <BasicPullRefresh />\n          </CustomWrapper>\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"完成提示\">\n          <CustomWrapper>\n            <CompletedPullRefresh />\n          </CustomWrapper>\n        </Tabs.TabPane>\n        <Tabs.TabPane title=\"自定义提示\">\n          <CustomWrapper>\n            <CustomPullRefresh />\n          </CustomWrapper>\n        </Tabs.TabPane>\n      </Tabs>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "radio",
    "description": "在一组备选项中进行单选。",
    "usage": [
      "import { Cell, Image, Radio } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction CustomIconRadio() {\n  const [value, setValue] = useState(\"1\")\n  return (\n    <Radio.Group value={value} onChange={setValue}>\n      <Radio\n        name=\"1\"\n        icon={\n          <Image\n            src={`https://img.yzcdn.cn/vant/user-${value === \"1\" ? \"active\" : \"inactive\"}.png`}\n            style={{\n              width: \"25px\",\n              height: \"20px\",\n            }}\n          />\n        }\n      >\n        单选框 1\n      </Radio>\n      <Radio\n        name=\"2\"\n        icon={\n          <Image\n            src={`https://img.yzcdn.cn/vant/user-${value === \"2\" ? \"active\" : \"inactive\"}.png`}\n            style={{\n              width: \"25px\",\n              height: \"20px\",\n            }}\n          />\n        }\n      >\n        单选框 1\n      </Radio>\n    </Radio.Group>\n  )\n}\n\nexport default function RadioDemo() {\n  return (\n    <Page title=\"Radio 单选框\" className=\"radio-demo\">\n      <Block title=\"基础用法\">\n        <Radio.Group defaultValue=\"1\">\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"水平排列\">\n        <Radio.Group defaultValue=\"1\" direction=\"horizontal\">\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"禁用状态\">\n        <Radio.Group defaultValue=\"1\" disabled>\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"自定义形状\">\n        <Radio.Group defaultValue=\"1\">\n          <Radio name=\"1\" shape=\"square\">\n            单选框 1\n          </Radio>\n          <Radio name=\"2\" shape=\"square\">\n            单选框 2\n          </Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Radio.Group className=\"custom-color\" defaultValue=\"1\">\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"自定义大小\">\n        <Radio.Group defaultValue=\"1\" size={24}>\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"自定义图标\">\n        <CustomIconRadio />\n      </Block>\n      <Block title=\"与 Cell 组件一起使用\" className=\"radio-cell-group\">\n        <Radio.Group defaultValue=\"1\">\n          <Cell.Group clickable>\n            <Cell title=\"单选框 1\">\n              <Radio name=\"1\" />\n            </Cell>\n            <Cell title=\"单选框 2\">\n              <Radio name=\"2\" />\n            </Cell>\n          </Cell.Group>\n        </Radio.Group>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "radio",
        "code": "import { Cell, Image, Radio } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction CustomIconRadio() {\n  const [value, setValue] = useState(\"1\")\n  return (\n    <Radio.Group value={value} onChange={setValue}>\n      <Radio\n        name=\"1\"\n        icon={\n          <Image\n            src={`https://img.yzcdn.cn/vant/user-${value === \"1\" ? \"active\" : \"inactive\"}.png`}\n            style={{\n              width: \"25px\",\n              height: \"20px\",\n            }}\n          />\n        }\n      >\n        单选框 1\n      </Radio>\n      <Radio\n        name=\"2\"\n        icon={\n          <Image\n            src={`https://img.yzcdn.cn/vant/user-${value === \"2\" ? \"active\" : \"inactive\"}.png`}\n            style={{\n              width: \"25px\",\n              height: \"20px\",\n            }}\n          />\n        }\n      >\n        单选框 1\n      </Radio>\n    </Radio.Group>\n  )\n}\n\nexport default function RadioDemo() {\n  return (\n    <Page title=\"Radio 单选框\" className=\"radio-demo\">\n      <Block title=\"基础用法\">\n        <Radio.Group defaultValue=\"1\">\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"水平排列\">\n        <Radio.Group defaultValue=\"1\" direction=\"horizontal\">\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"禁用状态\">\n        <Radio.Group defaultValue=\"1\" disabled>\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"自定义形状\">\n        <Radio.Group defaultValue=\"1\">\n          <Radio name=\"1\" shape=\"square\">\n            单选框 1\n          </Radio>\n          <Radio name=\"2\" shape=\"square\">\n            单选框 2\n          </Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Radio.Group className=\"custom-color\" defaultValue=\"1\">\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"自定义大小\">\n        <Radio.Group defaultValue=\"1\" size={24}>\n          <Radio name=\"1\">单选框 1</Radio>\n          <Radio name=\"2\">单选框 2</Radio>\n        </Radio.Group>\n      </Block>\n      <Block title=\"自定义图标\">\n        <CustomIconRadio />\n      </Block>\n      <Block title=\"与 Cell 组件一起使用\" className=\"radio-cell-group\">\n        <Radio.Group defaultValue=\"1\">\n          <Cell.Group clickable>\n            <Cell title=\"单选框 1\">\n              <Radio name=\"1\" />\n            </Cell>\n            <Cell title=\"单选框 2\">\n              <Radio name=\"2\" />\n            </Cell>\n          </Cell.Group>\n        </Radio.Group>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "rate",
    "description": "用于对事物进行评级操作。",
    "usage": [
      "import { Rate } from \"@taroify/core\"\nimport { Like, LikeOutlined, Star } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function RateDemo() {\n  return (\n    <Page title=\"Rate 评分\" className=\"rate-demo\">\n      <Block title=\"基础用法\">\n        <Rate defaultValue={3} />\n      </Block>\n      <Block title=\"自定义图标\">\n        <Rate defaultValue={3} icon={<Like />} emptyIcon={<LikeOutlined />} />\n      </Block>\n      <Block title=\"自定义样式\">\n        <Rate className=\"custom-color\" defaultValue={3} allowHalf size={25} emptyIcon={<Star />} />\n      </Block>\n      <Block title=\"半星\">\n        <Rate defaultValue={3} allowHalf />\n      </Block>\n      <Block title=\"自定义数量\">\n        <Rate defaultValue={3} count={6} />\n      </Block>\n      <Block title=\"禁用状态\">\n        <Rate defaultValue={3} disabled />\n      </Block>\n      <Block title=\"只读状态\">\n        <Rate defaultValue={3} readonly />\n      </Block>\n      <Block title=\"只读状态显示小数\">\n        <Rate defaultValue={3.3} readonly allowHalf />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "rate",
        "code": "import { Rate } from \"@taroify/core\"\nimport { Like, LikeOutlined, Star } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function RateDemo() {\n  return (\n    <Page title=\"Rate 评分\" className=\"rate-demo\">\n      <Block title=\"基础用法\">\n        <Rate defaultValue={3} />\n      </Block>\n      <Block title=\"自定义图标\">\n        <Rate defaultValue={3} icon={<Like />} emptyIcon={<LikeOutlined />} />\n      </Block>\n      <Block title=\"自定义样式\">\n        <Rate className=\"custom-color\" defaultValue={3} allowHalf size={25} emptyIcon={<Star />} />\n      </Block>\n      <Block title=\"半星\">\n        <Rate defaultValue={3} allowHalf />\n      </Block>\n      <Block title=\"自定义数量\">\n        <Rate defaultValue={3} count={6} />\n      </Block>\n      <Block title=\"禁用状态\">\n        <Rate defaultValue={3} disabled />\n      </Block>\n      <Block title=\"只读状态\">\n        <Rate defaultValue={3} readonly />\n      </Block>\n      <Block title=\"只读状态显示小数\">\n        <Rate defaultValue={3.3} readonly allowHalf />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "rolling-text",
    "description": "文本翻滚动效，可以翻滚数字和其他类型文本。",
    "usage": [
      "import {useRef} from \"react\";\nimport {View} from '@tarojs/components'\nimport {RollingText, Button} from \"@taroify/core\"\nimport type {RollingTextRef} from '@taroify/core/rolling-text'\nimport Page from \"../../../components/page\"\nimport Block from \"../../../components/block\"\nimport \"./index.scss\"\n\n\nfunction BasicRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} targetNum={123} autoStart={false}/>\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>向下翻滚</Button>\n      </View>\n    </View>\n  )\n}\n\nfunction SetDirectionRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} targetNum={432} autoStart={false} direction=\"up\"/>\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>向上翻滚</Button>\n      </View>\n    </View>\n  )\n}\n\nfunction StopOrderRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} targetNum={54321} autoStart={false} stopOrder='rtl'/>\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>从个位停止</Button>\n      </View>\n    </View>\n  )\n}\n\nconst textList = [\n  'aaaaa',\n  'bbbbb',\n  'ccccc',\n  'ddddd',\n  'eeeee',\n  'fffff',\n  'ggggg',\n]\n\nfunction TextListRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} textList={textList} duration={1} autoStart={false} />\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>开始</Button>\n      </View>\n    </View>\n  )\n}\n\nfunction CustomerRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} className='my-rolling-text' height={54} startNum={12345} targetNum={54321} autoStart={false} />\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>开始</Button>\n      </View>\n    </View>\n  )\n}\n\nfunction HandRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const start = () => {\n    ref.current?.start();\n  }\n\n  const reset = () => {\n    ref.current?.reset();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} className='my-rolling-text' height={54} startNum={0} targetNum={54321} autoStart={false} />\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={start}>开始</Button>\n        <Button color=\"primary\" className='rolling-text-right' onClick={reset}>重置</Button>\n      </View>\n    </View>\n  )\n}\n\nexport default function RollingTextDemo() {\n  return (\n    <Page title=\"RollingText 翻滚文本动效\" className=\"rolling-text\">\n      <Block title=\"基础用法\">\n        <BasicRollingText/>\n      </Block>\n      <Block title=\"设置翻滚方向\">\n        <SetDirectionRollingText/>\n      </Block>\n      <Block title=\"设置各数位停止顺序\">\n        <StopOrderRollingText/>\n      </Block>\n      <Block title=\"翻转非数字内容\">\n        <TextListRollingText/>\n      </Block>\n      <Block title=\"自定义样式\">\n        <CustomerRollingText/>\n      </Block>\n      <Block title=\"手动控制\">\n        <HandRollingText/>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "rolling-text",
        "code": "import {useRef} from \"react\";\nimport {View} from '@tarojs/components'\nimport {RollingText, Button} from \"@taroify/core\"\nimport type {RollingTextRef} from '@taroify/core/rolling-text'\nimport Page from \"../../../components/page\"\nimport Block from \"../../../components/block\"\nimport \"./index.scss\"\n\n\nfunction BasicRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} targetNum={123} autoStart={false}/>\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>向下翻滚</Button>\n      </View>\n    </View>\n  )\n}\n\nfunction SetDirectionRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} targetNum={432} autoStart={false} direction=\"up\"/>\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>向上翻滚</Button>\n      </View>\n    </View>\n  )\n}\n\nfunction StopOrderRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} targetNum={54321} autoStart={false} stopOrder='rtl'/>\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>从个位停止</Button>\n      </View>\n    </View>\n  )\n}\n\nconst textList = [\n  'aaaaa',\n  'bbbbb',\n  'ccccc',\n  'ddddd',\n  'eeeee',\n  'fffff',\n  'ggggg',\n]\n\nfunction TextListRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} textList={textList} duration={1} autoStart={false} />\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>开始</Button>\n      </View>\n    </View>\n  )\n}\n\nfunction CustomerRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const onClick = () => {\n    ref.current?.start();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} className='my-rolling-text' height={54} startNum={12345} targetNum={54321} autoStart={false} />\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={onClick}>开始</Button>\n      </View>\n    </View>\n  )\n}\n\nfunction HandRollingText() {\n  const ref = useRef<RollingTextRef>()\n\n  const start = () => {\n    ref.current?.start();\n  }\n\n  const reset = () => {\n    ref.current?.reset();\n  }\n\n  return (\n    <View>\n      <RollingText ref={ref} className='my-rolling-text' height={54} startNum={0} targetNum={54321} autoStart={false} />\n      <View className='rolling-text-btn'>\n        <Button color=\"primary\" onClick={start}>开始</Button>\n        <Button color=\"primary\" className='rolling-text-right' onClick={reset}>重置</Button>\n      </View>\n    </View>\n  )\n}\n\nexport default function RollingTextDemo() {\n  return (\n    <Page title=\"RollingText 翻滚文本动效\" className=\"rolling-text\">\n      <Block title=\"基础用法\">\n        <BasicRollingText/>\n      </Block>\n      <Block title=\"设置翻滚方向\">\n        <SetDirectionRollingText/>\n      </Block>\n      <Block title=\"设置各数位停止顺序\">\n        <StopOrderRollingText/>\n      </Block>\n      <Block title=\"翻转非数字内容\">\n        <TextListRollingText/>\n      </Block>\n      <Block title=\"自定义样式\">\n        <CustomerRollingText/>\n      </Block>\n      <Block title=\"手动控制\">\n        <HandRollingText/>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "safe-area",
    "description": "用于将其内容放置在视口的安全区域中。",
    "usage": [
      "import { SafeArea } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport Page from \"../../../components/page\"\nimport lorem from \"../../../utils/lorem\"\n\nimport \"./index.scss\"\n\nexport default function SafeAreaDemo() {\n  return (\n    <Page title=\"SafeArea 安全区域\" className=\"safe-area-demo\">\n      <SafeArea position=\"top\" />\n      <View>{lorem.generateParagraphs(10)}</View>\n      <SafeArea position=\"bottom\" />\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "safe-area",
        "code": "import { SafeArea } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport Page from \"../../../components/page\"\nimport lorem from \"../../../utils/lorem\"\n\nimport \"./index.scss\"\n\nexport default function SafeAreaDemo() {\n  return (\n    <Page title=\"SafeArea 安全区域\" className=\"safe-area-demo\">\n      <SafeArea position=\"top\" />\n      <View>{lorem.generateParagraphs(10)}</View>\n      <SafeArea position=\"bottom\" />\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "search",
    "description": "用于搜索场景的输入框组件。",
    "usage": [
      "import { Search, Toast } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSearch() {\n  const [value, setValue] = useState(\"\")\n  return (\n    <Search\n      value={value}\n      placeholder=\"请输入搜索关键词\"\n      onChange={(e) => setValue(e.detail.value)}\n    />\n  )\n}\n\nfunction SearchWithEvents() {\n  const [value, setValue] = useState(\"\")\n  const [open, setOpen] = useState(false)\n\n  return (\n    <>\n      <Toast open={open} onClose={() => setOpen(false)}>\n        取消\n      </Toast>\n      <Search\n        value={value}\n        placeholder=\"请输入搜索关键词\"\n        action\n        onChange={(e) => setValue(e.detail.value)}\n        onCancel={() => setOpen(true)}\n      />\n    </>\n  )\n}\n\nfunction InputCenterSearch() {\n  const [value, setValue] = useState(\"\")\n  return (\n    <Search\n      value={value}\n      placeholder=\"请输入搜索关键词\"\n      inputAlign=\"center\"\n      onChange={(e) => setValue(e.detail.value)}\n    />\n  )\n}\n\nfunction DisabledSearch() {\n  return <Search disabled placeholder=\"请输入搜索关键词\" />\n}\n\nfunction BackgroundSearch() {\n  return <Search className=\"background\" shape=\"rounded\" placeholder=\"请输入搜索关键词\" />\n}\n\nfunction CustomSearch() {\n  const [value, setValue] = useState(\"\")\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Toast open={open} onClose={() => setOpen(false)}>\n        搜索\n      </Toast>\n      <Search\n        value={value}\n        label=\"地址\"\n        placeholder=\"请输入搜索关键词\"\n        action={<View onClick={() => setOpen(true)}>搜索</View>}\n        onChange={(e) => setValue(e.detail.value)}\n      />\n    </>\n  )\n}\n\nexport default function SearchDemo() {\n  return (\n    <Page title=\"Search 搜索\" className=\"search-demo\">\n      <Block title=\"基础用法\">\n        <BasicSearch />\n      </Block>\n      <Block title=\"事件监听\">\n        <SearchWithEvents />\n      </Block>\n      <Block title=\"搜索框内容对齐\">\n        <InputCenterSearch />\n      </Block>\n      <Block title=\"禁用搜索框\">\n        <DisabledSearch />\n      </Block>\n      <Block title=\"自定义背景色\">\n        <BackgroundSearch />\n      </Block>\n      <Block title=\"自定义按钮\">\n        <CustomSearch />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "search",
        "code": "import { Search, Toast } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSearch() {\n  const [value, setValue] = useState(\"\")\n  return (\n    <Search\n      value={value}\n      placeholder=\"请输入搜索关键词\"\n      onChange={(e) => setValue(e.detail.value)}\n    />\n  )\n}\n\nfunction SearchWithEvents() {\n  const [value, setValue] = useState(\"\")\n  const [open, setOpen] = useState(false)\n\n  return (\n    <>\n      <Toast open={open} onClose={() => setOpen(false)}>\n        取消\n      </Toast>\n      <Search\n        value={value}\n        placeholder=\"请输入搜索关键词\"\n        action\n        onChange={(e) => setValue(e.detail.value)}\n        onCancel={() => setOpen(true)}\n      />\n    </>\n  )\n}\n\nfunction InputCenterSearch() {\n  const [value, setValue] = useState(\"\")\n  return (\n    <Search\n      value={value}\n      placeholder=\"请输入搜索关键词\"\n      inputAlign=\"center\"\n      onChange={(e) => setValue(e.detail.value)}\n    />\n  )\n}\n\nfunction DisabledSearch() {\n  return <Search disabled placeholder=\"请输入搜索关键词\" />\n}\n\nfunction BackgroundSearch() {\n  return <Search className=\"background\" shape=\"rounded\" placeholder=\"请输入搜索关键词\" />\n}\n\nfunction CustomSearch() {\n  const [value, setValue] = useState(\"\")\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Toast open={open} onClose={() => setOpen(false)}>\n        搜索\n      </Toast>\n      <Search\n        value={value}\n        label=\"地址\"\n        placeholder=\"请输入搜索关键词\"\n        action={<View onClick={() => setOpen(true)}>搜索</View>}\n        onChange={(e) => setValue(e.detail.value)}\n      />\n    </>\n  )\n}\n\nexport default function SearchDemo() {\n  return (\n    <Page title=\"Search 搜索\" className=\"search-demo\">\n      <Block title=\"基础用法\">\n        <BasicSearch />\n      </Block>\n      <Block title=\"事件监听\">\n        <SearchWithEvents />\n      </Block>\n      <Block title=\"搜索框内容对齐\">\n        <InputCenterSearch />\n      </Block>\n      <Block title=\"禁用搜索框\">\n        <DisabledSearch />\n      </Block>\n      <Block title=\"自定义背景色\">\n        <BackgroundSearch />\n      </Block>\n      <Block title=\"自定义按钮\">\n        <CustomSearch />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "share-sheet",
    "description": "底部弹起的分享面板，用于展示各分享渠道对应的操作按钮，不含具体的分享逻辑。",
    "usage": [
      "import { Cell, Image, ShareSheet } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicShareSheet() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"显示分享面板\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ShareSheet\n        open={open}\n        onSelect={() => setOpen(false)}\n        onClose={setOpen}\n        onCancel={() => {\n          setOpen(false)\n        }}\n      >\n        <ShareSheet.Backdrop />\n        <ShareSheet.Header title=\"立即分享给好友\" />\n        <ShareSheet.Options>\n          <ShareSheet.Option icon=\"wechat\" name=\"微信\" openType=\"share\" />\n          <ShareSheet.Option icon=\"wechat-moments\" name=\"朋友圈\" />\n          <ShareSheet.Option icon=\"weibo\" name=\"微博\" />\n          <ShareSheet.Option icon=\"qq\" name=\"QQ\" />\n        </ShareSheet.Options>\n        <ShareSheet.Button type=\"cancel\">取消</ShareSheet.Button>\n      </ShareSheet>\n    </>\n  )\n}\n\nfunction MultilineShareSheet() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"显示分享面板\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ShareSheet open={open} onSelect={() => setOpen(false)} onClose={setOpen}>\n        <ShareSheet.Header title=\"立即分享给好友\" />\n        <ShareSheet.Options>\n          <ShareSheet.Option icon=\"wechat\" name=\"微信\" />\n          <ShareSheet.Option icon=\"wechat-moments\" name=\"朋友圈\" />\n          <ShareSheet.Option icon=\"weibo\" name=\"微博\" />\n          <ShareSheet.Option icon=\"qq\" name=\"QQ\" />\n        </ShareSheet.Options>\n        <ShareSheet.Options>\n          <ShareSheet.Option icon=\"link\" name=\"复制链接\" />\n          <ShareSheet.Option icon=\"poster\" name=\"分享海报\" />\n          <ShareSheet.Option icon=\"qrcode\" name=\"二维码\" />\n          <ShareSheet.Option icon=\"weapp-qrcode\" name=\"小程序码\" />\n        </ShareSheet.Options>\n        <ShareSheet.Button type=\"cancel\">取消</ShareSheet.Button>\n      </ShareSheet>\n    </>\n  )\n}\n\nfunction CustomShareSheet() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"显示分享面板\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ShareSheet open={open} onSelect={() => setOpen(false)} onClose={setOpen}>\n        <ShareSheet.Options>\n          <ShareSheet.Option\n            icon={<Image src=\"https://img.yzcdn.cn/vant/custom-icon-fire.png\" />}\n            name=\"名称\"\n          />\n          <ShareSheet.Option\n            icon={<Image src=\"https://img.yzcdn.cn/vant/custom-icon-light.png\" />}\n            name=\"名称\"\n          />\n          <ShareSheet.Option\n            icon={<Image src=\"https://img.yzcdn.cn/vant/custom-icon-water.png\" />}\n            name=\"名称\"\n          />\n        </ShareSheet.Options>\n        <ShareSheet.Button type=\"cancel\">取消</ShareSheet.Button>\n      </ShareSheet>\n    </>\n  )\n}\n\nfunction ShareSheetWithDescription() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"显示分享面板\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ShareSheet open={open} onSelect={() => setOpen(false)} onClose={setOpen}>\n        <ShareSheet.Header title=\"立即分享给好友\">描述信息</ShareSheet.Header>\n        <ShareSheet.Options>\n          <ShareSheet.Option icon=\"wechat\" name=\"微信\" />\n          <ShareSheet.Option icon=\"weibo\" name=\"微博\" />\n          <ShareSheet.Option icon=\"link\" name=\"复制链接\" description=\"描述信息\" />\n          <ShareSheet.Option icon=\"poster\" name=\"分享海报\" />\n          <ShareSheet.Option icon=\"qrcode\" name=\"二维码\" />\n        </ShareSheet.Options>\n        <ShareSheet.Button type=\"cancel\">取消</ShareSheet.Button>\n      </ShareSheet>\n    </>\n  )\n}\n\nexport default function ShareSheetDemo() {\n  return (\n    <Page title=\"ShareSheet 分享面板\" className=\"share-sheet-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicShareSheet />\n      </Block>\n      <Block variant=\"card\" title=\"展示多行选项\">\n        <MultilineShareSheet />\n      </Block>\n      <Block variant=\"card\" title=\"自定义图标\">\n        <CustomShareSheet />\n      </Block>\n      <Block variant=\"card\" title=\"展示描述信息\">\n        <ShareSheetWithDescription />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "share-sheet",
        "code": "import { Cell, Image, ShareSheet } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicShareSheet() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"显示分享面板\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ShareSheet\n        open={open}\n        onSelect={() => setOpen(false)}\n        onClose={setOpen}\n        onCancel={() => {\n          setOpen(false)\n        }}\n      >\n        <ShareSheet.Backdrop />\n        <ShareSheet.Header title=\"立即分享给好友\" />\n        <ShareSheet.Options>\n          <ShareSheet.Option icon=\"wechat\" name=\"微信\" openType=\"share\" />\n          <ShareSheet.Option icon=\"wechat-moments\" name=\"朋友圈\" />\n          <ShareSheet.Option icon=\"weibo\" name=\"微博\" />\n          <ShareSheet.Option icon=\"qq\" name=\"QQ\" />\n        </ShareSheet.Options>\n        <ShareSheet.Button type=\"cancel\">取消</ShareSheet.Button>\n      </ShareSheet>\n    </>\n  )\n}\n\nfunction MultilineShareSheet() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"显示分享面板\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ShareSheet open={open} onSelect={() => setOpen(false)} onClose={setOpen}>\n        <ShareSheet.Header title=\"立即分享给好友\" />\n        <ShareSheet.Options>\n          <ShareSheet.Option icon=\"wechat\" name=\"微信\" />\n          <ShareSheet.Option icon=\"wechat-moments\" name=\"朋友圈\" />\n          <ShareSheet.Option icon=\"weibo\" name=\"微博\" />\n          <ShareSheet.Option icon=\"qq\" name=\"QQ\" />\n        </ShareSheet.Options>\n        <ShareSheet.Options>\n          <ShareSheet.Option icon=\"link\" name=\"复制链接\" />\n          <ShareSheet.Option icon=\"poster\" name=\"分享海报\" />\n          <ShareSheet.Option icon=\"qrcode\" name=\"二维码\" />\n          <ShareSheet.Option icon=\"weapp-qrcode\" name=\"小程序码\" />\n        </ShareSheet.Options>\n        <ShareSheet.Button type=\"cancel\">取消</ShareSheet.Button>\n      </ShareSheet>\n    </>\n  )\n}\n\nfunction CustomShareSheet() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"显示分享面板\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ShareSheet open={open} onSelect={() => setOpen(false)} onClose={setOpen}>\n        <ShareSheet.Options>\n          <ShareSheet.Option\n            icon={<Image src=\"https://img.yzcdn.cn/vant/custom-icon-fire.png\" />}\n            name=\"名称\"\n          />\n          <ShareSheet.Option\n            icon={<Image src=\"https://img.yzcdn.cn/vant/custom-icon-light.png\" />}\n            name=\"名称\"\n          />\n          <ShareSheet.Option\n            icon={<Image src=\"https://img.yzcdn.cn/vant/custom-icon-water.png\" />}\n            name=\"名称\"\n          />\n        </ShareSheet.Options>\n        <ShareSheet.Button type=\"cancel\">取消</ShareSheet.Button>\n      </ShareSheet>\n    </>\n  )\n}\n\nfunction ShareSheetWithDescription() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Cell\n        clickable\n        title=\"显示分享面板\"\n        rightIcon={<ArrowRight />}\n        onClick={() => setOpen(true)}\n      />\n      <ShareSheet open={open} onSelect={() => setOpen(false)} onClose={setOpen}>\n        <ShareSheet.Header title=\"立即分享给好友\">描述信息</ShareSheet.Header>\n        <ShareSheet.Options>\n          <ShareSheet.Option icon=\"wechat\" name=\"微信\" />\n          <ShareSheet.Option icon=\"weibo\" name=\"微博\" />\n          <ShareSheet.Option icon=\"link\" name=\"复制链接\" description=\"描述信息\" />\n          <ShareSheet.Option icon=\"poster\" name=\"分享海报\" />\n          <ShareSheet.Option icon=\"qrcode\" name=\"二维码\" />\n        </ShareSheet.Options>\n        <ShareSheet.Button type=\"cancel\">取消</ShareSheet.Button>\n      </ShareSheet>\n    </>\n  )\n}\n\nexport default function ShareSheetDemo() {\n  return (\n    <Page title=\"ShareSheet 分享面板\" className=\"share-sheet-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <BasicShareSheet />\n      </Block>\n      <Block variant=\"card\" title=\"展示多行选项\">\n        <MultilineShareSheet />\n      </Block>\n      <Block variant=\"card\" title=\"自定义图标\">\n        <CustomShareSheet />\n      </Block>\n      <Block variant=\"card\" title=\"展示描述信息\">\n        <ShareSheetWithDescription />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "sidebar",
    "description": "垂直展示的导航栏，用于在不同的内容区域之间进行切换。",
    "usage": [
      "import { Grid, Sidebar, Toast } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction EventSidebar() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Sidebar onChange={(_, { children }: Sidebar.TabObject) => Toast.open(children)}>\n        <Sidebar.Tab>标签名 1</Sidebar.Tab>\n        <Sidebar.Tab>标签名 2</Sidebar.Tab>\n        <Sidebar.Tab>标签名 3</Sidebar.Tab>\n      </Sidebar>\n    </>\n  )\n}\n\nexport default function SidebarDemo() {\n  return (\n    <Page title=\"Sidebar 侧边导航\" className=\"sidebar-demo\">\n      <Grid columns={2} centered bordered={false}>\n        <Grid.Item>\n          <Block title=\"基础用法\">\n            <Sidebar>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n            </Sidebar>\n          </Block>\n        </Grid.Item>\n        <Grid.Item>\n          <Block title=\"徽标提示\">\n            <Sidebar>\n              <Sidebar.Tab badge>标签名</Sidebar.Tab>\n              <Sidebar.Tab badge=\"5\">标签名</Sidebar.Tab>\n              <Sidebar.Tab badge=\"20\">标签名</Sidebar.Tab>\n            </Sidebar>\n          </Block>\n        </Grid.Item>\n        <Grid.Item>\n          <Block title=\"禁用选项\">\n            <Sidebar>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n              <Sidebar.Tab disabled>标签名</Sidebar.Tab>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n            </Sidebar>\n          </Block>\n        </Grid.Item>\n        <Grid.Item>\n          <Block title=\"监听切换事件\">\n            <EventSidebar />\n          </Block>\n        </Grid.Item>\n      </Grid>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "sidebar",
        "code": "import { Grid, Sidebar, Toast } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction EventSidebar() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Sidebar onChange={(_, { children }: Sidebar.TabObject) => Toast.open(children)}>\n        <Sidebar.Tab>标签名 1</Sidebar.Tab>\n        <Sidebar.Tab>标签名 2</Sidebar.Tab>\n        <Sidebar.Tab>标签名 3</Sidebar.Tab>\n      </Sidebar>\n    </>\n  )\n}\n\nexport default function SidebarDemo() {\n  return (\n    <Page title=\"Sidebar 侧边导航\" className=\"sidebar-demo\">\n      <Grid columns={2} centered bordered={false}>\n        <Grid.Item>\n          <Block title=\"基础用法\">\n            <Sidebar>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n            </Sidebar>\n          </Block>\n        </Grid.Item>\n        <Grid.Item>\n          <Block title=\"徽标提示\">\n            <Sidebar>\n              <Sidebar.Tab badge>标签名</Sidebar.Tab>\n              <Sidebar.Tab badge=\"5\">标签名</Sidebar.Tab>\n              <Sidebar.Tab badge=\"20\">标签名</Sidebar.Tab>\n            </Sidebar>\n          </Block>\n        </Grid.Item>\n        <Grid.Item>\n          <Block title=\"禁用选项\">\n            <Sidebar>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n              <Sidebar.Tab disabled>标签名</Sidebar.Tab>\n              <Sidebar.Tab>标签名</Sidebar.Tab>\n            </Sidebar>\n          </Block>\n        </Grid.Item>\n        <Grid.Item>\n          <Block title=\"监听切换事件\">\n            <EventSidebar />\n          </Block>\n        </Grid.Item>\n      </Grid>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "signature",
    "description": "用于签名场景的组件，基于 Canvas 实现。",
    "usage": [
      "import { useRef } from \"react\"\nimport { Signature, SignatureInstance, Flex, Button } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\n\nfunction BasicSignature() {\n  const ref = useRef<SignatureInstance>(null)\n  return <>\n    <Signature ref={ref} />\n    <Flex justify=\"end\">\n      <Button size=\"small\" onClick={() => { ref.current?.clear() }} style={{ marginRight: \"1rem\" }}>取消</Button>\n      <Button size=\"small\" color=\"primary\" onClick={() => { console.log(ref.current?.getImage()) }}>确认</Button>\n    </Flex>\n  </>\n}\n\nfunction PenColorSignature() {\n  return <Signature penColor=\"#ff0000\" />\n}\n\nfunction LineWidthSignature() {\n  return <Signature lineWidth={6} />\n}\n\nfunction BackgroundColorSignature() {\n  const ref = useRef<SignatureInstance>(null)\n  return <>\n    <Signature ref={ref} backgroundColor=\"#eee\"  />\n    <Flex justify=\"end\">\n      <Button size=\"small\" onClick={() => { ref.current?.clear() }} style={{ marginRight: \"1rem\" }}>取消</Button>\n      <Button size=\"small\" color=\"primary\" onClick={() => { console.log(ref.current?.getImage()) }}>确认</Button>\n    </Flex>\n  </>\n}\n\n\nexport default function SignatureDemo() {\n  return (\n    <Page title=\"Signature 签名\" className=\"signature-demo\">\n      <Block title=\"基础用法\">\n        <BasicSignature />\n      </Block>\n      <Block title=\"自定义颜色\">\n        <PenColorSignature />\n      </Block>\n      <Block title=\"自定义线宽\">\n        <LineWidthSignature />\n      </Block>\n      <Block title=\"自定义背景颜色\">\n        <BackgroundColorSignature />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "signature",
        "code": "import { useRef } from \"react\"\nimport { Signature, SignatureInstance, Flex, Button } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\n\nfunction BasicSignature() {\n  const ref = useRef<SignatureInstance>(null)\n  return <>\n    <Signature ref={ref} />\n    <Flex justify=\"end\">\n      <Button size=\"small\" onClick={() => { ref.current?.clear() }} style={{ marginRight: \"1rem\" }}>取消</Button>\n      <Button size=\"small\" color=\"primary\" onClick={() => { console.log(ref.current?.getImage()) }}>确认</Button>\n    </Flex>\n  </>\n}\n\nfunction PenColorSignature() {\n  return <Signature penColor=\"#ff0000\" />\n}\n\nfunction LineWidthSignature() {\n  return <Signature lineWidth={6} />\n}\n\nfunction BackgroundColorSignature() {\n  const ref = useRef<SignatureInstance>(null)\n  return <>\n    <Signature ref={ref} backgroundColor=\"#eee\"  />\n    <Flex justify=\"end\">\n      <Button size=\"small\" onClick={() => { ref.current?.clear() }} style={{ marginRight: \"1rem\" }}>取消</Button>\n      <Button size=\"small\" color=\"primary\" onClick={() => { console.log(ref.current?.getImage()) }}>确认</Button>\n    </Flex>\n  </>\n}\n\n\nexport default function SignatureDemo() {\n  return (\n    <Page title=\"Signature 签名\" className=\"signature-demo\">\n      <Block title=\"基础用法\">\n        <BasicSignature />\n      </Block>\n      <Block title=\"自定义颜色\">\n        <PenColorSignature />\n      </Block>\n      <Block title=\"自定义线宽\">\n        <LineWidthSignature />\n      </Block>\n      <Block title=\"自定义背景颜色\">\n        <BackgroundColorSignature />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "skeleton",
    "description": "用于在内容加载过程中展示一组占位图形。",
    "usage": [
      "import { Skeleton, WhiteSpace } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSkeleton() {\n  return (\n    <Block title=\"基础用法\">\n      <Skeleton variant=\"circle\" />\n      <WhiteSpace />\n      <Skeleton style={{ width: \"40%\" }} />\n      <WhiteSpace size=\"20px\" />\n      <Skeleton />\n      <WhiteSpace />\n      <Skeleton />\n      <WhiteSpace />\n      <Skeleton style={{ width: \"60%\" }} />\n    </Block>\n  )\n}\n\nfunction AnimateSkeleton() {\n  return (\n    <Block title=\"动画效果\">\n      <Skeleton />\n      <WhiteSpace />\n      <Skeleton animation={false} />\n      <WhiteSpace />\n      <Skeleton animation=\"wave\" />\n    </Block>\n  )\n}\n\nexport default function SkeletonDemo() {\n  return (\n    <Page title=\"Skeleton 骨架屏\" className=\"skeleton-demo\">\n      <BasicSkeleton />\n      <AnimateSkeleton />\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "skeleton",
        "code": "import { Skeleton, WhiteSpace } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSkeleton() {\n  return (\n    <Block title=\"基础用法\">\n      <Skeleton variant=\"circle\" />\n      <WhiteSpace />\n      <Skeleton style={{ width: \"40%\" }} />\n      <WhiteSpace size=\"20px\" />\n      <Skeleton />\n      <WhiteSpace />\n      <Skeleton />\n      <WhiteSpace />\n      <Skeleton style={{ width: \"60%\" }} />\n    </Block>\n  )\n}\n\nfunction AnimateSkeleton() {\n  return (\n    <Block title=\"动画效果\">\n      <Skeleton />\n      <WhiteSpace />\n      <Skeleton animation={false} />\n      <WhiteSpace />\n      <Skeleton animation=\"wave\" />\n    </Block>\n  )\n}\n\nexport default function SkeletonDemo() {\n  return (\n    <Page title=\"Skeleton 骨架屏\" className=\"skeleton-demo\">\n      <BasicSkeleton />\n      <AnimateSkeleton />\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "slider",
    "description": "滑动输入条，用于在给定的范围内选择一个值。",
    "usage": [
      "import { Slider } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction StyledThumbSlider() {\n  const [value, setValue] = useState(50)\n  return (\n    <Slider className=\"custom-color\" value={value} onChange={setValue}>\n      <Slider.Thumb>\n        <View className=\"custom-thumb\">{value}</View>\n      </Slider.Thumb>\n    </Slider>\n  )\n}\n\nexport default function SliderDemo() {\n  return (\n    <Page title=\"Slider 滑块\" className=\"slider-demo\">\n      <Block title=\"基础用法\">\n        <Slider defaultValue={50} />\n      </Block>\n      <Block title=\"双滑块\">\n        <Slider range defaultValue={[20, 60]} />\n      </Block>\n      <Block title=\"指定选择范围\">\n        <Slider min={-50} max={50} defaultValue={0} />\n      </Block>\n      <Block title=\"禁用\">\n        <Slider disabled defaultValue={50} />\n      </Block>\n      <Block title=\"指定步长\">\n        <Slider step={10} defaultValue={50} />\n      </Block>\n      <Block title=\"自定义样式\">\n        <Slider className=\"custom-color\" size={4} defaultValue={50} />\n      </Block>\n      <Block title=\"自定义按钮\">\n        <StyledThumbSlider />\n      </Block>\n      <Block title=\"自定义样式\" className=\"vertical-slider\">\n        <Slider orientation=\"vertical\" defaultValue={50} />\n        <Slider\n          style={{ marginLeft: \"100px\" }}\n          range\n          orientation=\"vertical\"\n          defaultValue={[20, 60]}\n        />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "slider",
        "code": "import { Slider } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction StyledThumbSlider() {\n  const [value, setValue] = useState(50)\n  return (\n    <Slider className=\"custom-color\" value={value} onChange={setValue}>\n      <Slider.Thumb>\n        <View className=\"custom-thumb\">{value}</View>\n      </Slider.Thumb>\n    </Slider>\n  )\n}\n\nexport default function SliderDemo() {\n  return (\n    <Page title=\"Slider 滑块\" className=\"slider-demo\">\n      <Block title=\"基础用法\">\n        <Slider defaultValue={50} />\n      </Block>\n      <Block title=\"双滑块\">\n        <Slider range defaultValue={[20, 60]} />\n      </Block>\n      <Block title=\"指定选择范围\">\n        <Slider min={-50} max={50} defaultValue={0} />\n      </Block>\n      <Block title=\"禁用\">\n        <Slider disabled defaultValue={50} />\n      </Block>\n      <Block title=\"指定步长\">\n        <Slider step={10} defaultValue={50} />\n      </Block>\n      <Block title=\"自定义样式\">\n        <Slider className=\"custom-color\" size={4} defaultValue={50} />\n      </Block>\n      <Block title=\"自定义按钮\">\n        <StyledThumbSlider />\n      </Block>\n      <Block title=\"自定义样式\" className=\"vertical-slider\">\n        <Slider orientation=\"vertical\" defaultValue={50} />\n        <Slider\n          style={{ marginLeft: \"100px\" }}\n          range\n          orientation=\"vertical\"\n          defaultValue={[20, 60]}\n        />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "space",
    "description": "设置组件之间的间距。",
    "usage": [
      "import { Button, Space } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function SpaceDemo() {\n  return (\n    <Page title=\"Space 间距\" className=\"space-demo\">\n      <Block title=\"基础用法\">\n        <Space>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"垂直\">\n        <Space direction=\"vertical\" fill>\n          <Button color=\"primary\" block>主要按钮</Button>\n          <Button color=\"primary\" block>主要按钮</Button>\n          <Button color=\"primary\" block>主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"间距\">\n        <Space size=\"mini\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"small\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"medium\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"large\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"自定义间隔\">\n        <Space size={16}>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size={[16, 32]}>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size={[16]}>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"靠右\">\n        <Space justify=\"space-around\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"居中\">\n        <Space justify=\"center\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"环绕\">\n        <Space justify=\"space-around\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"两端对齐\">\n        <Space justify=\"space-between\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"不换行\">\n        <Space wrap=\"nowrap\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n    </Page>\n  )\n}",
      "import { Button, Space } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function SpaceDemo() {\n  return (\n    <Page title=\"Space 间隔\" className=\"space-demo\">\n      <Block title=\"基础用法\">\n        <Space>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"垂直\">\n        <Space direction=\"vertical\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"间距\">\n        <Space size=\"small\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"medium\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"large\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"靠右\">\n        <Space justify=\"space-around\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"居中\">\n        <Space justify=\"center\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"环绕\">\n        <Space justify=\"space-around\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"两端对齐\">\n        <Space justify=\"space-between\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"不换行\">\n        <Space wrap=\"nowrap\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "space",
        "code": "import { Button, Space } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function SpaceDemo() {\n  return (\n    <Page title=\"Space 间距\" className=\"space-demo\">\n      <Block title=\"基础用法\">\n        <Space>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"垂直\">\n        <Space direction=\"vertical\" fill>\n          <Button color=\"primary\" block>主要按钮</Button>\n          <Button color=\"primary\" block>主要按钮</Button>\n          <Button color=\"primary\" block>主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"间距\">\n        <Space size=\"mini\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"small\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"medium\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"large\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"自定义间隔\">\n        <Space size={16}>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size={[16, 32]}>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size={[16]}>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"靠右\">\n        <Space justify=\"space-around\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"居中\">\n        <Space justify=\"center\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"环绕\">\n        <Space justify=\"space-around\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"两端对齐\">\n        <Space justify=\"space-between\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"不换行\">\n        <Space wrap=\"nowrap\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n    </Page>\n  )\n}"
      },
      {
        "source": "space",
        "code": "import { Button, Space } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function SpaceDemo() {\n  return (\n    <Page title=\"Space 间隔\" className=\"space-demo\">\n      <Block title=\"基础用法\">\n        <Space>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"垂直\">\n        <Space direction=\"vertical\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"间距\">\n        <Space size=\"small\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"medium\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n        <Space size=\"large\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"靠右\">\n        <Space justify=\"space-around\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"居中\">\n        <Space justify=\"center\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"环绕\">\n        <Space justify=\"space-around\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"两端对齐\">\n        <Space justify=\"space-between\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n      <Block title=\"不换行\">\n        <Space wrap=\"nowrap\">\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n          <Button color=\"primary\">主要按钮</Button>\n        </Space>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "stepper",
    "description": "步进器由增加按钮、减少按钮和输入框组成，用于在一定范围内输入、调整数字。",
    "usage": [
      "import { Cell, Stepper } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function StepperDemo() {\n  return (\n    <Page title=\"Stepper 步进器\" className=\"stepper-demo\">\n      <Block variant=\"card\">\n        <Cell title=\"基本用法\">\n          <Stepper />\n        </Cell>\n        <Cell title=\"步长设置\">\n          <Stepper step={2} />\n        </Cell>\n        <Cell title=\"限制输入范围\">\n          <Stepper min={5} max={8} />\n        </Cell>\n        <Cell title=\"禁用状态\">\n          <Stepper disabled />\n        </Cell>\n        <Cell title=\"禁用输入框\">\n          <Stepper>\n            <Stepper.Button />\n            <Stepper.Input disabled />\n            <Stepper.Button />\n          </Stepper>\n        </Cell>\n        <Cell title=\"固定小数位数\">\n          <Stepper precision={2} />\n        </Cell>\n        <Cell align=\"center\" title=\"自定义大小\">\n          <Stepper size=\"32\">\n            <Stepper.Button />\n            <Stepper.Input disabled width=\"40\" />\n            <Stepper.Button />\n          </Stepper>\n        </Cell>\n        <Cell title=\"圆角风格\">\n          <Stepper shape=\"circular\" size=\"22\" />\n        </Cell>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "stepper",
        "code": "import { Cell, Stepper } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function StepperDemo() {\n  return (\n    <Page title=\"Stepper 步进器\" className=\"stepper-demo\">\n      <Block variant=\"card\">\n        <Cell title=\"基本用法\">\n          <Stepper />\n        </Cell>\n        <Cell title=\"步长设置\">\n          <Stepper step={2} />\n        </Cell>\n        <Cell title=\"限制输入范围\">\n          <Stepper min={5} max={8} />\n        </Cell>\n        <Cell title=\"禁用状态\">\n          <Stepper disabled />\n        </Cell>\n        <Cell title=\"禁用输入框\">\n          <Stepper>\n            <Stepper.Button />\n            <Stepper.Input disabled />\n            <Stepper.Button />\n          </Stepper>\n        </Cell>\n        <Cell title=\"固定小数位数\">\n          <Stepper precision={2} />\n        </Cell>\n        <Cell align=\"center\" title=\"自定义大小\">\n          <Stepper size=\"32\">\n            <Stepper.Button />\n            <Stepper.Input disabled width=\"40\" />\n            <Stepper.Button />\n          </Stepper>\n        </Cell>\n        <Cell title=\"圆角风格\">\n          <Stepper shape=\"circular\" size=\"22\" />\n        </Cell>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "steps",
    "description": "用于展示操作流程的各个环节，让用户了解当前的操作在整体流程中的位置。",
    "usage": [
      "import { Button, Steps } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface ActiveStepsProps {\n  activeStep: number\n}\n\nfunction BasicSteps(props: ActiveStepsProps) {\n  return (\n    <Block title=\"基础用法\">\n      <Steps value={props.activeStep}>\n        <Steps.Step>买家下单</Steps.Step>\n        <Steps.Step>商家接单</Steps.Step>\n        <Steps.Step>买家提货</Steps.Step>\n        <Steps.Step>交易完成</Steps.Step>\n      </Steps>\n    </Block>\n  )\n}\n\nfunction AlternativeLabelSteps(props: ActiveStepsProps) {\n  return (\n    <Block title=\"下方标签\">\n      <Steps value={props.activeStep} alternativeLabel>\n        <Steps.Step>买家下单</Steps.Step>\n        <Steps.Step>商家接单</Steps.Step>\n        <Steps.Step>买家提货</Steps.Step>\n        <Steps.Step>交易完成</Steps.Step>\n      </Steps>\n    </Block>\n  )\n}\n\nfunction StepsWithCustomStyle(props: ActiveStepsProps) {\n  return (\n    <Block title=\"自定义样式\">\n      <Steps className=\"custom-color\" value={props.activeStep}>\n        <Steps.Step icon={<ArrowRight />}>买家下单</Steps.Step>\n        <Steps.Step icon={<ArrowRight />}>商家接单</Steps.Step>\n        <Steps.Step icon={<ArrowRight />}>买家提货</Steps.Step>\n        <Steps.Step icon={<ArrowRight />}>交易完成</Steps.Step>\n      </Steps>\n    </Block>\n  )\n}\n\nfunction VerticalSteps(props: ActiveStepsProps) {\n  return (\n    <Block title=\"竖向步骤条\">\n      <Steps value={props.activeStep} direction=\"vertical\">\n        <Steps.Step>\n          <View>【城市】物流状态2</View>\n          <View>2016-07-12 12:40</View>\n        </Steps.Step>\n        <Steps.Step>\n          <View>【城市】物流状态1</View>\n          <View>2016-07-11 10:00</View>\n        </Steps.Step>\n        <Steps.Step>\n          <View>【城市】物流状态</View>\n          <View>2016-07-10 12:00</View>\n        </Steps.Step>\n        <Steps.Step>\n          <View>快件已发货</View>\n          <View>2016-07-10 09:30</View>\n        </Steps.Step>\n      </Steps>\n    </Block>\n  )\n}\n\nexport default function StepsDemo() {\n  const [activeStep, setActiveStep] = useState(0)\n\n  return (\n    <Page title=\"Steps 步骤条\" className=\"steps-demo\">\n      <BasicSteps activeStep={activeStep} />\n      <Block className=\"steps-demo__next-block\">\n        <Button onClick={() => setActiveStep(activeStep + 1 > 3 ? 0 : activeStep + 1)}>\n          下一步\n        </Button>\n      </Block>\n      <AlternativeLabelSteps activeStep={activeStep} />\n      <StepsWithCustomStyle activeStep={activeStep} />\n      <VerticalSteps activeStep={activeStep} />\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "steps",
        "code": "import { Button, Steps } from \"@taroify/core\"\nimport { ArrowRight } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface ActiveStepsProps {\n  activeStep: number\n}\n\nfunction BasicSteps(props: ActiveStepsProps) {\n  return (\n    <Block title=\"基础用法\">\n      <Steps value={props.activeStep}>\n        <Steps.Step>买家下单</Steps.Step>\n        <Steps.Step>商家接单</Steps.Step>\n        <Steps.Step>买家提货</Steps.Step>\n        <Steps.Step>交易完成</Steps.Step>\n      </Steps>\n    </Block>\n  )\n}\n\nfunction AlternativeLabelSteps(props: ActiveStepsProps) {\n  return (\n    <Block title=\"下方标签\">\n      <Steps value={props.activeStep} alternativeLabel>\n        <Steps.Step>买家下单</Steps.Step>\n        <Steps.Step>商家接单</Steps.Step>\n        <Steps.Step>买家提货</Steps.Step>\n        <Steps.Step>交易完成</Steps.Step>\n      </Steps>\n    </Block>\n  )\n}\n\nfunction StepsWithCustomStyle(props: ActiveStepsProps) {\n  return (\n    <Block title=\"自定义样式\">\n      <Steps className=\"custom-color\" value={props.activeStep}>\n        <Steps.Step icon={<ArrowRight />}>买家下单</Steps.Step>\n        <Steps.Step icon={<ArrowRight />}>商家接单</Steps.Step>\n        <Steps.Step icon={<ArrowRight />}>买家提货</Steps.Step>\n        <Steps.Step icon={<ArrowRight />}>交易完成</Steps.Step>\n      </Steps>\n    </Block>\n  )\n}\n\nfunction VerticalSteps(props: ActiveStepsProps) {\n  return (\n    <Block title=\"竖向步骤条\">\n      <Steps value={props.activeStep} direction=\"vertical\">\n        <Steps.Step>\n          <View>【城市】物流状态2</View>\n          <View>2016-07-12 12:40</View>\n        </Steps.Step>\n        <Steps.Step>\n          <View>【城市】物流状态1</View>\n          <View>2016-07-11 10:00</View>\n        </Steps.Step>\n        <Steps.Step>\n          <View>【城市】物流状态</View>\n          <View>2016-07-10 12:00</View>\n        </Steps.Step>\n        <Steps.Step>\n          <View>快件已发货</View>\n          <View>2016-07-10 09:30</View>\n        </Steps.Step>\n      </Steps>\n    </Block>\n  )\n}\n\nexport default function StepsDemo() {\n  const [activeStep, setActiveStep] = useState(0)\n\n  return (\n    <Page title=\"Steps 步骤条\" className=\"steps-demo\">\n      <BasicSteps activeStep={activeStep} />\n      <Block className=\"steps-demo__next-block\">\n        <Button onClick={() => setActiveStep(activeStep + 1 > 3 ? 0 : activeStep + 1)}>\n          下一步\n        </Button>\n      </Block>\n      <AlternativeLabelSteps activeStep={activeStep} />\n      <StepsWithCustomStyle activeStep={activeStep} />\n      <VerticalSteps activeStep={activeStep} />\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "sticky",
    "description": "Sticky 组件与 CSS 中 `position: sticky` 属性实现的效果一致，当组件在屏幕范围内时，会按照正常的布局排列，当组件滚出屏幕范围时，始终会固定在屏幕顶部。",
    "usage": [
      "import { Button, Sticky } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useRef } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSticky() {\n  return (\n    <Block title=\"基础用法\">\n      <Sticky>\n        <Button color=\"primary\">基础用法</Button>\n      </Sticky>\n    </Block>\n  )\n}\n\nfunction OffsetSticky() {\n  return (\n    <Block title=\"吸顶距离\" className=\"sticky-demo__offset-sticky\">\n      <Sticky offsetTop={50}>\n        <Button color=\"primary\">吸顶距离</Button>\n      </Sticky>\n    </Block>\n  )\n}\n\nfunction StickyWithContainer() {\n  const container = useRef()\n  return (\n    <Block title=\"指定容器\">\n      <View className=\"sticky-demo__container-sticky\" ref={container}>\n        <Sticky container={container}>\n          <Button color=\"warning\">指定容器</Button>\n        </Sticky>\n      </View>\n    </Block>\n  )\n}\n\nfunction BottomSticky() {\n  return (\n    <Block title=\"吸底距离\" className=\"sticky-demo__bottom-sticky\">\n      <View className=\"sticky-demo__bottom-sticky__padding\" />\n      <Sticky position=\"bottom\" offsetBottom={50}>\n        <Button color=\"primary\">吸底距离</Button>\n      </Sticky>\n      <View className=\"sticky-demo__bottom-sticky__padding\" />\n    </Block>\n  )\n}\n\nexport default function StickyDemo() {\n  return (\n    <Page title=\"Sticky 粘性布局\" className=\"sticky-demo\">\n      <BasicSticky />\n      <OffsetSticky />\n      <StickyWithContainer />\n      <BottomSticky />\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "sticky",
        "code": "import { Button, Sticky } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport { useRef } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSticky() {\n  return (\n    <Block title=\"基础用法\">\n      <Sticky>\n        <Button color=\"primary\">基础用法</Button>\n      </Sticky>\n    </Block>\n  )\n}\n\nfunction OffsetSticky() {\n  return (\n    <Block title=\"吸顶距离\" className=\"sticky-demo__offset-sticky\">\n      <Sticky offsetTop={50}>\n        <Button color=\"primary\">吸顶距离</Button>\n      </Sticky>\n    </Block>\n  )\n}\n\nfunction StickyWithContainer() {\n  const container = useRef()\n  return (\n    <Block title=\"指定容器\">\n      <View className=\"sticky-demo__container-sticky\" ref={container}>\n        <Sticky container={container}>\n          <Button color=\"warning\">指定容器</Button>\n        </Sticky>\n      </View>\n    </Block>\n  )\n}\n\nfunction BottomSticky() {\n  return (\n    <Block title=\"吸底距离\" className=\"sticky-demo__bottom-sticky\">\n      <View className=\"sticky-demo__bottom-sticky__padding\" />\n      <Sticky position=\"bottom\" offsetBottom={50}>\n        <Button color=\"primary\">吸底距离</Button>\n      </Sticky>\n      <View className=\"sticky-demo__bottom-sticky__padding\" />\n    </Block>\n  )\n}\n\nexport default function StickyDemo() {\n  return (\n    <Page title=\"Sticky 粘性布局\" className=\"sticky-demo\">\n      <BasicSticky />\n      <OffsetSticky />\n      <StickyWithContainer />\n      <BottomSticky />\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "swipe-cell",
    "description": "可以左右滑动来展示操作按钮的单元格组件。",
    "usage": [
      "import { Button, Cell, Image, SwipeCell } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSwipeCell() {\n  return (\n    <SwipeCell>\n      <SwipeCell.Actions side=\"left\">\n        <Button variant=\"contained\" shape=\"square\" color=\"primary\">\n          选择\n        </Button>\n      </SwipeCell.Actions>\n      <Cell bordered={false} title=\"单元格\">\n        内容\n      </Cell>\n      <SwipeCell.Actions side=\"right\">\n        <Button variant=\"contained\" shape=\"square\" color=\"danger\">\n          删除\n        </Button>\n        <Button variant=\"contained\" shape=\"square\" color=\"primary\">\n          收藏\n        </Button>\n      </SwipeCell.Actions>\n    </SwipeCell>\n  )\n}\n\nfunction SwipeCellWithCustomContent() {\n  return (\n    <SwipeCell className=\"custom-swipe-cell\">\n      <View className=\"custom-card\">\n        <Image className=\"custom-card__thumb\" src=\"https://img01.yzcdn.cn/vant/ipad.jpeg\" />\n        <View className=\"custom-card__content\">\n          <View className=\"custom-card__title\">商品标题</View>\n        </View>\n      </View>\n      <SwipeCell.Actions side=\"right\">\n        <Button variant=\"contained\" shape=\"square\" color=\"danger\">\n          删除\n        </Button>\n        <Button variant=\"contained\" shape=\"square\" color=\"primary\">\n          收藏\n        </Button>\n      </SwipeCell.Actions>\n    </SwipeCell>\n  )\n}\n\nexport default function SwipeCellDemo() {\n  return (\n    <Page title=\"SwipeCell 滑动单元格\" className=\"swipe-cell-demo\">\n      <Block title=\"基础用法\">\n        <BasicSwipeCell />\n      </Block>\n      <Block title=\"自定义内容\">\n        <SwipeCellWithCustomContent />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "swipe-cell",
        "code": "import { Button, Cell, Image, SwipeCell } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSwipeCell() {\n  return (\n    <SwipeCell>\n      <SwipeCell.Actions side=\"left\">\n        <Button variant=\"contained\" shape=\"square\" color=\"primary\">\n          选择\n        </Button>\n      </SwipeCell.Actions>\n      <Cell bordered={false} title=\"单元格\">\n        内容\n      </Cell>\n      <SwipeCell.Actions side=\"right\">\n        <Button variant=\"contained\" shape=\"square\" color=\"danger\">\n          删除\n        </Button>\n        <Button variant=\"contained\" shape=\"square\" color=\"primary\">\n          收藏\n        </Button>\n      </SwipeCell.Actions>\n    </SwipeCell>\n  )\n}\n\nfunction SwipeCellWithCustomContent() {\n  return (\n    <SwipeCell className=\"custom-swipe-cell\">\n      <View className=\"custom-card\">\n        <Image className=\"custom-card__thumb\" src=\"https://img01.yzcdn.cn/vant/ipad.jpeg\" />\n        <View className=\"custom-card__content\">\n          <View className=\"custom-card__title\">商品标题</View>\n        </View>\n      </View>\n      <SwipeCell.Actions side=\"right\">\n        <Button variant=\"contained\" shape=\"square\" color=\"danger\">\n          删除\n        </Button>\n        <Button variant=\"contained\" shape=\"square\" color=\"primary\">\n          收藏\n        </Button>\n      </SwipeCell.Actions>\n    </SwipeCell>\n  )\n}\n\nexport default function SwipeCellDemo() {\n  return (\n    <Page title=\"SwipeCell 滑动单元格\" className=\"swipe-cell-demo\">\n      <Block title=\"基础用法\">\n        <BasicSwipeCell />\n      </Block>\n      <Block title=\"自定义内容\">\n        <SwipeCellWithCustomContent />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "swiper",
    "description": "用于循环播放一组图片或内容。",
    "usage": [
      "import { Image, Swiper, Toast } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSwiper() {\n  return (\n    <Swiper className=\"basic-swiper\" autoplay={4000}>\n      <Swiper.Indicator />\n      <Swiper.Item>1</Swiper.Item>\n      <Swiper.Item>2</Swiper.Item>\n      <Swiper.Item>3</Swiper.Item>\n      <Swiper.Item>4</Swiper.Item>\n    </Swiper>\n  )\n}\n\nfunction ImageSwiper() {\n  return (\n    <Swiper className=\"image-swiper\" lazyRender autoplay={4000}>\n      <Swiper.Indicator />\n      <Swiper.Item>\n        <Image className=\"image\" src=\"https://img01.yzcdn.cn/vant/apple-1.jpg\" />\n      </Swiper.Item>\n      <Swiper.Item>\n        <Image className=\"image\" src=\"https://img01.yzcdn.cn/vant/apple-2.jpg\" />\n      </Swiper.Item>\n      <Swiper.Item>\n        <Image className=\"image\" src=\"https://img01.yzcdn.cn/vant/apple-3.jpg\" />\n      </Swiper.Item>\n      <Swiper.Item>\n        <Image className=\"image\" src=\"https://img01.yzcdn.cn/vant/apple-4.jpg\" />\n      </Swiper.Item>\n    </Swiper>\n  )\n}\n\nfunction SwiperWithOnChange() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Swiper\n        className=\"onchange-swiper\"\n        onChange={(value) => Toast.open(`当前 Swipe 索引：${value}`)}\n      >\n        <Swiper.Indicator />\n        <Swiper.Item>1</Swiper.Item>\n        <Swiper.Item>2</Swiper.Item>\n        <Swiper.Item>3</Swiper.Item>\n        <Swiper.Item>4</Swiper.Item>\n      </Swiper>\n    </>\n  )\n}\n\nfunction SwiperWithCustomWidth() {\n  return (\n    <Swiper className=\"basic-swiper\" loop={false} width={300}>\n      <Swiper.Indicator />\n      <Swiper.Item>1</Swiper.Item>\n      <Swiper.Item>2</Swiper.Item>\n      <Swiper.Item>3</Swiper.Item>\n      <Swiper.Item>4</Swiper.Item>\n    </Swiper>\n  )\n}\n\nfunction VerticalSwiper() {\n  return (\n    <Swiper className=\"vertical-swiper\" direction=\"vertical\" autoplay={4000}>\n      <Swiper.Indicator />\n      <Swiper.Item>1</Swiper.Item>\n      <Swiper.Item>2</Swiper.Item>\n      <Swiper.Item>3</Swiper.Item>\n      <Swiper.Item>4</Swiper.Item>\n    </Swiper>\n  )\n}\n\nfunction SwiperWithCustomIndicator() {\n  const [value, setValue] = useState(0)\n\n  return (\n    <Swiper className=\"basic-swiper\" onChange={setValue}>\n      <Swiper.Item>1</Swiper.Item>\n      <Swiper.Item>2</Swiper.Item>\n      <Swiper.Item>3</Swiper.Item>\n      <Swiper.Item>4</Swiper.Item>\n      <Swiper.Indicator className=\"custom-indicator\">{value + 1}/4</Swiper.Indicator>\n    </Swiper>\n  )\n}\n\nexport default function SwiperDemo() {\n  return (\n    <Page title=\"Swiper 轮播\" className=\"swiper-demo\">\n      <Block title=\"基础用法\">\n        <BasicSwiper />\n      </Block>\n      <Block title=\"懒加载\">\n        <ImageSwiper />\n      </Block>\n      <Block title=\"监听 change 事件\">\n        <SwiperWithOnChange />\n      </Block>\n      <Block title=\"纵向滚动\">\n        <VerticalSwiper />\n      </Block>\n      <Block title=\"自定义滑块大小\">\n        <SwiperWithCustomWidth />\n      </Block>\n      <Block title=\"自定义指示器\">\n        <SwiperWithCustomIndicator />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "swiper",
        "code": "import { Image, Swiper, Toast } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicSwiper() {\n  return (\n    <Swiper className=\"basic-swiper\" autoplay={4000}>\n      <Swiper.Indicator />\n      <Swiper.Item>1</Swiper.Item>\n      <Swiper.Item>2</Swiper.Item>\n      <Swiper.Item>3</Swiper.Item>\n      <Swiper.Item>4</Swiper.Item>\n    </Swiper>\n  )\n}\n\nfunction ImageSwiper() {\n  return (\n    <Swiper className=\"image-swiper\" lazyRender autoplay={4000}>\n      <Swiper.Indicator />\n      <Swiper.Item>\n        <Image className=\"image\" src=\"https://img01.yzcdn.cn/vant/apple-1.jpg\" />\n      </Swiper.Item>\n      <Swiper.Item>\n        <Image className=\"image\" src=\"https://img01.yzcdn.cn/vant/apple-2.jpg\" />\n      </Swiper.Item>\n      <Swiper.Item>\n        <Image className=\"image\" src=\"https://img01.yzcdn.cn/vant/apple-3.jpg\" />\n      </Swiper.Item>\n      <Swiper.Item>\n        <Image className=\"image\" src=\"https://img01.yzcdn.cn/vant/apple-4.jpg\" />\n      </Swiper.Item>\n    </Swiper>\n  )\n}\n\nfunction SwiperWithOnChange() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Swiper\n        className=\"onchange-swiper\"\n        onChange={(value) => Toast.open(`当前 Swipe 索引：${value}`)}\n      >\n        <Swiper.Indicator />\n        <Swiper.Item>1</Swiper.Item>\n        <Swiper.Item>2</Swiper.Item>\n        <Swiper.Item>3</Swiper.Item>\n        <Swiper.Item>4</Swiper.Item>\n      </Swiper>\n    </>\n  )\n}\n\nfunction SwiperWithCustomWidth() {\n  return (\n    <Swiper className=\"basic-swiper\" loop={false} width={300}>\n      <Swiper.Indicator />\n      <Swiper.Item>1</Swiper.Item>\n      <Swiper.Item>2</Swiper.Item>\n      <Swiper.Item>3</Swiper.Item>\n      <Swiper.Item>4</Swiper.Item>\n    </Swiper>\n  )\n}\n\nfunction VerticalSwiper() {\n  return (\n    <Swiper className=\"vertical-swiper\" direction=\"vertical\" autoplay={4000}>\n      <Swiper.Indicator />\n      <Swiper.Item>1</Swiper.Item>\n      <Swiper.Item>2</Swiper.Item>\n      <Swiper.Item>3</Swiper.Item>\n      <Swiper.Item>4</Swiper.Item>\n    </Swiper>\n  )\n}\n\nfunction SwiperWithCustomIndicator() {\n  const [value, setValue] = useState(0)\n\n  return (\n    <Swiper className=\"basic-swiper\" onChange={setValue}>\n      <Swiper.Item>1</Swiper.Item>\n      <Swiper.Item>2</Swiper.Item>\n      <Swiper.Item>3</Swiper.Item>\n      <Swiper.Item>4</Swiper.Item>\n      <Swiper.Indicator className=\"custom-indicator\">{value + 1}/4</Swiper.Indicator>\n    </Swiper>\n  )\n}\n\nexport default function SwiperDemo() {\n  return (\n    <Page title=\"Swiper 轮播\" className=\"swiper-demo\">\n      <Block title=\"基础用法\">\n        <BasicSwiper />\n      </Block>\n      <Block title=\"懒加载\">\n        <ImageSwiper />\n      </Block>\n      <Block title=\"监听 change 事件\">\n        <SwiperWithOnChange />\n      </Block>\n      <Block title=\"纵向滚动\">\n        <VerticalSwiper />\n      </Block>\n      <Block title=\"自定义滑块大小\">\n        <SwiperWithCustomWidth />\n      </Block>\n      <Block title=\"自定义指示器\">\n        <SwiperWithCustomIndicator />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "switch",
    "description": "用于在打开和关闭状态之间进行切换。",
    "usage": [
      "import { Cell, Switch } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface SwitchListProps {\n  checked?: boolean\n\n  onChange?(checked: boolean): void\n}\n\nfunction BasicSwitch({ checked, onChange }: SwitchListProps) {\n  return <Switch checked={checked} onChange={onChange} />\n}\n\nfunction DisabledSwitch({ checked }: SwitchListProps) {\n  return <Switch checked={checked} disabled />\n}\n\nfunction LoadingSwitch({ checked }: SwitchListProps) {\n  return <Switch checked={checked} loading />\n}\n\nfunction SwitchList() {\n  const [checked, setChecked] = useState(false)\n  return (\n    <>\n      <Block title=\"基础用法\">\n        <BasicSwitch checked={checked} onChange={setChecked} />\n      </Block>\n      <Block title=\"禁用状态\">\n        <DisabledSwitch checked={checked} />\n      </Block>\n      <Block title=\"加载状态\">\n        <LoadingSwitch checked={checked} />\n      </Block>\n    </>\n  )\n}\n\nexport default function SwitchDemo() {\n  return (\n    <Page title=\"Switch 开关\" className=\"switch-demo\">\n      <SwitchList />\n      <Block title=\"自定义大小\">\n        <Switch size=\"24\" />\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Switch className=\"custom-color\" defaultChecked />\n      </Block>\n      <Block title=\"搭配单元格使用\" className=\"switch-with-cell\">\n        <Cell align=\"center\" title=\"标题\" rightIcon={<Switch size=\"24\" />} />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "switch",
        "code": "import { Cell, Switch } from \"@taroify/core\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\ninterface SwitchListProps {\n  checked?: boolean\n\n  onChange?(checked: boolean): void\n}\n\nfunction BasicSwitch({ checked, onChange }: SwitchListProps) {\n  return <Switch checked={checked} onChange={onChange} />\n}\n\nfunction DisabledSwitch({ checked }: SwitchListProps) {\n  return <Switch checked={checked} disabled />\n}\n\nfunction LoadingSwitch({ checked }: SwitchListProps) {\n  return <Switch checked={checked} loading />\n}\n\nfunction SwitchList() {\n  const [checked, setChecked] = useState(false)\n  return (\n    <>\n      <Block title=\"基础用法\">\n        <BasicSwitch checked={checked} onChange={setChecked} />\n      </Block>\n      <Block title=\"禁用状态\">\n        <DisabledSwitch checked={checked} />\n      </Block>\n      <Block title=\"加载状态\">\n        <LoadingSwitch checked={checked} />\n      </Block>\n    </>\n  )\n}\n\nexport default function SwitchDemo() {\n  return (\n    <Page title=\"Switch 开关\" className=\"switch-demo\">\n      <SwitchList />\n      <Block title=\"自定义大小\">\n        <Switch size=\"24\" />\n      </Block>\n      <Block title=\"自定义颜色\">\n        <Switch className=\"custom-color\" defaultChecked />\n      </Block>\n      <Block title=\"搭配单元格使用\" className=\"switch-with-cell\">\n        <Cell align=\"center\" title=\"标题\" rightIcon={<Switch size=\"24\" />} />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "tabbar",
    "description": "底部导航栏，用于在不同页面之间进行切换。",
    "usage": [
      "import { Badge, Tabbar, Toast } from \"@taroify/core\"\nimport { FriendsOutlined, HomeOutlined, Search, SettingOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicTabbar() {\n  return (\n    <Tabbar>\n      <Tabbar.TabItem icon={<HomeOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<Search />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<FriendsOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<SettingOutlined />}>标签</Tabbar.TabItem>\n    </Tabbar>\n  )\n}\n\nfunction KeyTabbar() {\n  return (\n    <Tabbar defaultValue=\"1\">\n      <Tabbar.TabItem value=\"1\" icon={<HomeOutlined />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem value=\"2\" icon={<Search />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem value=\"3\" icon={<FriendsOutlined />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem value=\"4\" icon={<SettingOutlined />}>\n        标签\n      </Tabbar.TabItem>\n    </Tabbar>\n  )\n}\n\nfunction BadgeTabbar() {\n  return (\n    <Tabbar>\n      <Tabbar.TabItem icon={<HomeOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem badge icon={<Search />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem badge=\"5\" icon={<FriendsOutlined />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem badge={<Badge content={100} max={99} />} icon={<SettingOutlined />}>\n        标签\n      </Tabbar.TabItem>\n    </Tabbar>\n  )\n}\n\nfunction TabbarWithCustomColor() {\n  return (\n    <Tabbar className=\"custom-color\">\n      <Tabbar.TabItem icon={<HomeOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<Search />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<FriendsOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<SettingOutlined />}>标签</Tabbar.TabItem>\n    </Tabbar>\n  )\n}\n\nfunction EventTabbar() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Tabbar onChange={(value) => Toast.open(`标签 ${Number(value) + 1}`)}>\n        <Tabbar.TabItem icon={<HomeOutlined />}>标签</Tabbar.TabItem>\n        <Tabbar.TabItem icon={<Search />}>标签</Tabbar.TabItem>\n        <Tabbar.TabItem icon={<FriendsOutlined />}>标签</Tabbar.TabItem>\n        <Tabbar.TabItem icon={<SettingOutlined />}>标签</Tabbar.TabItem>\n      </Tabbar>\n    </>\n  )\n}\n\nexport default function TabbarDemo() {\n  return (\n    <Page title=\"Tabbar 标签栏\" className=\"tabbar-demo\">\n      <Block title=\"基础用法\">\n        <BasicTabbar />\n      </Block>\n      <Block title=\"通过 value 匹配\">\n        <KeyTabbar />\n      </Block>\n      <Block title=\"徽标提示\">\n        <BadgeTabbar />\n      </Block>\n      <Block title=\"自定义颜色\">\n        <TabbarWithCustomColor />\n      </Block>\n      <Block title=\"监听切换事件\">\n        <EventTabbar />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "tabbar",
        "code": "import { Badge, Tabbar, Toast } from \"@taroify/core\"\nimport { FriendsOutlined, HomeOutlined, Search, SettingOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicTabbar() {\n  return (\n    <Tabbar>\n      <Tabbar.TabItem icon={<HomeOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<Search />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<FriendsOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<SettingOutlined />}>标签</Tabbar.TabItem>\n    </Tabbar>\n  )\n}\n\nfunction KeyTabbar() {\n  return (\n    <Tabbar defaultValue=\"1\">\n      <Tabbar.TabItem value=\"1\" icon={<HomeOutlined />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem value=\"2\" icon={<Search />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem value=\"3\" icon={<FriendsOutlined />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem value=\"4\" icon={<SettingOutlined />}>\n        标签\n      </Tabbar.TabItem>\n    </Tabbar>\n  )\n}\n\nfunction BadgeTabbar() {\n  return (\n    <Tabbar>\n      <Tabbar.TabItem icon={<HomeOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem badge icon={<Search />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem badge=\"5\" icon={<FriendsOutlined />}>\n        标签\n      </Tabbar.TabItem>\n      <Tabbar.TabItem badge={<Badge content={100} max={99} />} icon={<SettingOutlined />}>\n        标签\n      </Tabbar.TabItem>\n    </Tabbar>\n  )\n}\n\nfunction TabbarWithCustomColor() {\n  return (\n    <Tabbar className=\"custom-color\">\n      <Tabbar.TabItem icon={<HomeOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<Search />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<FriendsOutlined />}>标签</Tabbar.TabItem>\n      <Tabbar.TabItem icon={<SettingOutlined />}>标签</Tabbar.TabItem>\n    </Tabbar>\n  )\n}\n\nfunction EventTabbar() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Tabbar onChange={(value) => Toast.open(`标签 ${Number(value) + 1}`)}>\n        <Tabbar.TabItem icon={<HomeOutlined />}>标签</Tabbar.TabItem>\n        <Tabbar.TabItem icon={<Search />}>标签</Tabbar.TabItem>\n        <Tabbar.TabItem icon={<FriendsOutlined />}>标签</Tabbar.TabItem>\n        <Tabbar.TabItem icon={<SettingOutlined />}>标签</Tabbar.TabItem>\n      </Tabbar>\n    </>\n  )\n}\n\nexport default function TabbarDemo() {\n  return (\n    <Page title=\"Tabbar 标签栏\" className=\"tabbar-demo\">\n      <Block title=\"基础用法\">\n        <BasicTabbar />\n      </Block>\n      <Block title=\"通过 value 匹配\">\n        <KeyTabbar />\n      </Block>\n      <Block title=\"徽标提示\">\n        <BadgeTabbar />\n      </Block>\n      <Block title=\"自定义颜色\">\n        <TabbarWithCustomColor />\n      </Block>\n      <Block title=\"监听切换事件\">\n        <EventTabbar />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "tabs",
    "description": "选项卡组件，用于在不同的内容区域之间进行切换。",
    "usage": [
      "import { Tabs, Toast } from \"@taroify/core\"\nimport { MoreOutlined, Success } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicTabs() {\n  return (\n    <Tabs>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction BadgeTabs() {\n  return (\n    <Tabs>\n      <Tabs.TabPane title=\"标签 1\" dot>内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\" badge={8}>内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\" badge=\"Hot\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\" badge={<Success className=\"badge-icon\" />}>内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction KeyedTabs() {\n  return (\n    <Tabs defaultValue=\"a\">\n      <Tabs.TabPane value=\"a\" title=\"标签 1\">\n        内容 1\n      </Tabs.TabPane>\n      <Tabs.TabPane value=\"b\" title=\"标签 2\">\n        内容 2\n      </Tabs.TabPane>\n      <Tabs.TabPane value=\"c\" title=\"标签 3\">\n        内容 3\n      </Tabs.TabPane>\n      <Tabs.TabPane value=\"d\" title=\"标签 4\">\n        内容 4\n      </Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction ScrollTabs() {\n  return (\n    <Tabs>\n      <Tabs.TabPane title=\"标签 1内容 1内容 1内容 1内容 1内容 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 5\">内容 5</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 6\">内容 6</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 7\">内容 7</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction DisableTabs() {\n  return (\n    <Tabs>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\" disabled>\n        内容 2\n      </Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction CardTabs() {\n  return (\n    <Tabs theme=\"card\">\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction TabsWithTabClick() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Tabs onTabClick={({ title }) => Toast.open(title)}>\n        <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n        <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n        <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      </Tabs>\n      <Toast id=\"toast\" />\n    </>\n  )\n}\n\nfunction StickyTabs() {\n  return (\n    <Tabs sticky>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction TabsWithCustomTitle() {\n  return (\n    <Tabs>\n      <Tabs.TabPane\n        title={\n          <>\n            <MoreOutlined /> 标签 1\n          </>\n        }\n      >\n        内容 1\n      </Tabs.TabPane>\n      <Tabs.TabPane\n        title={\n          <>\n            <MoreOutlined /> 标签 2\n          </>\n        }\n      >\n        内容 2\n      </Tabs.TabPane>\n      <Tabs.TabPane\n        title={\n          <>\n            <MoreOutlined /> 标签 3\n          </>\n        }\n      >\n        内容 3\n      </Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction AnimatedTabs() {\n  return (\n    <Tabs animated>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction SwipeableTabs() {\n  return (\n    <Tabs animated swipeable>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nexport default function TabsDemo() {\n  return (\n    <Page title=\"Tabs 标签页\" className=\"tabs-demo\">\n      <Block title=\"基础用法\">\n        <BasicTabs />\n      </Block>\n      <Block title=\"徽标用法\">\n        <BadgeTabs />\n      </Block>\n      <Block title=\"通过标识匹配\">\n        <KeyedTabs />\n      </Block>\n      <Block title=\"标签栏滚动\">\n        <ScrollTabs />\n      </Block>\n      <Block title=\"禁用标签\">\n        <DisableTabs />\n      </Block>\n      <Block title=\"样式风格\">\n        <CardTabs />\n      </Block>\n      <Block title=\"点击事件\">\n        <TabsWithTabClick />\n      </Block>\n      <Block title=\"粘性布局\">\n        <StickyTabs />\n      </Block>\n      <Block title=\"自定义标签\">\n        <TabsWithCustomTitle />\n      </Block>\n      <Block title=\"切换动画\">\n        <CustomWrapper>\n          <AnimatedTabs />\n        </CustomWrapper>\n      </Block>\n      <Block title=\"滑动切换\">\n        <CustomWrapper>\n          <SwipeableTabs />\n        </CustomWrapper>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "tabs",
        "code": "import { Tabs, Toast } from \"@taroify/core\"\nimport { MoreOutlined, Success } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport CustomWrapper from \"../../../components/custom-wrapper\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicTabs() {\n  return (\n    <Tabs>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction BadgeTabs() {\n  return (\n    <Tabs>\n      <Tabs.TabPane title=\"标签 1\" dot>内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\" badge={8}>内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\" badge=\"Hot\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\" badge={<Success className=\"badge-icon\" />}>内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction KeyedTabs() {\n  return (\n    <Tabs defaultValue=\"a\">\n      <Tabs.TabPane value=\"a\" title=\"标签 1\">\n        内容 1\n      </Tabs.TabPane>\n      <Tabs.TabPane value=\"b\" title=\"标签 2\">\n        内容 2\n      </Tabs.TabPane>\n      <Tabs.TabPane value=\"c\" title=\"标签 3\">\n        内容 3\n      </Tabs.TabPane>\n      <Tabs.TabPane value=\"d\" title=\"标签 4\">\n        内容 4\n      </Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction ScrollTabs() {\n  return (\n    <Tabs>\n      <Tabs.TabPane title=\"标签 1内容 1内容 1内容 1内容 1内容 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 5\">内容 5</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 6\">内容 6</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 7\">内容 7</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction DisableTabs() {\n  return (\n    <Tabs>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\" disabled>\n        内容 2\n      </Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction CardTabs() {\n  return (\n    <Tabs theme=\"card\">\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction TabsWithTabClick() {\n  return (\n    <>\n      <Toast id=\"toast\" />\n      <Tabs onTabClick={({ title }) => Toast.open(title)}>\n        <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n        <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n        <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      </Tabs>\n      <Toast id=\"toast\" />\n    </>\n  )\n}\n\nfunction StickyTabs() {\n  return (\n    <Tabs sticky>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction TabsWithCustomTitle() {\n  return (\n    <Tabs>\n      <Tabs.TabPane\n        title={\n          <>\n            <MoreOutlined /> 标签 1\n          </>\n        }\n      >\n        内容 1\n      </Tabs.TabPane>\n      <Tabs.TabPane\n        title={\n          <>\n            <MoreOutlined /> 标签 2\n          </>\n        }\n      >\n        内容 2\n      </Tabs.TabPane>\n      <Tabs.TabPane\n        title={\n          <>\n            <MoreOutlined /> 标签 3\n          </>\n        }\n      >\n        内容 3\n      </Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction AnimatedTabs() {\n  return (\n    <Tabs animated>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nfunction SwipeableTabs() {\n  return (\n    <Tabs animated swipeable>\n      <Tabs.TabPane title=\"标签 1\">内容 1</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 2\">内容 2</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 3\">内容 3</Tabs.TabPane>\n      <Tabs.TabPane title=\"标签 4\">内容 4</Tabs.TabPane>\n    </Tabs>\n  )\n}\n\nexport default function TabsDemo() {\n  return (\n    <Page title=\"Tabs 标签页\" className=\"tabs-demo\">\n      <Block title=\"基础用法\">\n        <BasicTabs />\n      </Block>\n      <Block title=\"徽标用法\">\n        <BadgeTabs />\n      </Block>\n      <Block title=\"通过标识匹配\">\n        <KeyedTabs />\n      </Block>\n      <Block title=\"标签栏滚动\">\n        <ScrollTabs />\n      </Block>\n      <Block title=\"禁用标签\">\n        <DisableTabs />\n      </Block>\n      <Block title=\"样式风格\">\n        <CardTabs />\n      </Block>\n      <Block title=\"点击事件\">\n        <TabsWithTabClick />\n      </Block>\n      <Block title=\"粘性布局\">\n        <StickyTabs />\n      </Block>\n      <Block title=\"自定义标签\">\n        <TabsWithCustomTitle />\n      </Block>\n      <Block title=\"切换动画\">\n        <CustomWrapper>\n          <AnimatedTabs />\n        </CustomWrapper>\n      </Block>\n      <Block title=\"滑动切换\">\n        <CustomWrapper>\n          <SwipeableTabs />\n        </CustomWrapper>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "tag",
    "description": "用于标记关键词和概括主要内容。",
    "usage": [
      "import {Cell, Tag} from \"@taroify/core\"\nimport {useState} from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction CloseTag() {\n  const [visible, setVisible] = useState(true)\n  return (\n    <>\n      {visible && (\n        <Tag color=\"primary\" size=\"medium\" closeable onClose={() => setVisible(false)}>\n          标签\n        </Tag>\n      )}\n    </>\n  )\n}\n\nexport default function TagDemo() {\n  return (\n    <Page title=\"Tag 标签\" className=\"tag-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <Cell title=\"颜色 default\">\n          <Tag>标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 primary\">\n          <Tag color=\"primary\">标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 info\">\n          <Tag color=\"info\">标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 success\">\n          <Tag color=\"success\">标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 warning\">\n          <Tag color=\"warning\">标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 danger\">\n          <Tag color=\"danger\">标签</Tag>\n        </Cell>\n      </Block>\n      <Block variant=\"card\" title=\"样式风格\">\n        <Cell title=\"空心样式\">\n          <Tag color=\"primary\" variant=\"outlined\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"圆角样式\">\n          <Tag color=\"primary\" shape=\"rounded\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"右侧圆角样式\">\n          <Tag color=\"primary\" shape=\"roundedRight\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"左侧圆角样式\">\n          <Tag color=\"primary\" shape=\"roundedLeft\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"可关闭标签\">\n          <CloseTag/>\n        </Cell>\n      </Block>\n      <Block variant=\"card\" title=\"标签大小\">\n        <Cell title=\"小号标签\">\n          <Tag color=\"primary\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"中号标签\">\n          <Tag color=\"primary\" size=\"medium\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"大号标签\">\n          <Tag color=\"primary\" size=\"large\" children=\"标签\"/>\n        </Cell>\n      </Block>\n      <Block variant=\"card\" title=\"自定义颜色\">\n        <Cell title=\"背景颜色\">\n          <Tag style={{backgroundColor: \"#7232dd\"}} children=\"标签\"/>\n        </Cell>\n        <Cell title=\"文字颜色\">\n          <Tag style={{backgroundColor: \"#ffe1e1\", color: \"#ad0000\"}} children=\"标签\"/>\n        </Cell>\n        <Cell title=\"空心颜色\">\n          <Tag style={{color: \"#7232dd\"}} variant=\"outlined\" children=\"标签\"/>\n        </Cell>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "tag",
        "code": "import {Cell, Tag} from \"@taroify/core\"\nimport {useState} from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction CloseTag() {\n  const [visible, setVisible] = useState(true)\n  return (\n    <>\n      {visible && (\n        <Tag color=\"primary\" size=\"medium\" closeable onClose={() => setVisible(false)}>\n          标签\n        </Tag>\n      )}\n    </>\n  )\n}\n\nexport default function TagDemo() {\n  return (\n    <Page title=\"Tag 标签\" className=\"tag-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <Cell title=\"颜色 default\">\n          <Tag>标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 primary\">\n          <Tag color=\"primary\">标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 info\">\n          <Tag color=\"info\">标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 success\">\n          <Tag color=\"success\">标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 warning\">\n          <Tag color=\"warning\">标签</Tag>\n        </Cell>\n        <Cell title=\"颜色 danger\">\n          <Tag color=\"danger\">标签</Tag>\n        </Cell>\n      </Block>\n      <Block variant=\"card\" title=\"样式风格\">\n        <Cell title=\"空心样式\">\n          <Tag color=\"primary\" variant=\"outlined\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"圆角样式\">\n          <Tag color=\"primary\" shape=\"rounded\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"右侧圆角样式\">\n          <Tag color=\"primary\" shape=\"roundedRight\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"左侧圆角样式\">\n          <Tag color=\"primary\" shape=\"roundedLeft\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"可关闭标签\">\n          <CloseTag/>\n        </Cell>\n      </Block>\n      <Block variant=\"card\" title=\"标签大小\">\n        <Cell title=\"小号标签\">\n          <Tag color=\"primary\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"中号标签\">\n          <Tag color=\"primary\" size=\"medium\" children=\"标签\"/>\n        </Cell>\n        <Cell title=\"大号标签\">\n          <Tag color=\"primary\" size=\"large\" children=\"标签\"/>\n        </Cell>\n      </Block>\n      <Block variant=\"card\" title=\"自定义颜色\">\n        <Cell title=\"背景颜色\">\n          <Tag style={{backgroundColor: \"#7232dd\"}} children=\"标签\"/>\n        </Cell>\n        <Cell title=\"文字颜色\">\n          <Tag style={{backgroundColor: \"#ffe1e1\", color: \"#ad0000\"}} children=\"标签\"/>\n        </Cell>\n        <Cell title=\"空心颜色\">\n          <Tag style={{color: \"#7232dd\"}} variant=\"outlined\" children=\"标签\"/>\n        </Cell>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "text-ellipsis",
    "description": "对长文本进行省略，支持展开/收起。",
    "usage": [
      "import { TextEllipsis } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function TextEllipsisDemo() {\n  return (\n    <Page title=\"TextEllipsis 文本省略\" className=\"text-props-ellipsis-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <TextEllipsis content=\"慢慢来，不要急，生活给你出了难题，可也终有一天会给出答案。\" />\n      </Block>\n      <Block variant=\"card\" title=\"展开/收起\">\n        <TextEllipsis content=\"似水流年是一个人所有的一切，只有这个东西，才真正归你所有。其余的一切，都是片刻的欢娱和不幸，转眼间就已跑到那似水流年里去了。\" expandText=\"展开\" collapseText=\"收起\" />\n      </Block>\n      <Block variant=\"card\" title=\"自定义展示行数\">\n        <TextEllipsis content=\"那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\" rows={2} expandText=\"展开\" collapseText=\"收起\" />\n        <TextEllipsis style={{ marginTop: \"0.2rem\" }} content=\"那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\" rows={4} expandText=\"展开\" collapseText=\"收起\" />\n      </Block>\n      <Block variant=\"card\" title=\"自定义省略位置\">\n          <TextEllipsis content=\"那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\" position=\"start\" rows={3} expandText=\"展开\" collapseText=\"收起\" />\n          <TextEllipsis style={{ marginTop: \"0.2rem\" }} content=\"那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\" position=\"middle\" rows={3} expandText=\"展开\" collapseText=\"收起\" />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "text-ellipsis",
        "code": "import { TextEllipsis } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nexport default function TextEllipsisDemo() {\n  return (\n    <Page title=\"TextEllipsis 文本省略\" className=\"text-props-ellipsis-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <TextEllipsis content=\"慢慢来，不要急，生活给你出了难题，可也终有一天会给出答案。\" />\n      </Block>\n      <Block variant=\"card\" title=\"展开/收起\">\n        <TextEllipsis content=\"似水流年是一个人所有的一切，只有这个东西，才真正归你所有。其余的一切，都是片刻的欢娱和不幸，转眼间就已跑到那似水流年里去了。\" expandText=\"展开\" collapseText=\"收起\" />\n      </Block>\n      <Block variant=\"card\" title=\"自定义展示行数\">\n        <TextEllipsis content=\"那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\" rows={2} expandText=\"展开\" collapseText=\"收起\" />\n        <TextEllipsis style={{ marginTop: \"0.2rem\" }} content=\"那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\" rows={4} expandText=\"展开\" collapseText=\"收起\" />\n      </Block>\n      <Block variant=\"card\" title=\"自定义省略位置\">\n          <TextEllipsis content=\"那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\" position=\"start\" rows={3} expandText=\"展开\" collapseText=\"收起\" />\n          <TextEllipsis style={{ marginTop: \"0.2rem\" }} content=\"那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。\" position=\"middle\" rows={3} expandText=\"展开\" collapseText=\"收起\" />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "timeline",
    "description": "按时间顺序来展示了一系列的事件。",
    "usage": [
      "import { Timeline } from \"@taroify/core\"\nimport { FireOutlined, GemOutlined, SmileOutlined, StarOutlined } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport { demoPrefixClassname } from \"../../../styles/prefix\"\nimport \"./index.scss\"\n\nfunction RightTimeline() {\n  return (\n    <Timeline position=\"right\">\n      <Timeline.Item>Eat</Timeline.Item>\n      <Timeline.Item>Code</Timeline.Item>\n      <Timeline.Item>Sleep</Timeline.Item>\n    </Timeline>\n  )\n}\n\nfunction LeftTimeline() {\n  return (\n    <Timeline position=\"left\">\n      <Timeline.Item>Eat</Timeline.Item>\n      <Timeline.Item>Code</Timeline.Item>\n      <Timeline.Item>Sleep</Timeline.Item>\n    </Timeline>\n  )\n}\n\nfunction AlternateTimeline() {\n  return (\n    <Timeline position=\"alternate\">\n      <Timeline.Item>Eat</Timeline.Item>\n      <Timeline.Item>Code</Timeline.Item>\n      <Timeline.Item>Sleep</Timeline.Item>\n      <Timeline.Item>Repeat</Timeline.Item>\n    </Timeline>\n  )\n}\n\nfunction OutlinedTimeline() {\n  return (\n    <Timeline position=\"alternate\">\n      <Timeline.Item dot={{ variant: \"outlined\" }}>Eat</Timeline.Item>\n      <Timeline.Item dot={{ variant: \"outlined\", color: \"primary\" }}>Code</Timeline.Item>\n      <Timeline.Item dot={{ variant: \"outlined\", color: \"danger\" }}>Sleep</Timeline.Item>\n      <Timeline.Item dot={{ variant: \"outlined\" }}>Repeat</Timeline.Item>\n    </Timeline>\n  )\n}\n\nfunction CustomTimeline() {\n  return (\n    <Timeline>\n      <Timeline.Item>\n        <Timeline.Content align=\"center\">9:30 am</Timeline.Content>\n        <Timeline.Separator>\n          <Timeline.Connector />\n          <Timeline.Dot>\n            <FireOutlined size=\"24\" />\n          </Timeline.Dot>\n          <Timeline.Connector />\n        </Timeline.Separator>\n        <Timeline.Content direction=\"column\" align=\"start\">\n          <View className=\"timeline-title\">Eat</View>\n          <View>Because you need strength</View>\n        </Timeline.Content>\n      </Timeline.Item>\n      <Timeline.Item>\n        <Timeline.Content direction=\"column\" align=\"end\">\n          <View className=\"timeline-title\">Code</View>\n          <View>awesome</View>\n        </Timeline.Content>\n        <Timeline.Separator>\n          <Timeline.Connector />\n          <Timeline.Dot color=\"primary\">\n            <StarOutlined size=\"24\" />\n          </Timeline.Dot>\n          <Timeline.Connector />\n        </Timeline.Separator>\n        <Timeline.Content align=\"center\">10:00 am</Timeline.Content>\n      </Timeline.Item>\n      <Timeline.Item>\n        <Timeline.Content />\n        <Timeline.Separator>\n          <Timeline.Connector />\n          <Timeline.Dot variant=\"outlined\" color=\"primary\">\n            <GemOutlined size=\"24\" />\n          </Timeline.Dot>\n          <Timeline.Connector />\n        </Timeline.Separator>\n        <Timeline.Content direction=\"column\" align=\"start\">\n          <View className=\"timeline-title\">Sleep</View>\n          <View>Because you need rest</View>\n        </Timeline.Content>\n      </Timeline.Item>\n      <Timeline.Item>\n        <Timeline.Content direction=\"column\" align=\"end\">\n          <View className=\"timeline-title\">Repeat</View>\n          <View>you love!</View>\n        </Timeline.Content>\n        <Timeline.Separator>\n          <Timeline.Connector />\n          <Timeline.Dot color=\"danger\">\n            <SmileOutlined size=\"24\" />\n          </Timeline.Dot>\n          <Timeline.Connector />\n        </Timeline.Separator>\n      </Timeline.Item>\n    </Timeline>\n  )\n}\n\nexport default function TimelineDemo() {\n  return (\n    <Page title=\"Timeline 时间轴\" className=\"timeline-demo\">\n      <Block title=\"基础用法\">\n        <View style={{ width: \"calc(50% - 12px)\" }} />\n        <View className={demoPrefixClassname(\"timeline-block\")}>\n          <RightTimeline />\n        </View>\n      </Block>\n      <Block title=\"左边用法\">\n        <View className={demoPrefixClassname(\"timeline-block\")}>\n          <LeftTimeline />\n        </View>\n        <View className={demoPrefixClassname(\"timeline-block\")} />\n      </Block>\n      <Block title=\"交替用法\">\n        <View style={{ width: \"calc(100% - 12px)\" }}>\n          <AlternateTimeline />\n        </View>\n      </Block>\n      <Block title=\"描边用法\">\n        <View style={{ width: \"calc(100% - 12px)\" }}>\n          <OutlinedTimeline />\n        </View>\n      </Block>\n      <Block title=\"自定义用法\">\n        <View style={{ width: \"calc(100% - 12px)\" }}>\n          <CustomTimeline />\n        </View>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "timeline",
        "code": "import { Timeline } from \"@taroify/core\"\nimport { FireOutlined, GemOutlined, SmileOutlined, StarOutlined } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport { demoPrefixClassname } from \"../../../styles/prefix\"\nimport \"./index.scss\"\n\nfunction RightTimeline() {\n  return (\n    <Timeline position=\"right\">\n      <Timeline.Item>Eat</Timeline.Item>\n      <Timeline.Item>Code</Timeline.Item>\n      <Timeline.Item>Sleep</Timeline.Item>\n    </Timeline>\n  )\n}\n\nfunction LeftTimeline() {\n  return (\n    <Timeline position=\"left\">\n      <Timeline.Item>Eat</Timeline.Item>\n      <Timeline.Item>Code</Timeline.Item>\n      <Timeline.Item>Sleep</Timeline.Item>\n    </Timeline>\n  )\n}\n\nfunction AlternateTimeline() {\n  return (\n    <Timeline position=\"alternate\">\n      <Timeline.Item>Eat</Timeline.Item>\n      <Timeline.Item>Code</Timeline.Item>\n      <Timeline.Item>Sleep</Timeline.Item>\n      <Timeline.Item>Repeat</Timeline.Item>\n    </Timeline>\n  )\n}\n\nfunction OutlinedTimeline() {\n  return (\n    <Timeline position=\"alternate\">\n      <Timeline.Item dot={{ variant: \"outlined\" }}>Eat</Timeline.Item>\n      <Timeline.Item dot={{ variant: \"outlined\", color: \"primary\" }}>Code</Timeline.Item>\n      <Timeline.Item dot={{ variant: \"outlined\", color: \"danger\" }}>Sleep</Timeline.Item>\n      <Timeline.Item dot={{ variant: \"outlined\" }}>Repeat</Timeline.Item>\n    </Timeline>\n  )\n}\n\nfunction CustomTimeline() {\n  return (\n    <Timeline>\n      <Timeline.Item>\n        <Timeline.Content align=\"center\">9:30 am</Timeline.Content>\n        <Timeline.Separator>\n          <Timeline.Connector />\n          <Timeline.Dot>\n            <FireOutlined size=\"24\" />\n          </Timeline.Dot>\n          <Timeline.Connector />\n        </Timeline.Separator>\n        <Timeline.Content direction=\"column\" align=\"start\">\n          <View className=\"timeline-title\">Eat</View>\n          <View>Because you need strength</View>\n        </Timeline.Content>\n      </Timeline.Item>\n      <Timeline.Item>\n        <Timeline.Content direction=\"column\" align=\"end\">\n          <View className=\"timeline-title\">Code</View>\n          <View>awesome</View>\n        </Timeline.Content>\n        <Timeline.Separator>\n          <Timeline.Connector />\n          <Timeline.Dot color=\"primary\">\n            <StarOutlined size=\"24\" />\n          </Timeline.Dot>\n          <Timeline.Connector />\n        </Timeline.Separator>\n        <Timeline.Content align=\"center\">10:00 am</Timeline.Content>\n      </Timeline.Item>\n      <Timeline.Item>\n        <Timeline.Content />\n        <Timeline.Separator>\n          <Timeline.Connector />\n          <Timeline.Dot variant=\"outlined\" color=\"primary\">\n            <GemOutlined size=\"24\" />\n          </Timeline.Dot>\n          <Timeline.Connector />\n        </Timeline.Separator>\n        <Timeline.Content direction=\"column\" align=\"start\">\n          <View className=\"timeline-title\">Sleep</View>\n          <View>Because you need rest</View>\n        </Timeline.Content>\n      </Timeline.Item>\n      <Timeline.Item>\n        <Timeline.Content direction=\"column\" align=\"end\">\n          <View className=\"timeline-title\">Repeat</View>\n          <View>you love!</View>\n        </Timeline.Content>\n        <Timeline.Separator>\n          <Timeline.Connector />\n          <Timeline.Dot color=\"danger\">\n            <SmileOutlined size=\"24\" />\n          </Timeline.Dot>\n          <Timeline.Connector />\n        </Timeline.Separator>\n      </Timeline.Item>\n    </Timeline>\n  )\n}\n\nexport default function TimelineDemo() {\n  return (\n    <Page title=\"Timeline 时间轴\" className=\"timeline-demo\">\n      <Block title=\"基础用法\">\n        <View style={{ width: \"calc(50% - 12px)\" }} />\n        <View className={demoPrefixClassname(\"timeline-block\")}>\n          <RightTimeline />\n        </View>\n      </Block>\n      <Block title=\"左边用法\">\n        <View className={demoPrefixClassname(\"timeline-block\")}>\n          <LeftTimeline />\n        </View>\n        <View className={demoPrefixClassname(\"timeline-block\")} />\n      </Block>\n      <Block title=\"交替用法\">\n        <View style={{ width: \"calc(100% - 12px)\" }}>\n          <AlternateTimeline />\n        </View>\n      </Block>\n      <Block title=\"描边用法\">\n        <View style={{ width: \"calc(100% - 12px)\" }}>\n          <OutlinedTimeline />\n        </View>\n      </Block>\n      <Block title=\"自定义用法\">\n        <View style={{ width: \"calc(100% - 12px)\" }}>\n          <CustomTimeline />\n        </View>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "toast",
    "description": "在页面中间弹出黑色半透明提示，用于消息通知、加载提示、操作结果提示等场景。",
    "usage": [
      "import { Cell, Image, Loading, Toast } from \"@taroify/core\"\nimport { ArrowRight, LikeOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nexport default function ToastDemo() {\n  return (\n    <Page title=\"Toast 轻提示\" className=\"toast-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <Toast id=\"toast\" />\n        <Cell\n          clickable\n          title=\"文字提示\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ type: \"text\", message: \"文字提示\" })}\n        />\n        <Cell\n          clickable\n          title=\"加载提示\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ type: \"loading\", message: \"加载中...\" })}\n        />\n        <Cell\n          clickable\n          title=\"成功提示\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ type: \"success\", message: \"成功文案\" })}\n        />\n        <Cell\n          clickable\n          title=\"失败提示\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ type: \"fail\", message: \"失败文案\" })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"自定义图标\">\n        <Cell\n          clickable\n          title=\"自定义图标\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ message: \"自定义图标\", icon: <LikeOutlined /> })}\n        />\n        <Cell\n          clickable\n          title=\"自定义图片\"\n          rightIcon={<ArrowRight />}\n          onClick={() =>\n            Toast.open({\n              message: \"自定义图片\",\n              icon: (\n                <Image\n                  style={{\n                    width: \"1em\",\n                    height: \"1em\",\n                  }}\n                  src=\"https://img01.yzcdn.cn/vant/logo.png\"\n                />\n              ),\n            })\n          }\n        />\n        <Cell\n          clickable\n          title=\"自定义加载图标\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ message: \"加载中...\", icon: <Loading type=\"spinner\" /> })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"自定义位置\">\n        <Cell\n          clickable\n          title=\"顶部展示\"\n          rightIcon={<ArrowRight />}\n          onClick={() =>\n            Toast.open({\n              position: \"top\",\n              message: \"顶部展示\",\n            })\n          }\n        />\n        <Cell\n          clickable\n          title=\"底部展示\"\n          rightIcon={<ArrowRight />}\n          onClick={() =>\n            Toast.open({\n              position: \"bottom\",\n              message: \"底部展示\",\n            })\n          }\n        />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "toast",
        "code": "import { Cell, Image, Loading, Toast } from \"@taroify/core\"\nimport { ArrowRight, LikeOutlined } from \"@taroify/icons\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nexport default function ToastDemo() {\n  return (\n    <Page title=\"Toast 轻提示\" className=\"toast-demo\">\n      <Block variant=\"card\" title=\"基础用法\">\n        <Toast id=\"toast\" />\n        <Cell\n          clickable\n          title=\"文字提示\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ type: \"text\", message: \"文字提示\" })}\n        />\n        <Cell\n          clickable\n          title=\"加载提示\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ type: \"loading\", message: \"加载中...\" })}\n        />\n        <Cell\n          clickable\n          title=\"成功提示\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ type: \"success\", message: \"成功文案\" })}\n        />\n        <Cell\n          clickable\n          title=\"失败提示\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ type: \"fail\", message: \"失败文案\" })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"自定义图标\">\n        <Cell\n          clickable\n          title=\"自定义图标\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ message: \"自定义图标\", icon: <LikeOutlined /> })}\n        />\n        <Cell\n          clickable\n          title=\"自定义图片\"\n          rightIcon={<ArrowRight />}\n          onClick={() =>\n            Toast.open({\n              message: \"自定义图片\",\n              icon: (\n                <Image\n                  style={{\n                    width: \"1em\",\n                    height: \"1em\",\n                  }}\n                  src=\"https://img01.yzcdn.cn/vant/logo.png\"\n                />\n              ),\n            })\n          }\n        />\n        <Cell\n          clickable\n          title=\"自定义加载图标\"\n          rightIcon={<ArrowRight />}\n          onClick={() => Toast.open({ message: \"加载中...\", icon: <Loading type=\"spinner\" /> })}\n        />\n      </Block>\n      <Block variant=\"card\" title=\"自定义位置\">\n        <Cell\n          clickable\n          title=\"顶部展示\"\n          rightIcon={<ArrowRight />}\n          onClick={() =>\n            Toast.open({\n              position: \"top\",\n              message: \"顶部展示\",\n            })\n          }\n        />\n        <Cell\n          clickable\n          title=\"底部展示\"\n          rightIcon={<ArrowRight />}\n          onClick={() =>\n            Toast.open({\n              position: \"bottom\",\n              message: \"底部展示\",\n            })\n          }\n        />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "tree-select",
    "description": "用于从一组相关联的数据集合中进行选择。",
    "usage": [
      "import { Image, TreeSelect } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nfunction RadioTreeSelect() {\n  return (\n    <TreeSelect>\n      <TreeSelect.Tab title=\"浙江\">\n        <TreeSelect.Option value={0}>杭州</TreeSelect.Option>\n        <TreeSelect.Option value={1}>温州</TreeSelect.Option>\n        <TreeSelect.Option value={2} disabled>\n          宁波\n        </TreeSelect.Option>\n        <TreeSelect.Option value={3}>义乌</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"江苏\">\n        <TreeSelect.Option value={4}>南京</TreeSelect.Option>\n        <TreeSelect.Option value={5}>无锡</TreeSelect.Option>\n        <TreeSelect.Option value={6}>徐州</TreeSelect.Option>\n        <TreeSelect.Option value={7}>苏州</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"福建\" disabled>\n        <TreeSelect.Option value={8}>泉州</TreeSelect.Option>\n        <TreeSelect.Option value={9}>厦门</TreeSelect.Option>\n      </TreeSelect.Tab>\n    </TreeSelect>\n  )\n}\n\nfunction MultiselectTreeSelect() {\n  return (\n    <TreeSelect defaultValue={[0, 1]}>\n      <TreeSelect.Tab title=\"浙江\">\n        <TreeSelect.Option value={0}>杭州</TreeSelect.Option>\n        <TreeSelect.Option value={1}>温州</TreeSelect.Option>\n        <TreeSelect.Option value={2} disabled>\n          宁波\n        </TreeSelect.Option>\n        <TreeSelect.Option value={3}>义乌</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"江苏\">\n        <TreeSelect.Option value={4}>南京</TreeSelect.Option>\n        <TreeSelect.Option value={5}>无锡</TreeSelect.Option>\n        <TreeSelect.Option value={6}>徐州</TreeSelect.Option>\n        <TreeSelect.Option value={7}>苏州</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"福建\" disabled>\n        <TreeSelect.Option value={8}>泉州</TreeSelect.Option>\n        <TreeSelect.Option value={9}>厦门</TreeSelect.Option>\n      </TreeSelect.Tab>\n    </TreeSelect>\n  )\n}\n\nfunction TreeSelectWithCustomContent() {\n  return (\n    <TreeSelect>\n      <TreeSelect.Tab title=\"分组 1\">\n        <Image src=\"https://img.yzcdn.cn/vant/apple-1.jpg\" />\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"分组 2\">\n        <Image src=\"https://img.yzcdn.cn/vant/apple-2.jpg\" />\n      </TreeSelect.Tab>\n    </TreeSelect>\n  )\n}\n\nfunction BadgeTreeSelect() {\n  return (\n    <TreeSelect>\n      <TreeSelect.Tab badge title=\"浙江\">\n        <TreeSelect.Option value={0}>杭州</TreeSelect.Option>\n        <TreeSelect.Option value={1}>温州</TreeSelect.Option>\n        <TreeSelect.Option value={2} disabled>\n          宁波\n        </TreeSelect.Option>\n        <TreeSelect.Option value={3}>义乌</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab badge=\"5\" title=\"江苏\">\n        <TreeSelect.Option value={4}>南京</TreeSelect.Option>\n        <TreeSelect.Option value={5}>无锡</TreeSelect.Option>\n        <TreeSelect.Option value={6}>徐州</TreeSelect.Option>\n        <TreeSelect.Option value={7}>苏州</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"福建\" disabled>\n        <TreeSelect.Option value={8}>泉州</TreeSelect.Option>\n        <TreeSelect.Option value={9}>厦门</TreeSelect.Option>n\n      </TreeSelect.Tab>\n    </TreeSelect>\n  )\n}\n\nexport default function TreeSelectDemo() {\n  return (\n    <Page title=\"TreeSelect 分类选择\" className=\"tree-select-demo\">\n      <Block title=\"单选模式\">\n        <RadioTreeSelect />\n      </Block>\n      <Block title=\"多选模式\">\n        <MultiselectTreeSelect />\n      </Block>\n      <Block title=\"自定义内容\">\n        <TreeSelectWithCustomContent />\n      </Block>\n      <Block title=\"徽标提示\">\n        <BadgeTreeSelect />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "tree-select",
        "code": "import { Image, TreeSelect } from \"@taroify/core\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\n\nimport \"./index.scss\"\n\nfunction RadioTreeSelect() {\n  return (\n    <TreeSelect>\n      <TreeSelect.Tab title=\"浙江\">\n        <TreeSelect.Option value={0}>杭州</TreeSelect.Option>\n        <TreeSelect.Option value={1}>温州</TreeSelect.Option>\n        <TreeSelect.Option value={2} disabled>\n          宁波\n        </TreeSelect.Option>\n        <TreeSelect.Option value={3}>义乌</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"江苏\">\n        <TreeSelect.Option value={4}>南京</TreeSelect.Option>\n        <TreeSelect.Option value={5}>无锡</TreeSelect.Option>\n        <TreeSelect.Option value={6}>徐州</TreeSelect.Option>\n        <TreeSelect.Option value={7}>苏州</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"福建\" disabled>\n        <TreeSelect.Option value={8}>泉州</TreeSelect.Option>\n        <TreeSelect.Option value={9}>厦门</TreeSelect.Option>\n      </TreeSelect.Tab>\n    </TreeSelect>\n  )\n}\n\nfunction MultiselectTreeSelect() {\n  return (\n    <TreeSelect defaultValue={[0, 1]}>\n      <TreeSelect.Tab title=\"浙江\">\n        <TreeSelect.Option value={0}>杭州</TreeSelect.Option>\n        <TreeSelect.Option value={1}>温州</TreeSelect.Option>\n        <TreeSelect.Option value={2} disabled>\n          宁波\n        </TreeSelect.Option>\n        <TreeSelect.Option value={3}>义乌</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"江苏\">\n        <TreeSelect.Option value={4}>南京</TreeSelect.Option>\n        <TreeSelect.Option value={5}>无锡</TreeSelect.Option>\n        <TreeSelect.Option value={6}>徐州</TreeSelect.Option>\n        <TreeSelect.Option value={7}>苏州</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"福建\" disabled>\n        <TreeSelect.Option value={8}>泉州</TreeSelect.Option>\n        <TreeSelect.Option value={9}>厦门</TreeSelect.Option>\n      </TreeSelect.Tab>\n    </TreeSelect>\n  )\n}\n\nfunction TreeSelectWithCustomContent() {\n  return (\n    <TreeSelect>\n      <TreeSelect.Tab title=\"分组 1\">\n        <Image src=\"https://img.yzcdn.cn/vant/apple-1.jpg\" />\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"分组 2\">\n        <Image src=\"https://img.yzcdn.cn/vant/apple-2.jpg\" />\n      </TreeSelect.Tab>\n    </TreeSelect>\n  )\n}\n\nfunction BadgeTreeSelect() {\n  return (\n    <TreeSelect>\n      <TreeSelect.Tab badge title=\"浙江\">\n        <TreeSelect.Option value={0}>杭州</TreeSelect.Option>\n        <TreeSelect.Option value={1}>温州</TreeSelect.Option>\n        <TreeSelect.Option value={2} disabled>\n          宁波\n        </TreeSelect.Option>\n        <TreeSelect.Option value={3}>义乌</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab badge=\"5\" title=\"江苏\">\n        <TreeSelect.Option value={4}>南京</TreeSelect.Option>\n        <TreeSelect.Option value={5}>无锡</TreeSelect.Option>\n        <TreeSelect.Option value={6}>徐州</TreeSelect.Option>\n        <TreeSelect.Option value={7}>苏州</TreeSelect.Option>\n      </TreeSelect.Tab>\n      <TreeSelect.Tab title=\"福建\" disabled>\n        <TreeSelect.Option value={8}>泉州</TreeSelect.Option>\n        <TreeSelect.Option value={9}>厦门</TreeSelect.Option>n\n      </TreeSelect.Tab>\n    </TreeSelect>\n  )\n}\n\nexport default function TreeSelectDemo() {\n  return (\n    <Page title=\"TreeSelect 分类选择\" className=\"tree-select-demo\">\n      <Block title=\"单选模式\">\n        <RadioTreeSelect />\n      </Block>\n      <Block title=\"多选模式\">\n        <MultiselectTreeSelect />\n      </Block>\n      <Block title=\"自定义内容\">\n        <TreeSelectWithCustomContent />\n      </Block>\n      <Block title=\"徽标提示\">\n        <BadgeTreeSelect />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "uploader",
    "description": "用于将本地的图片或文件上传至服务器，并在上传过程中展示预览图和上传进度。目前 Uploader 组件不包含将文件上传至服务器的接口逻辑，该步骤需要自行实现。",
    "usage": [
      "import { Button, Uploader } from \"@taroify/core\"\nimport { Plus } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport { chooseImage } from \"@tarojs/taro\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicUploader() {\n  const [file, setFile] = useState<Uploader.File>()\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFile({\n        url: tempFiles[0].path,\n        type: tempFiles[0].type,\n        name: tempFiles[0].originalFileObj?.name,\n      })\n    })\n  }\n\n  return <Uploader value={file} onUpload={onUpload} onChange={setFile} />\n}\n\nfunction PreviewUploader() {\n  const [files, setFiles] = useState<Uploader.File[]>([\n    {\n      url: \"https://img01.yzcdn.cn/vant/leaf.jpg\",\n    },\n    {\n      url: \"https://img.yzcdn.cn/vant/tree.jpg\",\n    },\n  ])\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFiles([\n        ...files,\n        ...tempFiles.map(({ path, type, originalFileObj }) => ({\n          type,\n          url: path,\n          name: originalFileObj?.name,\n        })),\n      ])\n    })\n  }\n\n  return <Uploader value={files} multiple onUpload={onUpload} onChange={setFiles} />\n}\n\nfunction UploaderWithStatus() {\n  const [files, setFiles] = useState<Uploader.File[]>([\n    {\n      url: \"https://img01.yzcdn.cn/vant/leaf.jpg\",\n      status: \"uploading\",\n      message: \"上传中...\",\n    },\n    {\n      url: \"https://img01.yzcdn.cn/vant/tree.jpg\",\n      status: \"failed\",\n      message: \"上传失败\",\n    },\n  ])\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFiles([\n        ...files,\n        ...tempFiles.map(({ path, type, originalFileObj }) => ({\n          type,\n          url: path,\n          name: originalFileObj?.name,\n        })),\n      ])\n    })\n  }\n\n  return <Uploader value={files} multiple onUpload={onUpload} onChange={setFiles} />\n}\n\nfunction MaxFilesUploader() {\n  const [files, setFiles] = useState<Uploader.File[]>([])\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFiles([\n        ...files,\n        ...tempFiles.map(({ path, type, originalFileObj }) => ({\n          type,\n          url: path,\n          name: originalFileObj?.name,\n        })),\n      ])\n    })\n  }\n\n  return <Uploader value={files} multiple maxFiles={2} onUpload={onUpload} onChange={setFiles} />\n}\n\nfunction CustomUploader() {\n  return (\n    <Uploader>\n      <Button icon={<Plus />} color=\"primary\">\n        上传文件\n      </Button>\n    </Uploader>\n  )\n}\n\nfunction CustomPreviewUploader() {\n  const [files, setFiles] = useState<Uploader.File[]>([\n    {\n      url: \"https://img01.yzcdn.cn/vant/leaf.jpg\",\n    },\n  ])\n\n  function onUpload() {\n    chooseImage({\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFiles([\n        ...files,\n        ...tempFiles.map(({ path, type, originalFileObj }) => ({\n          type,\n          url: path,\n          name: originalFileObj?.name,\n        })),\n      ])\n    })\n  }\n\n  return (\n    <Uploader value={files} multiple onUpload={onUpload} onChange={setFiles}>\n      {files.map((image) => (\n        <Uploader.Image\n          key={image.url}\n          url={image.url}\n          name={image.name}\n          type={image.type}\n          onRemove={() => setFiles(files.filter((item) => item !== image))}\n        >\n          <View className=\"preview-cover taroify-ellipsis\">图片名称</View>\n        </Uploader.Image>\n      ))}\n      <Uploader.Upload />\n    </Uploader>\n  )\n}\n\nfunction DisabledUploader() {\n  return <Uploader disabled />\n}\n\nexport default function UploaderDemo() {\n  return (\n    <Page title=\"Uploader 文件上传\" className=\"uploader-demo\">\n      <Block title=\"基础用法\">\n        <BasicUploader />\n      </Block>\n      <Block title=\"文件预览\">\n        <PreviewUploader />\n      </Block>\n      <Block title=\"上传状态\">\n        <UploaderWithStatus />\n      </Block>\n      <Block title=\"限制上传数量\">\n        <MaxFilesUploader />\n      </Block>\n      <Block title=\"自定义上传样式\">\n        <CustomUploader />\n      </Block>\n      <Block title=\"自定义预览样式\">\n        <CustomPreviewUploader />\n      </Block>\n      <Block title=\"禁用文件上传\">\n        <DisabledUploader />\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "uploader",
        "code": "import { Button, Uploader } from \"@taroify/core\"\nimport { Plus } from \"@taroify/icons\"\nimport { View } from \"@tarojs/components\"\nimport { chooseImage } from \"@tarojs/taro\"\nimport { useState } from \"react\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction BasicUploader() {\n  const [file, setFile] = useState<Uploader.File>()\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFile({\n        url: tempFiles[0].path,\n        type: tempFiles[0].type,\n        name: tempFiles[0].originalFileObj?.name,\n      })\n    })\n  }\n\n  return <Uploader value={file} onUpload={onUpload} onChange={setFile} />\n}\n\nfunction PreviewUploader() {\n  const [files, setFiles] = useState<Uploader.File[]>([\n    {\n      url: \"https://img01.yzcdn.cn/vant/leaf.jpg\",\n    },\n    {\n      url: \"https://img.yzcdn.cn/vant/tree.jpg\",\n    },\n  ])\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFiles([\n        ...files,\n        ...tempFiles.map(({ path, type, originalFileObj }) => ({\n          type,\n          url: path,\n          name: originalFileObj?.name,\n        })),\n      ])\n    })\n  }\n\n  return <Uploader value={files} multiple onUpload={onUpload} onChange={setFiles} />\n}\n\nfunction UploaderWithStatus() {\n  const [files, setFiles] = useState<Uploader.File[]>([\n    {\n      url: \"https://img01.yzcdn.cn/vant/leaf.jpg\",\n      status: \"uploading\",\n      message: \"上传中...\",\n    },\n    {\n      url: \"https://img01.yzcdn.cn/vant/tree.jpg\",\n      status: \"failed\",\n      message: \"上传失败\",\n    },\n  ])\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFiles([\n        ...files,\n        ...tempFiles.map(({ path, type, originalFileObj }) => ({\n          type,\n          url: path,\n          name: originalFileObj?.name,\n        })),\n      ])\n    })\n  }\n\n  return <Uploader value={files} multiple onUpload={onUpload} onChange={setFiles} />\n}\n\nfunction MaxFilesUploader() {\n  const [files, setFiles] = useState<Uploader.File[]>([])\n\n  function onUpload() {\n    chooseImage({\n      count: 1,\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFiles([\n        ...files,\n        ...tempFiles.map(({ path, type, originalFileObj }) => ({\n          type,\n          url: path,\n          name: originalFileObj?.name,\n        })),\n      ])\n    })\n  }\n\n  return <Uploader value={files} multiple maxFiles={2} onUpload={onUpload} onChange={setFiles} />\n}\n\nfunction CustomUploader() {\n  return (\n    <Uploader>\n      <Button icon={<Plus />} color=\"primary\">\n        上传文件\n      </Button>\n    </Uploader>\n  )\n}\n\nfunction CustomPreviewUploader() {\n  const [files, setFiles] = useState<Uploader.File[]>([\n    {\n      url: \"https://img01.yzcdn.cn/vant/leaf.jpg\",\n    },\n  ])\n\n  function onUpload() {\n    chooseImage({\n      sizeType: [\"original\", \"compressed\"],\n      sourceType: [\"album\", \"camera\"],\n    }).then(({ tempFiles }) => {\n      setFiles([\n        ...files,\n        ...tempFiles.map(({ path, type, originalFileObj }) => ({\n          type,\n          url: path,\n          name: originalFileObj?.name,\n        })),\n      ])\n    })\n  }\n\n  return (\n    <Uploader value={files} multiple onUpload={onUpload} onChange={setFiles}>\n      {files.map((image) => (\n        <Uploader.Image\n          key={image.url}\n          url={image.url}\n          name={image.name}\n          type={image.type}\n          onRemove={() => setFiles(files.filter((item) => item !== image))}\n        >\n          <View className=\"preview-cover taroify-ellipsis\">图片名称</View>\n        </Uploader.Image>\n      ))}\n      <Uploader.Upload />\n    </Uploader>\n  )\n}\n\nfunction DisabledUploader() {\n  return <Uploader disabled />\n}\n\nexport default function UploaderDemo() {\n  return (\n    <Page title=\"Uploader 文件上传\" className=\"uploader-demo\">\n      <Block title=\"基础用法\">\n        <BasicUploader />\n      </Block>\n      <Block title=\"文件预览\">\n        <PreviewUploader />\n      </Block>\n      <Block title=\"上传状态\">\n        <UploaderWithStatus />\n      </Block>\n      <Block title=\"限制上传数量\">\n        <MaxFilesUploader />\n      </Block>\n      <Block title=\"自定义上传样式\">\n        <CustomUploader />\n      </Block>\n      <Block title=\"自定义预览样式\">\n        <CustomPreviewUploader />\n      </Block>\n      <Block title=\"禁用文件上传\">\n        <DisabledUploader />\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  },
  {
    "name": "watermark",
    "description": "在页面上添加特定的文字或图案作为水印，可用于防止信息盗用。",
    "usage": [
      "import { useState } from \"react\"\nimport { Watermark, Button } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction WatermarkFullPageDemo() {\n  const [fullPage, setFullPage] = useState(false)\n  return <>\n    <Button color=\"primary\" onClick={() => setFullPage(prev => !prev)}>切换</Button>\n    <Watermark\n      image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n      opacity={0.2}\n      fullPage={fullPage}\n    />\n  </>\n}\n\nexport default function WatermarkDemo() {\n  return (\n    <Page title=\"Watermark 水印\" className=\"watermark-demo\">\n      <Block variant=\"card\" title=\"文字水印\">\n        <View className=\"watermark-demo-wrapper\">\n          <Watermark content=\"taroify\" />\n        </View>\n      </Block>\n      <Block variant=\"card\" title=\"图片水印\">\n        <View className=\"watermark-demo-wrapper\">\n        <Watermark\n          image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n          opacity={0.2}\n        />\n        </View>\n      </Block>\n      <Block variant=\"card\" title=\"自定义间隔\">\n        <View className=\"watermark-demo-wrapper\">\n        <Watermark\n          image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n          gapX={50}\n          gapY={50}\n          opacity={0.2}\n        />\n        </View>\n      </Block>\n      <Block variant=\"card\" title=\"自定义倾斜角度\">\n        <View className=\"watermark-demo-wrapper\">\n        <Watermark\n          image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n          rotate={22}\n          opacity={0.2}\n        />\n        </View>\n      </Block>\n      <Block variant=\"card\" title=\"显示范围\">\n        <View className=\"watermark-demo-wrapper\">\n          <WatermarkFullPageDemo />\n        </View>\n      </Block>\n    </Page>\n  )\n}"
    ],
    "examples": [
      {
        "source": "watermark",
        "code": "import { useState } from \"react\"\nimport { Watermark, Button } from \"@taroify/core\"\nimport { View } from \"@tarojs/components\"\nimport Block from \"../../../components/block\"\nimport Page from \"../../../components/page\"\nimport \"./index.scss\"\n\nfunction WatermarkFullPageDemo() {\n  const [fullPage, setFullPage] = useState(false)\n  return <>\n    <Button color=\"primary\" onClick={() => setFullPage(prev => !prev)}>切换</Button>\n    <Watermark\n      image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n      opacity={0.2}\n      fullPage={fullPage}\n    />\n  </>\n}\n\nexport default function WatermarkDemo() {\n  return (\n    <Page title=\"Watermark 水印\" className=\"watermark-demo\">\n      <Block variant=\"card\" title=\"文字水印\">\n        <View className=\"watermark-demo-wrapper\">\n          <Watermark content=\"taroify\" />\n        </View>\n      </Block>\n      <Block variant=\"card\" title=\"图片水印\">\n        <View className=\"watermark-demo-wrapper\">\n        <Watermark\n          image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n          opacity={0.2}\n        />\n        </View>\n      </Block>\n      <Block variant=\"card\" title=\"自定义间隔\">\n        <View className=\"watermark-demo-wrapper\">\n        <Watermark\n          image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n          gapX={50}\n          gapY={50}\n          opacity={0.2}\n        />\n        </View>\n      </Block>\n      <Block variant=\"card\" title=\"自定义倾斜角度\">\n        <View className=\"watermark-demo-wrapper\">\n        <Watermark\n          image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n          rotate={22}\n          opacity={0.2}\n        />\n        </View>\n      </Block>\n      <Block variant=\"card\" title=\"显示范围\">\n        <View className=\"watermark-demo-wrapper\">\n          <WatermarkFullPageDemo />\n        </View>\n      </Block>\n    </Page>\n  )\n}"
      }
    ]
  }
]
